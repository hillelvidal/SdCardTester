
/Users/hillelvidal/Library/Coding/ScanIn_Photons/SdCardTester/target/2.3.0/photon/SdCardTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ce4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1d00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a1d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a18  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1d70  080a1d70  00021d70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1d98  080a1d98  00021d98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0015df62  00000000  00000000  00021d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016be6  00000000  00000000  0017fcfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019f36  00000000  00000000  001968e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020d0  00000000  00000000  001b081a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005298  00000000  00000000  001b28ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ca42  00000000  00000000  001b7b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000345cc  00000000  00000000  001e45c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b34f0  00000000  00000000  00218b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000052c0  00000000  00000000  002cc080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fcc3 	bl	80a19b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fccb 	bl	80a19d4 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1d04 	.word	0x080a1d04
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000a81 	.word	0x20000a81
 80a0058:	20000a81 	.word	0x20000a81

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fbaf 	bl	80a17c0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1cd8 	.word	0x080a1cd8
 80a0080:	080a1cf8 	.word	0x080a1cf8

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b8a2 	b.w	80a01cc <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f909 	bl	80a02a0 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bb4d 	b.w	80a1730 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 bec1 	b.w	80a0e1c <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 bec7 	b.w	80a0e2c <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 80a00ae:	4770      	bx	lr

080a00b0 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 80a00b0:	b510      	push	{r4, lr}
 80a00b2:	4604      	mov	r4, r0
  }
 80a00b4:	2110      	movs	r1, #16
 80a00b6:	f001 fc75 	bl	80a19a4 <_ZdlPvj>
 80a00ba:	4620      	mov	r0, r4
 80a00bc:	bd10      	pop	{r4, pc}
	...

080a00c0 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a00c0:	4b02      	ldr	r3, [pc, #8]	; (80a00cc <__tcf_0+0xc>)
 80a00c2:	6898      	ldr	r0, [r3, #8]
 80a00c4:	b108      	cbz	r0, 80a00ca <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a00c6:	f000 bcab 	b.w	80a0a20 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a00ca:	4770      	bx	lr
 80a00cc:	20000070 	.word	0x20000070

080a00d0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a00d0:	b40e      	push	{r1, r2, r3}
 80a00d2:	b503      	push	{r0, r1, lr}
 80a00d4:	ab03      	add	r3, sp, #12
 80a00d6:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80a00da:	2100      	movs	r1, #0
        va_start(args, format);
 80a00dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a00de:	f001 f81f 	bl	80a1120 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a00e2:	b002      	add	sp, #8
 80a00e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80a00e8:	b003      	add	sp, #12
 80a00ea:	4770      	bx	lr

080a00ec <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a00ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a00ee:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 80a00f0:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 80a00f2:	4608      	mov	r0, r1
 80a00f4:	68a3      	ldr	r3, [r4, #8]
    if (default_ && clock_ == 0)
 80a00f6:	b132      	cbz	r2, 80a0106 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 80a00f8:	b9a3      	cbnz	r3, 80a0124 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 80a00fa:	490b      	ldr	r1, [pc, #44]	; (80a0128 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 80a00fc:	b002      	add	sp, #8
 80a00fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 80a0102:	f000 bfdd 	b.w	80a10c0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0106:	4a09      	ldr	r2, [pc, #36]	; (80a012c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 80a0108:	7b26      	ldrb	r6, [r4, #12]
 80a010a:	4d09      	ldr	r5, [pc, #36]	; (80a0130 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 80a010c:	4909      	ldr	r1, [pc, #36]	; (80a0134 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 80a010e:	7b64      	ldrb	r4, [r4, #13]
 80a0110:	2e01      	cmp	r6, #1
 80a0112:	bf18      	it	ne
 80a0114:	4629      	movne	r1, r5
 80a0116:	e9cd 1400 	strd	r1, r4, [sp]
 80a011a:	4907      	ldr	r1, [pc, #28]	; (80a0138 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 80a011c:	f7ff ffd8 	bl	80a00d0 <_ZN5Print6printfEPKcz>
  }
 80a0120:	b002      	add	sp, #8
 80a0122:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0124:	4a05      	ldr	r2, [pc, #20]	; (80a013c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 80a0126:	e7ef      	b.n	80a0108 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 80a0128:	080a1b31 	.word	0x080a1b31
 80a012c:	080a1b28 	.word	0x080a1b28
 80a0130:	080a1b2d 	.word	0x080a1b2d
 80a0134:	080a1b29 	.word	0x080a1b29
 80a0138:	080a1b47 	.word	0x080a1b47
 80a013c:	080a1b20 	.word	0x080a1b20

080a0140 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0140:	b40e      	push	{r1, r2, r3}
 80a0142:	b503      	push	{r0, r1, lr}
 80a0144:	ab03      	add	r3, sp, #12
 80a0146:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80a014a:	2101      	movs	r1, #1
        va_start(args, format);
 80a014c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80a014e:	f000 ffe7 	bl	80a1120 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a0152:	b002      	add	sp, #8
 80a0154:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0158:	b003      	add	sp, #12
 80a015a:	4770      	bx	lr

080a015c <_ZN5SdFatC1Ev>:
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80a015c:	2264      	movs	r2, #100	; 0x64
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
 public:
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  SdFat() {
 80a015e:	b570      	push	{r4, r5, r6, lr}
 80a0160:	f880 2460 	strb.w	r2, [r0, #1120]	; 0x460
  {
 80a0164:	4a15      	ldr	r2, [pc, #84]	; (80a01bc <_ZN5SdFatC1Ev+0x60>)
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80a0166:	2300      	movs	r3, #0
 80a0168:	f8c0 2470 	str.w	r2, [r0, #1136]	; 0x470
 80a016c:	2201      	movs	r2, #1
 80a016e:	4e14      	ldr	r6, [pc, #80]	; (80a01c0 <_ZN5SdFatC1Ev+0x64>)
 80a0170:	71c3      	strb	r3, [r0, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a0172:	f8a0 343c 	strh.w	r3, [r0, #1084]	; 0x43c
 80a0176:	f880 346a 	strb.w	r3, [r0, #1130]	; 0x46a
 80a017a:	f880 2474 	strb.w	r2, [r0, #1140]	; 0x474
 80a017e:	f8c0 3478 	str.w	r3, [r0, #1144]	; 0x478
 80a0182:	f8a0 347c 	strh.w	r3, [r0, #1148]	; 0x47c
 80a0186:	7831      	ldrb	r1, [r6, #0]
 80a0188:	4604      	mov	r4, r0
 80a018a:	ea11 0502 	ands.w	r5, r1, r2
 80a018e:	f3bf 8f5b 	dmb	ish
 80a0192:	d10d      	bne.n	80a01b0 <_ZN5SdFatC1Ev+0x54>
 80a0194:	4630      	mov	r0, r6
 80a0196:	f7ff ff82 	bl	80a009e <__cxa_guard_acquire>
 80a019a:	b148      	cbz	r0, 80a01b0 <_ZN5SdFatC1Ev+0x54>
 80a019c:	4629      	mov	r1, r5
 80a019e:	4809      	ldr	r0, [pc, #36]	; (80a01c4 <_ZN5SdFatC1Ev+0x68>)
 80a01a0:	f001 f81b 	bl	80a11da <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a01a4:	4630      	mov	r0, r6
 80a01a6:	f7ff ff7f 	bl	80a00a8 <__cxa_guard_release>
 80a01aa:	4807      	ldr	r0, [pc, #28]	; (80a01c8 <_ZN5SdFatC1Ev+0x6c>)
 80a01ac:	f001 fbfe 	bl	80a19ac <atexit>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 80a01b0:	4b04      	ldr	r3, [pc, #16]	; (80a01c4 <_ZN5SdFatC1Ev+0x68>)
    m_spi.setPort(nullptr);
  }
 80a01b2:	4620      	mov	r0, r4
 80a01b4:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
 80a01b8:	bd70      	pop	{r4, r5, r6, pc}
 80a01ba:	bf00      	nop
 80a01bc:	080a1b8c 	.word	0x080a1b8c
 80a01c0:	2000006c 	.word	0x2000006c
 80a01c4:	20000070 	.word	0x20000070
 80a01c8:	080a00c1 	.word	0x080a00c1

080a01cc <setup>:
SdFat sd;
bool IsOk;

// setup() runs once, when the device is first turned on.
void setup()
{
 80a01cc:	b508      	push	{r3, lr}
  pinMode(D7, OUTPUT);
 80a01ce:	2007      	movs	r0, #7
 80a01d0:	2101      	movs	r1, #1
 80a01d2:	f001 fb71 	bl	80a18b8 <pinMode>
  RGB.control(true);
}
 80a01d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RGB.control(true);
 80a01da:	2001      	movs	r0, #1
 80a01dc:	f000 bfd1 	b.w	80a1182 <_ZN8RGBClass7controlEb>

080a01e0 <_Z5checkv>:

bool check()
{
 80a01e0:	b5f0      	push	{r4, r5, r6, r7, lr}
class SPISettings : public Printable {
 80a01e2:	4b23      	ldr	r3, [pc, #140]	; (80a0270 <_Z5checkv+0x90>)
 80a01e4:	b085      	sub	sp, #20
 80a01e6:	9300      	str	r3, [sp, #0]
 80a01e8:	2300      	movs	r3, #0
 80a01ea:	2601      	movs	r6, #1
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80a01ec:	4c21      	ldr	r4, [pc, #132]	; (80a0274 <_Z5checkv+0x94>)
 80a01ee:	f88d 3004 	strb.w	r3, [sp, #4]
 80a01f2:	4b21      	ldr	r3, [pc, #132]	; (80a0278 <_Z5checkv+0x98>)
 80a01f4:	f504 678c 	add.w	r7, r4, #1120	; 0x460
 80a01f8:	9302      	str	r3, [sp, #8]
 80a01fa:	220c      	movs	r2, #12
 80a01fc:	466b      	mov	r3, sp
 80a01fe:	4638      	mov	r0, r7
 80a0200:	f204 416c 	addw	r1, r4, #1132	; 0x46c
 80a0204:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a0208:	f000 fa8c 	bl	80a0724 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
 80a020c:	4d1b      	ldr	r5, [pc, #108]	; (80a027c <_Z5checkv+0x9c>)
 80a020e:	b340      	cbz	r0, 80a0262 <_Z5checkv+0x82>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 80a0210:	f204 403c 	addw	r0, r4, #1084	; 0x43c
    m_blockDev = blockDev;
 80a0214:	6027      	str	r7, [r4, #0]
    vwd()->close();
 80a0216:	f000 f8d3 	bl	80a03c0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 80a021a:	4631      	mov	r1, r6
 80a021c:	4620      	mov	r0, r4
 80a021e:	f000 f930 	bl	80a0482 <_ZN9FatVolume4initEh>
 80a0222:	f204 463c 	addw	r6, r4, #1084	; 0x43c
 80a0226:	4601      	mov	r1, r0
 80a0228:	b1b0      	cbz	r0, 80a0258 <_Z5checkv+0x78>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 80a022a:	4912      	ldr	r1, [pc, #72]	; (80a0274 <_Z5checkv+0x94>)
 80a022c:	f201 403c 	addw	r0, r1, #1084	; 0x43c
 80a0230:	f000 f876 	bl	80a0320 <_ZN7FatFile8openRootEP9FatVolume>
 80a0234:	b1a8      	cbz	r0, 80a0262 <_Z5checkv+0x82>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 80a0236:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 80a023a:	f013 0f70 	tst.w	r3, #112	; 0x70
 80a023e:	d010      	beq.n	80a0262 <_Z5checkv+0x82>
      return false;
    }
    m_cwd = dir;
 80a0240:	4b0f      	ldr	r3, [pc, #60]	; (80a0280 <_Z5checkv+0xa0>)
 80a0242:	601e      	str	r6, [r3, #0]
  IsOk = sd.begin(A2, SPI_SPEED);
 80a0244:	2301      	movs	r3, #1
 80a0246:	702b      	strb	r3, [r5, #0]

  if (IsOk)
    Serial.printlnf("SD Card Is OK.");
 80a0248:	f001 f97e 	bl	80a1548 <_Z16_fetch_usbserialv>
 80a024c:	490d      	ldr	r1, [pc, #52]	; (80a0284 <_Z5checkv+0xa4>)
  else
    Serial.printlnf("SD Card ERROR.");
 80a024e:	f7ff ff77 	bl	80a0140 <_ZN5Print8printlnfEPKcz>

  return IsOk;
}
 80a0252:	7828      	ldrb	r0, [r5, #0]
 80a0254:	b005      	add	sp, #20
 80a0256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (part ? init(part) : init(1) || init(0))
 80a0258:	4620      	mov	r0, r4
 80a025a:	f000 f912 	bl	80a0482 <_ZN9FatVolume4initEh>
 80a025e:	2800      	cmp	r0, #0
 80a0260:	d1e3      	bne.n	80a022a <_Z5checkv+0x4a>
  IsOk = sd.begin(A2, SPI_SPEED);
 80a0262:	2300      	movs	r3, #0
 80a0264:	702b      	strb	r3, [r5, #0]
    Serial.printlnf("SD Card ERROR.");
 80a0266:	f001 f96f 	bl	80a1548 <_Z16_fetch_usbserialv>
 80a026a:	4907      	ldr	r1, [pc, #28]	; (80a0288 <_Z5checkv+0xa8>)
 80a026c:	e7ef      	b.n	80a024e <_Z5checkv+0x6e>
 80a026e:	bf00      	nop
 80a0270:	080a1b8c 	.word	0x080a1b8c
 80a0274:	2000008c 	.word	0x2000008c
 80a0278:	003d0900 	.word	0x003d0900
 80a027c:	2000007c 	.word	0x2000007c
 80a0280:	20000514 	.word	0x20000514
 80a0284:	080a1b64 	.word	0x080a1b64
 80a0288:	080a1b73 	.word	0x080a1b73

080a028c <_Z8indicateb>:
  delay(500);
}

void indicate(bool ok)
{
  if (ok)
 80a028c:	4602      	mov	r2, r0
 80a028e:	b120      	cbz	r0, 80a029a <_Z8indicateb+0xe>
    RGB.color(0, 255, 0);
 80a0290:	2200      	movs	r2, #0
 80a0292:	21ff      	movs	r1, #255	; 0xff
 80a0294:	4610      	mov	r0, r2
  else
    RGB.color(255, 0, 0);
 80a0296:	f000 bf84 	b.w	80a11a2 <_ZN8RGBClass5colorEiii>
 80a029a:	4601      	mov	r1, r0
 80a029c:	20ff      	movs	r0, #255	; 0xff
 80a029e:	e7fa      	b.n	80a0296 <_Z8indicateb+0xa>

080a02a0 <loop>:
{
 80a02a0:	b508      	push	{r3, lr}
  indicate(check());
 80a02a2:	f7ff ff9d 	bl	80a01e0 <_Z5checkv>
 80a02a6:	f7ff fff1 	bl	80a028c <_Z8indicateb>
}
 80a02aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(500);
 80a02ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a02b2:	f000 bdd3 	b.w	80a0e5c <delay>
	...

080a02b8 <_GLOBAL__sub_I_SystemMode>:
 80a02b8:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
 80a02ba:	2100      	movs	r1, #0
 80a02bc:	2001      	movs	r0, #1
 80a02be:	f000 fd21 	bl	80a0d04 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a02c2:	2200      	movs	r2, #0
 80a02c4:	4b06      	ldr	r3, [pc, #24]	; (80a02e0 <_GLOBAL__sub_I_SystemMode+0x28>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a02c6:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
 80a02c8:	601a      	str	r2, [r3, #0]
 80a02ca:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
 80a02cc:	719a      	strb	r2, [r3, #6]
 80a02ce:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80a02d2:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 80a02d4:	f000 fd06 	bl	80a0ce4 <set_system_mode>
SdFat sd;
 80a02d8:	4802      	ldr	r0, [pc, #8]	; (80a02e4 <_GLOBAL__sub_I_SystemMode+0x2c>)
 80a02da:	f7ff ff3f 	bl	80a015c <_ZN5SdFatC1Ev>
 80a02de:	bd08      	pop	{r3, pc}
 80a02e0:	20000080 	.word	0x20000080
 80a02e4:	2000008c 	.word	0x2000008c

080a02e8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80a02e8:	b510      	push	{r4, lr}
 80a02ea:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 80a02ec:	3024      	adds	r0, #36	; 0x24
 80a02ee:	f000 f87e 	bl	80a03ee <_ZN8FatCache4syncEv>
 80a02f2:	b128      	cbz	r0, 80a0300 <_ZN9FatVolume9cacheSyncEv+0x18>
 80a02f4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 80a02f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 80a02fc:	f000 b877 	b.w	80a03ee <_ZN8FatCache4syncEv>
  }
 80a0300:	bd10      	pop	{r4, pc}

080a0302 <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 80a0302:	b510      	push	{r4, lr}
 80a0304:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a0306:	6880      	ldr	r0, [r0, #8]
 80a0308:	460a      	mov	r2, r1
 80a030a:	3024      	adds	r0, #36	; 0x24
 80a030c:	69a1      	ldr	r1, [r4, #24]
 80a030e:	f000 f895 	bl	80a043c <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 80a0312:	b120      	cbz	r0, 80a031e <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 80a0314:	88a3      	ldrh	r3, [r4, #4]
 80a0316:	f003 030f 	and.w	r3, r3, #15
 80a031a:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 80a031e:	bd10      	pop	{r4, pc}

080a0320 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80a0320:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 80a0322:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
 80a0324:	4605      	mov	r5, r0
 80a0326:	460e      	mov	r6, r1
  if (isOpen()) {
 80a0328:	b94c      	cbnz	r4, 80a033e <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 80a032a:	2224      	movs	r2, #36	; 0x24
 80a032c:	4621      	mov	r1, r4
 80a032e:	f001 fb51 	bl	80a19d4 <memset>

  m_vol = vol;
 80a0332:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 80a0334:	79f3      	ldrb	r3, [r6, #7]
 80a0336:	2b10      	cmp	r3, #16
 80a0338:	d003      	beq.n	80a0342 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 80a033a:	2b20      	cmp	r3, #32
 80a033c:	d007      	beq.n	80a034e <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
 80a033e:	2000      	movs	r0, #0
 80a0340:	e004      	b.n	80a034c <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
 80a0342:	2320      	movs	r3, #32
  m_flags = F_READ;
 80a0344:	2401      	movs	r4, #1
  return true;
 80a0346:	4620      	mov	r0, r4
    m_attr = FILE_ATTR_ROOT32;
 80a0348:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
 80a034a:	70ac      	strb	r4, [r5, #2]
}
 80a034c:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
 80a034e:	2340      	movs	r3, #64	; 0x40
 80a0350:	e7f8      	b.n	80a0344 <_ZN7FatFile8openRootEP9FatVolume+0x24>
	...

080a0354 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80a0354:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80a0356:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 80a0358:	4604      	mov	r4, r0
  if (!isOpen()) {
 80a035a:	b90b      	cbnz	r3, 80a0360 <_ZN7FatFile4syncEv+0xc>
    return true;
 80a035c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 80a035e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 80a0360:	7883      	ldrb	r3, [r0, #2]
 80a0362:	075a      	lsls	r2, r3, #29
 80a0364:	d523      	bpl.n	80a03ae <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80a0366:	2101      	movs	r1, #1
 80a0368:	f7ff ffcb 	bl	80a0302 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80a036c:	4605      	mov	r5, r0
 80a036e:	b928      	cbnz	r0, 80a037c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
 80a0370:	7863      	ldrb	r3, [r4, #1]
  return false;
 80a0372:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 80a0374:	f043 0301 	orr.w	r3, r3, #1
 80a0378:	7063      	strb	r3, [r4, #1]
  return false;
 80a037a:	e7f0      	b.n	80a035e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80a037c:	7803      	ldrb	r3, [r0, #0]
 80a037e:	2be5      	cmp	r3, #229	; 0xe5
 80a0380:	d0f6      	beq.n	80a0370 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
 80a0382:	7823      	ldrb	r3, [r4, #0]
 80a0384:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80a0386:	bf44      	itt	mi
 80a0388:	69e3      	ldrmi	r3, [r4, #28]
 80a038a:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 80a038c:	8c23      	ldrh	r3, [r4, #32]
 80a038e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 80a0390:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80a0392:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 80a0394:	4b09      	ldr	r3, [pc, #36]	; (80a03bc <_ZN7FatFile4syncEv+0x68>)
 80a0396:	681b      	ldr	r3, [r3, #0]
 80a0398:	b12b      	cbz	r3, 80a03a6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80a039a:	f100 0116 	add.w	r1, r0, #22
 80a039e:	3018      	adds	r0, #24
 80a03a0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80a03a2:	8b2b      	ldrh	r3, [r5, #24]
 80a03a4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 80a03a6:	78a3      	ldrb	r3, [r4, #2]
 80a03a8:	f023 0304 	bic.w	r3, r3, #4
 80a03ac:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 80a03ae:	68a0      	ldr	r0, [r4, #8]
 80a03b0:	f7ff ff9a 	bl	80a02e8 <_ZN9FatVolume9cacheSyncEv>
 80a03b4:	2800      	cmp	r0, #0
 80a03b6:	d0db      	beq.n	80a0370 <_ZN7FatFile4syncEv+0x1c>
 80a03b8:	e7d0      	b.n	80a035c <_ZN7FatFile4syncEv+0x8>
 80a03ba:	bf00      	nop
 80a03bc:	20000510 	.word	0x20000510

080a03c0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 80a03c0:	b510      	push	{r4, lr}
 80a03c2:	4604      	mov	r4, r0
  bool rtn = sync();
 80a03c4:	f7ff ffc6 	bl	80a0354 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80a03c8:	2300      	movs	r3, #0
 80a03ca:	7023      	strb	r3, [r4, #0]
}
 80a03cc:	bd10      	pop	{r4, pc}

080a03ce <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a03ce:	b570      	push	{r4, r5, r6, lr}
 80a03d0:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a03d2:	460c      	mov	r4, r1
    }
 80a03d4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a03d6:	b149      	cbz	r1, 80a03ec <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a03d8:	f001 fb28 	bl	80a1a2c <strlen>
 80a03dc:	682b      	ldr	r3, [r5, #0]
 80a03de:	4602      	mov	r2, r0
 80a03e0:	4621      	mov	r1, r4
 80a03e2:	4628      	mov	r0, r5
    }
 80a03e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a03e8:	68db      	ldr	r3, [r3, #12]
 80a03ea:	4718      	bx	r3
    }
 80a03ec:	bd70      	pop	{r4, r5, r6, pc}

080a03ee <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80a03ee:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 80a03f0:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 80a03f2:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 80a03f4:	07da      	lsls	r2, r3, #31
 80a03f6:	d51f      	bpl.n	80a0438 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 80a03f8:	6843      	ldr	r3, [r0, #4]
 80a03fa:	f100 060c 	add.w	r6, r0, #12
    return m_blockDev->writeBlock(block, src);
 80a03fe:	6881      	ldr	r1, [r0, #8]
 80a0400:	4632      	mov	r2, r6
 80a0402:	6818      	ldr	r0, [r3, #0]
 80a0404:	f000 fa7e 	bl	80a0904 <_ZN9SdSpiCard10writeBlockEmPKh>
 80a0408:	4605      	mov	r5, r0
 80a040a:	b910      	cbnz	r0, 80a0412 <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 80a040c:	2500      	movs	r5, #0
}
 80a040e:	4628      	mov	r0, r5
 80a0410:	bd70      	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 80a0412:	7823      	ldrb	r3, [r4, #0]
 80a0414:	079b      	lsls	r3, r3, #30
 80a0416:	d404      	bmi.n	80a0422 <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 80a0418:	7823      	ldrb	r3, [r4, #0]
 80a041a:	f023 0301 	bic.w	r3, r3, #1
 80a041e:	7023      	strb	r3, [r4, #0]
 80a0420:	e7f5      	b.n	80a040e <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80a0422:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80a0426:	6919      	ldr	r1, [r3, #16]
 80a0428:	4632      	mov	r2, r6
 80a042a:	4401      	add	r1, r0
 80a042c:	6818      	ldr	r0, [r3, #0]
 80a042e:	f000 fa69 	bl	80a0904 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80a0432:	2800      	cmp	r0, #0
 80a0434:	d1f0      	bne.n	80a0418 <_ZN8FatCache4syncEv+0x2a>
 80a0436:	e7e9      	b.n	80a040c <_ZN8FatCache4syncEv+0x1e>
  return true;
 80a0438:	2501      	movs	r5, #1
 80a043a:	e7e8      	b.n	80a040e <_ZN8FatCache4syncEv+0x20>

080a043c <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a043c:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 80a043e:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a0440:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 80a0442:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a0444:	460e      	mov	r6, r1
 80a0446:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80a0448:	d009      	beq.n	80a045e <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 80a044a:	f7ff ffd0 	bl	80a03ee <_ZN8FatCache4syncEv>
 80a044e:	b908      	cbnz	r0, 80a0454 <_ZN8FatCache4readEmh+0x18>
  return 0;
 80a0450:	2000      	movs	r0, #0
}
 80a0452:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 80a0454:	076b      	lsls	r3, r5, #29
 80a0456:	d50a      	bpl.n	80a046e <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 80a0458:	2300      	movs	r3, #0
    m_lbn = lbn;
 80a045a:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 80a045c:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 80a045e:	4620      	mov	r0, r4
 80a0460:	7822      	ldrb	r2, [r4, #0]
 80a0462:	f005 0503 	and.w	r5, r5, #3
 80a0466:	4315      	orrs	r5, r2
 80a0468:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 80a046c:	e7f1      	b.n	80a0452 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80a046e:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
 80a0470:	4631      	mov	r1, r6
 80a0472:	6818      	ldr	r0, [r3, #0]
 80a0474:	f104 020c 	add.w	r2, r4, #12
 80a0478:	f000 f9fe 	bl	80a0878 <_ZN9SdSpiCard9readBlockEmPh>
 80a047c:	2800      	cmp	r0, #0
 80a047e:	d1eb      	bne.n	80a0458 <_ZN8FatCache4readEmh+0x1c>
 80a0480:	e7e6      	b.n	80a0450 <_ZN8FatCache4readEmh+0x14>

080a0482 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 80a0482:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 80a0484:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 80a0486:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 80a0488:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 80a048a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
 80a048e:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80a0490:	460d      	mov	r5, r1
  m_fatType = 0;
 80a0492:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 80a0494:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
 80a0498:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
 80a049a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80a049e:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
 80a04a0:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
 80a04a4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 80a04a8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
  if (part) {
 80a04ac:	b1b9      	cbz	r1, 80a04de <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 80a04ae:	2904      	cmp	r1, #4
 80a04b0:	d901      	bls.n	80a04b6 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 80a04b2:	2000      	movs	r0, #0
}
 80a04b4:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 80a04b6:	4611      	mov	r1, r2
 80a04b8:	4630      	mov	r0, r6
 80a04ba:	f7ff ffbf 	bl	80a043c <_ZN8FatCache4readEmh>
    if (!pc) {
 80a04be:	2800      	cmp	r0, #0
 80a04c0:	d0f7      	beq.n	80a04b2 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 80a04c2:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 80a04c6:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 80a04ca:	065b      	lsls	r3, r3, #25
 80a04cc:	d1f1      	bne.n	80a04b2 <_ZN9FatVolume4initEh+0x30>
 80a04ce:	f105 011b 	add.w	r1, r5, #27
 80a04d2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80a04d6:	f8d1 5006 	ldr.w	r5, [r1, #6]
 80a04da:	2d00      	cmp	r5, #0
 80a04dc:	d0e9      	beq.n	80a04b2 <_ZN9FatVolume4initEh+0x30>
 80a04de:	2200      	movs	r2, #0
 80a04e0:	4629      	mov	r1, r5
 80a04e2:	4630      	mov	r0, r6
 80a04e4:	f7ff ffaa 	bl	80a043c <_ZN8FatCache4readEmh>
  if (!pc) {
 80a04e8:	2800      	cmp	r0, #0
 80a04ea:	d0e2      	beq.n	80a04b2 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 80a04ec:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 80a04f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80a04f4:	d1dd      	bne.n	80a04b2 <_ZN9FatVolume4initEh+0x30>
 80a04f6:	7c03      	ldrb	r3, [r0, #16]
 80a04f8:	2b02      	cmp	r3, #2
 80a04fa:	d1da      	bne.n	80a04b2 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 80a04fc:	89c3      	ldrh	r3, [r0, #14]
 80a04fe:	2b00      	cmp	r3, #0
 80a0500:	d0d7      	beq.n	80a04b2 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80a0502:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 80a0504:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 80a0506:	1e4b      	subs	r3, r1, #1
 80a0508:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 80a050a:	2300      	movs	r3, #0
 80a050c:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80a050e:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80a0510:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80a0512:	4299      	cmp	r1, r3
 80a0514:	d007      	beq.n	80a0526 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 80a0516:	3e01      	subs	r6, #1
 80a0518:	d0cb      	beq.n	80a04b2 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80a051a:	79a2      	ldrb	r2, [r4, #6]
 80a051c:	005b      	lsls	r3, r3, #1
 80a051e:	3201      	adds	r2, #1
 80a0520:	b2db      	uxtb	r3, r3
 80a0522:	71a2      	strb	r2, [r4, #6]
 80a0524:	e7f5      	b.n	80a0512 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 80a0526:	8ac1      	ldrh	r1, [r0, #22]
 80a0528:	b901      	cbnz	r1, 80a052c <_ZN9FatVolume4initEh+0xaa>
 80a052a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80a052c:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 80a052e:	89c3      	ldrh	r3, [r0, #14]
 80a0530:	442b      	add	r3, r5
 80a0532:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80a0534:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80a0538:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80a053c:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80a053e:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 80a0540:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 80a0544:	0149      	lsls	r1, r1, #5
 80a0546:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 80a054a:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 80a054e:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 80a0550:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 80a0554:	b902      	cbnz	r2, 80a0558 <_ZN9FatVolume4initEh+0xd6>
 80a0556:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 80a0558:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 80a055a:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 80a055c:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 80a055e:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 80a0560:	1c4b      	adds	r3, r1, #1
 80a0562:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
 80a0564:	f640 73f4 	movw	r3, #4084	; 0xff4
 80a0568:	4299      	cmp	r1, r3
 80a056a:	d802      	bhi.n	80a0572 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
 80a056c:	230c      	movs	r3, #12
 80a056e:	71e3      	strb	r3, [r4, #7]
 80a0570:	e79f      	b.n	80a04b2 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 80a0572:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80a0576:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 80a0578:	bf89      	itett	hi
 80a057a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 80a057c:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 80a057e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 80a0580:	2320      	movhi	r3, #32
  return true;
 80a0582:	2001      	movs	r0, #1
    m_fatType = 32;
 80a0584:	71e3      	strb	r3, [r4, #7]
 80a0586:	e795      	b.n	80a04b4 <_ZN9FatVolume4initEh+0x32>

080a0588 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 80a0588:	b570      	push	{r4, r5, r6, lr}
 80a058a:	460d      	mov	r5, r1
 80a058c:	4614      	mov	r4, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a058e:	f000 fa67 	bl	80a0a60 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 80a0592:	4e0c      	ldr	r6, [pc, #48]	; (80a05c4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 80a0594:	6833      	ldr	r3, [r6, #0]
 80a0596:	1ac0      	subs	r0, r0, r3
 80a0598:	4b0b      	ldr	r3, [pc, #44]	; (80a05c8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 80a059a:	4298      	cmp	r0, r3
 80a059c:	d908      	bls.n	80a05b0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a059e:	f000 fa67 	bl	80a0a70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a05a2:	4b0a      	ldr	r3, [pc, #40]	; (80a05cc <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 80a05a4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a05a6:	f000 fbc9 	bl	80a0d3c <spark_process>
 80a05aa:	f000 fa59 	bl	80a0a60 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 80a05ae:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a05b0:	f000 fa5e 	bl	80a0a70 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 80a05b4:	b280      	uxth	r0, r0
 80a05b6:	1b40      	subs	r0, r0, r5
}
 80a05b8:	42a0      	cmp	r0, r4
 80a05ba:	bfd4      	ite	le
 80a05bc:	2000      	movle	r0, #0
 80a05be:	2001      	movgt	r0, #1
 80a05c0:	bd70      	pop	{r4, r5, r6, pc}
 80a05c2:	bf00      	nop
 80a05c4:	20000518 	.word	0x20000518
 80a05c8:	000186a0 	.word	0x000186a0
 80a05cc:	200009b4 	.word	0x200009b4

080a05d0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80a05d0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 80a05d2:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
 80a05d4:	4604      	mov	r4, r0
  if (!m_spiActive) {
 80a05d6:	b94d      	cbnz	r5, 80a05ec <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 80a05d8:	6840      	ldr	r0, [r0, #4]
 80a05da:	f000 f9cf 	bl	80a097c <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
 80a05de:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
 80a05e0:	4629      	mov	r1, r5
 80a05e2:	7d18      	ldrb	r0, [r3, #20]
 80a05e4:	f001 f979 	bl	80a18da <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 80a05e8:	2301      	movs	r3, #1
 80a05ea:	7223      	strb	r3, [r4, #8]
  }
}
 80a05ec:	bd38      	pop	{r3, r4, r5, pc}

080a05ee <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80a05ee:	b510      	push	{r4, lr}
  if (m_spiActive) {
 80a05f0:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
 80a05f2:	4604      	mov	r4, r0
  if (m_spiActive) {
 80a05f4:	b16b      	cbz	r3, 80a0612 <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
 80a05f6:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
 80a05f8:	2101      	movs	r1, #1
 80a05fa:	7d18      	ldrb	r0, [r3, #20]
 80a05fc:	f001 f96d 	bl	80a18da <digitalWrite>
     m_spiDriver->send(data);
 80a0600:	21ff      	movs	r1, #255	; 0xff
 80a0602:	6860      	ldr	r0, [r4, #4]
 80a0604:	f000 f9ec 	bl	80a09e0 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
 80a0608:	6860      	ldr	r0, [r4, #4]
 80a060a:	f000 f9cb 	bl	80a09a4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 80a060e:	2300      	movs	r3, #0
 80a0610:	7223      	strb	r3, [r4, #8]
  }
}
 80a0612:	bd10      	pop	{r4, pc}

080a0614 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80a0614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0616:	4604      	mov	r4, r0
 80a0618:	460d      	mov	r5, r1
 80a061a:	4616      	mov	r6, r2
 80a061c:	f000 fa28 	bl	80a0a70 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 80a0620:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
 80a0622:	6860      	ldr	r0, [r4, #4]
 80a0624:	f000 f9c1 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
 80a0628:	28ff      	cmp	r0, #255	; 0xff
 80a062a:	7260      	strb	r0, [r4, #9]
 80a062c:	d10e      	bne.n	80a064c <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 80a062e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0632:	4639      	mov	r1, r7
 80a0634:	4620      	mov	r0, r4
 80a0636:	f7ff ffa7 	bl	80a0588 <_ZN9SdSpiCard10isTimedOutEtt>
 80a063a:	2800      	cmp	r0, #0
 80a063c:	d0f1      	beq.n	80a0622 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 80a063e:	2355      	movs	r3, #85	; 0x55
  spiStop();
 80a0640:	4620      	mov	r0, r4
 80a0642:	7023      	strb	r3, [r4, #0]
 80a0644:	f7ff ffd3 	bl	80a05ee <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a0648:	2000      	movs	r0, #0
}
 80a064a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 80a064c:	28fe      	cmp	r0, #254	; 0xfe
 80a064e:	d001      	beq.n	80a0654 <_ZN9SdSpiCard8readDataEPhj+0x40>
 80a0650:	2350      	movs	r3, #80	; 0x50
 80a0652:	e7f5      	b.n	80a0640 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
 80a0654:	4632      	mov	r2, r6
 80a0656:	4629      	mov	r1, r5
 80a0658:	6860      	ldr	r0, [r4, #4]
 80a065a:	f000 f9ab 	bl	80a09b4 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
 80a065e:	7260      	strb	r0, [r4, #9]
 80a0660:	b108      	cbz	r0, 80a0666 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
 80a0662:	2360      	movs	r3, #96	; 0x60
 80a0664:	e7ec      	b.n	80a0640 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
 80a0666:	6860      	ldr	r0, [r4, #4]
 80a0668:	f000 f99f 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
 80a066c:	6860      	ldr	r0, [r4, #4]
 80a066e:	f000 f99c 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
 80a0672:	2001      	movs	r0, #1
 80a0674:	e7e9      	b.n	80a064a <_ZN9SdSpiCard8readDataEPhj+0x36>

080a0676 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 80a0676:	b570      	push	{r4, r5, r6, lr}
 80a0678:	4604      	mov	r4, r0
 80a067a:	460e      	mov	r6, r1
 80a067c:	f000 f9f8 	bl	80a0a70 <HAL_Timer_Get_Milli_Seconds>
 80a0680:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 80a0682:	4632      	mov	r2, r6
 80a0684:	4629      	mov	r1, r5
 80a0686:	4620      	mov	r0, r4
 80a0688:	f7ff ff7e 	bl	80a0588 <_ZN9SdSpiCard10isTimedOutEtt>
 80a068c:	b930      	cbnz	r0, 80a069c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 80a068e:	6860      	ldr	r0, [r4, #4]
 80a0690:	f000 f98b 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 80a0694:	28ff      	cmp	r0, #255	; 0xff
 80a0696:	d1f4      	bne.n	80a0682 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 80a0698:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 80a069a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 80a069c:	2000      	movs	r0, #0
 80a069e:	e7fc      	b.n	80a069a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

080a06a0 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80a06a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
 80a06a2:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80a06a4:	4604      	mov	r4, r0
 80a06a6:	460d      	mov	r5, r1
 80a06a8:	9201      	str	r2, [sp, #4]
  if (!m_spiActive) {
 80a06aa:	b90b      	cbnz	r3, 80a06b0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 80a06ac:	f7ff ff90 	bl	80a05d0 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
 80a06b0:	b125      	cbz	r5, 80a06bc <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
 80a06b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a06b6:	4620      	mov	r0, r4
 80a06b8:	f7ff ffdd 	bl	80a0676 <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
 80a06bc:	6860      	ldr	r0, [r4, #4]
 80a06be:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80a06c2:	f000 f98d 	bl	80a09e0 <_ZN14SdSpiAltDriver4sendEh>
 80a06c6:	2603      	movs	r6, #3
    spiSend(pa[i]);
 80a06c8:	af01      	add	r7, sp, #4
 80a06ca:	5db9      	ldrb	r1, [r7, r6]
 80a06cc:	6860      	ldr	r0, [r4, #4]
 80a06ce:	f000 f987 	bl	80a09e0 <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
 80a06d2:	3e01      	subs	r6, #1
 80a06d4:	d2f9      	bcs.n	80a06ca <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80a06d6:	2d00      	cmp	r5, #0
 80a06d8:	bf0c      	ite	eq
 80a06da:	2195      	moveq	r1, #149	; 0x95
 80a06dc:	2187      	movne	r1, #135	; 0x87
 80a06de:	6860      	ldr	r0, [r4, #4]
 80a06e0:	f000 f97e 	bl	80a09e0 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
 80a06e4:	6860      	ldr	r0, [r4, #4]
 80a06e6:	f000 f960 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
 80a06ea:	250b      	movs	r5, #11
 80a06ec:	6860      	ldr	r0, [r4, #4]
 80a06ee:	f000 f95c 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 80a06f2:	0603      	lsls	r3, r0, #24
 80a06f4:	7260      	strb	r0, [r4, #9]
 80a06f6:	d503      	bpl.n	80a0700 <_ZN9SdSpiCard11cardCommandEhm+0x60>
 80a06f8:	3d01      	subs	r5, #1
 80a06fa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a06fe:	d1f5      	bne.n	80a06ec <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
 80a0700:	b003      	add	sp, #12
 80a0702:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0704 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 80a0704:	b570      	push	{r4, r5, r6, lr}
 80a0706:	4604      	mov	r4, r0
 80a0708:	460d      	mov	r5, r1
 80a070a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 80a070c:	2137      	movs	r1, #55	; 0x37
 80a070e:	2200      	movs	r2, #0
 80a0710:	f7ff ffc6 	bl	80a06a0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80a0714:	4632      	mov	r2, r6
 80a0716:	4629      	mov	r1, r5
 80a0718:	4620      	mov	r0, r4
  }
 80a071a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
 80a071e:	f7ff bfbf 	b.w	80a06a0 <_ZN9SdSpiCard11cardCommandEhm>
	...

080a0724 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80a0724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 80a0728:	2500      	movs	r5, #0
  m_spiDriver = spi;
 80a072a:	6041      	str	r1, [r0, #4]
  m_spiActive = false;
 80a072c:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 80a072e:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 80a0730:	7285      	strb	r5, [r0, #10]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80a0732:	4604      	mov	r4, r0
 80a0734:	4690      	mov	r8, r2
 80a0736:	461e      	mov	r6, r3
 80a0738:	f000 f99a 	bl	80a0a70 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
 80a073c:	4641      	mov	r1, r8
 80a073e:	4607      	mov	r7, r0
 80a0740:	6860      	ldr	r0, [r4, #4]
 80a0742:	f000 f91f 	bl	80a0984 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 80a0746:	6863      	ldr	r3, [r4, #4]
 80a0748:	4a4a      	ldr	r2, [pc, #296]	; (80a0874 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x150>)
 80a074a:	721d      	strb	r5, [r3, #8]
 80a074c:	2501      	movs	r5, #1
 80a074e:	60da      	str	r2, [r3, #12]
 80a0750:	821d      	strh	r5, [r3, #16]
  spiStart();
 80a0752:	4620      	mov	r0, r4
 80a0754:	f7ff ff3c 	bl	80a05d0 <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
 80a0758:	6863      	ldr	r3, [r4, #4]
 80a075a:	4629      	mov	r1, r5
 80a075c:	7d18      	ldrb	r0, [r3, #20]
 80a075e:	f001 f8bc 	bl	80a18da <digitalWrite>
 80a0762:	250a      	movs	r5, #10
     m_spiDriver->send(data);
 80a0764:	21ff      	movs	r1, #255	; 0xff
 80a0766:	6860      	ldr	r0, [r4, #4]
 80a0768:	3d01      	subs	r5, #1
 80a076a:	f000 f939 	bl	80a09e0 <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
 80a076e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a0772:	d1f7      	bne.n	80a0764 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
 80a0774:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
 80a0776:	4629      	mov	r1, r5
 80a0778:	7d18      	ldrb	r0, [r3, #20]
 80a077a:	f001 f8ae 	bl	80a18da <digitalWrite>
  }
 80a077e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 80a0780:	2200      	movs	r2, #0
 80a0782:	4620      	mov	r0, r4
 80a0784:	4611      	mov	r1, r2
 80a0786:	f7ff ff8b 	bl	80a06a0 <_ZN9SdSpiCard11cardCommandEhm>
 80a078a:	2801      	cmp	r0, #1
 80a078c:	4680      	mov	r8, r0
 80a078e:	d018      	beq.n	80a07c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
 80a0790:	3d01      	subs	r5, #1
 80a0792:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a0796:	d107      	bne.n	80a07a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
 80a0798:	2320      	movs	r3, #32
  spiStop();
 80a079a:	4620      	mov	r0, r4
 80a079c:	7023      	strb	r3, [r4, #0]
 80a079e:	f7ff ff26 	bl	80a05ee <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a07a2:	2000      	movs	r0, #0
}
 80a07a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
 80a07a8:	21fd      	movs	r1, #253	; 0xfd
 80a07aa:	6860      	ldr	r0, [r4, #4]
 80a07ac:	f000 f918 	bl	80a09e0 <_ZN14SdSpiAltDriver4sendEh>
 80a07b0:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
 80a07b4:	6860      	ldr	r0, [r4, #4]
 80a07b6:	f000 f8f8 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
 80a07ba:	f1b8 0801 	subs.w	r8, r8, #1
 80a07be:	d1f9      	bne.n	80a07b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
 80a07c0:	e7de      	b.n	80a0780 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80a07c2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80a07c6:	2108      	movs	r1, #8
 80a07c8:	4620      	mov	r0, r4
 80a07ca:	f7ff ff69 	bl	80a06a0 <_ZN9SdSpiCard11cardCommandEhm>
 80a07ce:	2805      	cmp	r0, #5
 80a07d0:	d114      	bne.n	80a07fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80a07d2:	2500      	movs	r5, #0
    m_type = value;
 80a07d4:	f884 800a 	strb.w	r8, [r4, #10]
 80a07d8:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 80a07da:	462a      	mov	r2, r5
 80a07dc:	2129      	movs	r1, #41	; 0x29
 80a07de:	4620      	mov	r0, r4
 80a07e0:	f7ff ff90 	bl	80a0704 <_ZN9SdSpiCard8cardAcmdEhm>
 80a07e4:	4602      	mov	r2, r0
 80a07e6:	b1d8      	cbz	r0, 80a0820 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 80a07e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80a07ec:	4639      	mov	r1, r7
 80a07ee:	4620      	mov	r0, r4
 80a07f0:	f7ff feca 	bl	80a0588 <_ZN9SdSpiCard10isTimedOutEtt>
 80a07f4:	2800      	cmp	r0, #0
 80a07f6:	d0f0      	beq.n	80a07da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
 80a07f8:	2343      	movs	r3, #67	; 0x43
 80a07fa:	e7ce      	b.n	80a079a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
 80a07fc:	2504      	movs	r5, #4
    return m_spiDriver->receive();
 80a07fe:	6860      	ldr	r0, [r4, #4]
 80a0800:	f000 f8d3 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
 80a0804:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
 80a0806:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80a080a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
 80a080c:	d1f7      	bne.n	80a07fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
 80a080e:	28aa      	cmp	r0, #170	; 0xaa
 80a0810:	d104      	bne.n	80a081c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
 80a0812:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80a0814:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80a0818:	72a3      	strb	r3, [r4, #10]
    return m_type;
 80a081a:	e7dd      	b.n	80a07d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
 80a081c:	2325      	movs	r3, #37	; 0x25
 80a081e:	e7bc      	b.n	80a079a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
 80a0820:	7aa3      	ldrb	r3, [r4, #10]
 80a0822:	2b02      	cmp	r3, #2
 80a0824:	d119      	bne.n	80a085a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x136>
    if (cardCommand(CMD58, 0)) {
 80a0826:	213a      	movs	r1, #58	; 0x3a
 80a0828:	4620      	mov	r0, r4
 80a082a:	f7ff ff39 	bl	80a06a0 <_ZN9SdSpiCard11cardCommandEhm>
 80a082e:	b108      	cbz	r0, 80a0834 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
 80a0830:	2337      	movs	r3, #55	; 0x37
 80a0832:	e7b2      	b.n	80a079a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
 80a0834:	6860      	ldr	r0, [r4, #4]
 80a0836:	f000 f8b8 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
 80a083a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80a083e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 80a0840:	bf08      	it	eq
 80a0842:	2303      	moveq	r3, #3
    return m_spiDriver->receive();
 80a0844:	6860      	ldr	r0, [r4, #4]
    m_type = value;
 80a0846:	bf08      	it	eq
 80a0848:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
 80a084a:	f000 f8ae 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
 80a084e:	6860      	ldr	r0, [r4, #4]
 80a0850:	f000 f8ab 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
 80a0854:	6860      	ldr	r0, [r4, #4]
 80a0856:	f000 f8a8 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
 80a085a:	4620      	mov	r0, r4
 80a085c:	f7ff fec7 	bl	80a05ee <_ZN9SdSpiCard7spiStopEv>
 80a0860:	7930      	ldrb	r0, [r6, #4]
  m_spiDriver->setSpiSettings(settings);
 80a0862:	6863      	ldr	r3, [r4, #4]
 80a0864:	68b1      	ldr	r1, [r6, #8]
 80a0866:	89b2      	ldrh	r2, [r6, #12]
 80a0868:	7218      	strb	r0, [r3, #8]
 80a086a:	60d9      	str	r1, [r3, #12]
  return true;
 80a086c:	2001      	movs	r0, #1
 80a086e:	821a      	strh	r2, [r3, #16]
 80a0870:	e798      	b.n	80a07a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
 80a0872:	bf00      	nop
 80a0874:	0003d090 	.word	0x0003d090

080a0878 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a0878:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 80a087a:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a087c:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 80a087e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a0880:	bf18      	it	ne
 80a0882:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 80a0884:	460a      	mov	r2, r1
 80a0886:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a0888:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 80a088a:	f7ff ff09 	bl	80a06a0 <_ZN9SdSpiCard11cardCommandEhm>
 80a088e:	b130      	cbz	r0, 80a089e <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 80a0890:	2330      	movs	r3, #48	; 0x30
 80a0892:	7023      	strb	r3, [r4, #0]
  spiStop();
 80a0894:	4620      	mov	r0, r4
 80a0896:	f7ff feaa 	bl	80a05ee <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a089a:	2500      	movs	r5, #0
 80a089c:	e00b      	b.n	80a08b6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 80a089e:	4629      	mov	r1, r5
 80a08a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a08a4:	4620      	mov	r0, r4
 80a08a6:	f7ff feb5 	bl	80a0614 <_ZN9SdSpiCard8readDataEPhj>
 80a08aa:	4605      	mov	r5, r0
 80a08ac:	2800      	cmp	r0, #0
 80a08ae:	d0f1      	beq.n	80a0894 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
 80a08b0:	4620      	mov	r0, r4
 80a08b2:	f7ff fe9c 	bl	80a05ee <_ZN9SdSpiCard7spiStopEv>
}
 80a08b6:	4628      	mov	r0, r5
 80a08b8:	bd38      	pop	{r3, r4, r5, pc}

080a08ba <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 80a08ba:	b538      	push	{r3, r4, r5, lr}
 80a08bc:	4604      	mov	r4, r0
 80a08be:	4615      	mov	r5, r2
     m_spiDriver->send(data);
 80a08c0:	6840      	ldr	r0, [r0, #4]
 80a08c2:	f000 f88d 	bl	80a09e0 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
 80a08c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a08ca:	4629      	mov	r1, r5
 80a08cc:	6860      	ldr	r0, [r4, #4]
 80a08ce:	f000 f88b 	bl	80a09e8 <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
 80a08d2:	21ff      	movs	r1, #255	; 0xff
 80a08d4:	6860      	ldr	r0, [r4, #4]
 80a08d6:	f000 f883 	bl	80a09e0 <_ZN14SdSpiAltDriver4sendEh>
 80a08da:	21ff      	movs	r1, #255	; 0xff
 80a08dc:	6860      	ldr	r0, [r4, #4]
 80a08de:	f000 f87f 	bl	80a09e0 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
 80a08e2:	6860      	ldr	r0, [r4, #4]
 80a08e4:	f000 f861 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 80a08e8:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 80a08ea:	f000 001f 	and.w	r0, r0, #31
 80a08ee:	2805      	cmp	r0, #5
 80a08f0:	d006      	beq.n	80a0900 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
 80a08f2:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 80a08f4:	4620      	mov	r0, r4
 80a08f6:	7023      	strb	r3, [r4, #0]
 80a08f8:	f7ff fe79 	bl	80a05ee <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a08fc:	2000      	movs	r0, #0
}
 80a08fe:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 80a0900:	2001      	movs	r0, #1
 80a0902:	e7fc      	b.n	80a08fe <_ZN9SdSpiCard9writeDataEhPKh+0x44>

080a0904 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a0904:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 80a0906:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a0908:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 80a090a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a090c:	bf18      	it	ne
 80a090e:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 80a0910:	460a      	mov	r2, r1
 80a0912:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a0914:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 80a0916:	f7ff fec3 	bl	80a06a0 <_ZN9SdSpiCard11cardCommandEhm>
 80a091a:	4606      	mov	r6, r0
 80a091c:	b130      	cbz	r0, 80a092c <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
 80a091e:	2332      	movs	r3, #50	; 0x32
 80a0920:	7023      	strb	r3, [r4, #0]
  spiStop();
 80a0922:	4620      	mov	r0, r4
 80a0924:	f7ff fe63 	bl	80a05ee <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a0928:	2500      	movs	r5, #0
 80a092a:	e01f      	b.n	80a096c <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
 80a092c:	462a      	mov	r2, r5
 80a092e:	21fe      	movs	r1, #254	; 0xfe
 80a0930:	4620      	mov	r0, r4
 80a0932:	f7ff ffc2 	bl	80a08ba <_ZN9SdSpiCard9writeDataEhPKh>
 80a0936:	2800      	cmp	r0, #0
 80a0938:	d0f3      	beq.n	80a0922 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a093a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80a093e:	4620      	mov	r0, r4
 80a0940:	f7ff fe99 	bl	80a0676 <_ZN9SdSpiCard11waitNotBusyEt>
 80a0944:	4605      	mov	r5, r0
 80a0946:	b908      	cbnz	r0, 80a094c <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
 80a0948:	235a      	movs	r3, #90	; 0x5a
 80a094a:	e7e9      	b.n	80a0920 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
 80a094c:	4632      	mov	r2, r6
 80a094e:	210d      	movs	r1, #13
 80a0950:	4620      	mov	r0, r4
 80a0952:	f7ff fea5 	bl	80a06a0 <_ZN9SdSpiCard11cardCommandEhm>
 80a0956:	b108      	cbz	r0, 80a095c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
 80a0958:	2329      	movs	r3, #41	; 0x29
 80a095a:	e7e1      	b.n	80a0920 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
 80a095c:	6860      	ldr	r0, [r4, #4]
 80a095e:	f000 f824 	bl	80a09aa <_ZN14SdSpiAltDriver7receiveEv>
 80a0962:	2800      	cmp	r0, #0
 80a0964:	d1f8      	bne.n	80a0958 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
 80a0966:	4620      	mov	r0, r4
 80a0968:	f7ff fe41 	bl	80a05ee <_ZN9SdSpiCard7spiStopEv>
}
 80a096c:	4628      	mov	r0, r5
 80a096e:	bd70      	pop	{r4, r5, r6, pc}

080a0970 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80a0970:	2201      	movs	r2, #1
 80a0972:	4b01      	ldr	r3, [pc, #4]	; (80a0978 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80a0974:	701a      	strb	r2, [r3, #0]
}
 80a0976:	4770      	bx	lr
 80a0978:	2000051c 	.word	0x2000051c

080a097c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 80a097c:	1d01      	adds	r1, r0, #4
 80a097e:	6800      	ldr	r0, [r0, #0]
 80a0980:	f000 bc62 	b.w	80a1248 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

080a0984 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 80a0984:	b510      	push	{r4, lr}
 80a0986:	4604      	mov	r4, r0
  m_csPin = csPin;
 80a0988:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 80a098a:	6800      	ldr	r0, [r0, #0]
 80a098c:	f000 fc34 	bl	80a11f8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 80a0990:	7d20      	ldrb	r0, [r4, #20]
 80a0992:	2101      	movs	r1, #1
 80a0994:	f000 ff90 	bl	80a18b8 <pinMode>
  digitalWrite(m_csPin, HIGH);
 80a0998:	7d20      	ldrb	r0, [r4, #20]
 80a099a:	2101      	movs	r1, #1
}
 80a099c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
 80a09a0:	f000 bf9b 	b.w	80a18da <digitalWrite>

080a09a4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 80a09a4:	6800      	ldr	r0, [r0, #0]
 80a09a6:	f000 bc35 	b.w	80a1214 <_ZN8SPIClass14endTransactionEv>

080a09aa <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 80a09aa:	21ff      	movs	r1, #255	; 0xff
 80a09ac:	6800      	ldr	r0, [r0, #0]
 80a09ae:	f000 bcb7 	b.w	80a1320 <_ZN8SPIClass8transferEh>
	...

080a09b4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 80a09b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a09b6:	460d      	mov	r5, r1
  SPI_DMA_TransferCompleted = false;
 80a09b8:	2100      	movs	r1, #0
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 80a09ba:	4613      	mov	r3, r2
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a09bc:	4a06      	ldr	r2, [pc, #24]	; (80a09d8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
  SPI_DMA_TransferCompleted = false;
 80a09be:	4c07      	ldr	r4, [pc, #28]	; (80a09dc <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a09c0:	9200      	str	r2, [sp, #0]
 80a09c2:	6800      	ldr	r0, [r0, #0]
 80a09c4:	462a      	mov	r2, r5
  SPI_DMA_TransferCompleted = false;
 80a09c6:	7021      	strb	r1, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a09c8:	f000 fcb0 	bl	80a132c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 80a09cc:	7823      	ldrb	r3, [r4, #0]
 80a09ce:	2b00      	cmp	r3, #0
 80a09d0:	d0fc      	beq.n	80a09cc <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 80a09d2:	2000      	movs	r0, #0
 80a09d4:	b003      	add	sp, #12
 80a09d6:	bd30      	pop	{r4, r5, pc}
 80a09d8:	080a0971 	.word	0x080a0971
 80a09dc:	2000051c 	.word	0x2000051c

080a09e0 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 80a09e0:	6800      	ldr	r0, [r0, #0]
 80a09e2:	f000 bc9d 	b.w	80a1320 <_ZN8SPIClass8transferEh>
	...

080a09e8 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 80a09e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a09ea:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 80a09ec:	2200      	movs	r2, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 80a09ee:	4d06      	ldr	r5, [pc, #24]	; (80a0a08 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
  SPI_DMA_TransferCompleted = false;
 80a09f0:	4c06      	ldr	r4, [pc, #24]	; (80a0a0c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 80a09f2:	9500      	str	r5, [sp, #0]
 80a09f4:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
 80a09f6:	7022      	strb	r2, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 80a09f8:	f000 fc98 	bl	80a132c <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 80a09fc:	7823      	ldrb	r3, [r4, #0]
 80a09fe:	2b00      	cmp	r3, #0
 80a0a00:	d0fc      	beq.n	80a09fc <_ZN14SdSpiAltDriver4sendEPKhj+0x14>
}
 80a0a02:	b003      	add	sp, #12
 80a0a04:	bd30      	pop	{r4, r5, pc}
 80a0a06:	bf00      	nop
 80a0a08:	080a0971 	.word	0x080a0971
 80a0a0c:	2000051c 	.word	0x2000051c

080a0a10 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <os_mutex_recursive_create+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601d0 	.word	0x080601d0

080a0a20 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <os_mutex_recursive_destroy+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601d0 	.word	0x080601d0

080a0a30 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <os_mutex_recursive_lock+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601d0 	.word	0x080601d0

080a0a40 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b02      	ldr	r3, [pc, #8]	; (80a0a4c <os_mutex_recursive_unlock+0xc>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0a48:	9301      	str	r3, [sp, #4]
 80a0a4a:	bd08      	pop	{r3, pc}
 80a0a4c:	080601d0 	.word	0x080601d0

080a0a50 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <HAL_RNG_GetRandomNumber+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	685b      	ldr	r3, [r3, #4]
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	0806019c 	.word	0x0806019c

080a0a60 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a0a60:	b508      	push	{r3, lr}
 80a0a62:	4b02      	ldr	r3, [pc, #8]	; (80a0a6c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0a64:	681b      	ldr	r3, [r3, #0]
 80a0a66:	691b      	ldr	r3, [r3, #16]
 80a0a68:	9301      	str	r3, [sp, #4]
 80a0a6a:	bd08      	pop	{r3, pc}
 80a0a6c:	0806019c 	.word	0x0806019c

080a0a70 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0a70:	b508      	push	{r3, lr}
 80a0a72:	4b02      	ldr	r3, [pc, #8]	; (80a0a7c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0a74:	681b      	ldr	r3, [r3, #0]
 80a0a76:	695b      	ldr	r3, [r3, #20]
 80a0a78:	9301      	str	r3, [sp, #4]
 80a0a7a:	bd08      	pop	{r3, pc}
 80a0a7c:	0806019c 	.word	0x0806019c

080a0a80 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0a80:	b508      	push	{r3, lr}
 80a0a82:	4b02      	ldr	r3, [pc, #8]	; (80a0a8c <HAL_Pin_Mode+0xc>)
 80a0a84:	681b      	ldr	r3, [r3, #0]
 80a0a86:	689b      	ldr	r3, [r3, #8]
 80a0a88:	9301      	str	r3, [sp, #4]
 80a0a8a:	bd08      	pop	{r3, pc}
 80a0a8c:	080601b0 	.word	0x080601b0

080a0a90 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0a90:	b508      	push	{r3, lr}
 80a0a92:	4b02      	ldr	r3, [pc, #8]	; (80a0a9c <HAL_Get_Pin_Mode+0xc>)
 80a0a94:	681b      	ldr	r3, [r3, #0]
 80a0a96:	68db      	ldr	r3, [r3, #12]
 80a0a98:	9301      	str	r3, [sp, #4]
 80a0a9a:	bd08      	pop	{r3, pc}
 80a0a9c:	080601b0 	.word	0x080601b0

080a0aa0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0aa0:	b508      	push	{r3, lr}
 80a0aa2:	4b02      	ldr	r3, [pc, #8]	; (80a0aac <HAL_GPIO_Write+0xc>)
 80a0aa4:	681b      	ldr	r3, [r3, #0]
 80a0aa6:	691b      	ldr	r3, [r3, #16]
 80a0aa8:	9301      	str	r3, [sp, #4]
 80a0aaa:	bd08      	pop	{r3, pc}
 80a0aac:	080601b0 	.word	0x080601b0

080a0ab0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0ab0:	b508      	push	{r3, lr}
 80a0ab2:	4b02      	ldr	r3, [pc, #8]	; (80a0abc <hal_i2c_write+0xc>)
 80a0ab4:	681b      	ldr	r3, [r3, #0]
 80a0ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0ab8:	9301      	str	r3, [sp, #4]
 80a0aba:	bd08      	pop	{r3, pc}
 80a0abc:	080601ac 	.word	0x080601ac

080a0ac0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0ac0:	b508      	push	{r3, lr}
 80a0ac2:	4b02      	ldr	r3, [pc, #8]	; (80a0acc <hal_i2c_available+0xc>)
 80a0ac4:	681b      	ldr	r3, [r3, #0]
 80a0ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0ac8:	9301      	str	r3, [sp, #4]
 80a0aca:	bd08      	pop	{r3, pc}
 80a0acc:	080601ac 	.word	0x080601ac

080a0ad0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0ad0:	b508      	push	{r3, lr}
 80a0ad2:	4b02      	ldr	r3, [pc, #8]	; (80a0adc <hal_i2c_read+0xc>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0ad8:	9301      	str	r3, [sp, #4]
 80a0ada:	bd08      	pop	{r3, pc}
 80a0adc:	080601ac 	.word	0x080601ac

080a0ae0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0ae0:	b508      	push	{r3, lr}
 80a0ae2:	4b02      	ldr	r3, [pc, #8]	; (80a0aec <hal_i2c_peek+0xc>)
 80a0ae4:	681b      	ldr	r3, [r3, #0]
 80a0ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0ae8:	9301      	str	r3, [sp, #4]
 80a0aea:	bd08      	pop	{r3, pc}
 80a0aec:	080601ac 	.word	0x080601ac

080a0af0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0af0:	b508      	push	{r3, lr}
 80a0af2:	4b02      	ldr	r3, [pc, #8]	; (80a0afc <hal_i2c_flush+0xc>)
 80a0af4:	681b      	ldr	r3, [r3, #0]
 80a0af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0af8:	9301      	str	r3, [sp, #4]
 80a0afa:	bd08      	pop	{r3, pc}
 80a0afc:	080601ac 	.word	0x080601ac

080a0b00 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0b00:	b508      	push	{r3, lr}
 80a0b02:	4b02      	ldr	r3, [pc, #8]	; (80a0b0c <hal_i2c_is_enabled+0xc>)
 80a0b04:	681b      	ldr	r3, [r3, #0]
 80a0b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0b08:	9301      	str	r3, [sp, #4]
 80a0b0a:	bd08      	pop	{r3, pc}
 80a0b0c:	080601ac 	.word	0x080601ac

080a0b10 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0b10:	b508      	push	{r3, lr}
 80a0b12:	4b03      	ldr	r3, [pc, #12]	; (80a0b20 <hal_i2c_init+0x10>)
 80a0b14:	681b      	ldr	r3, [r3, #0]
 80a0b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0b1a:	9301      	str	r3, [sp, #4]
 80a0b1c:	bd08      	pop	{r3, pc}
 80a0b1e:	0000      	.short	0x0000
 80a0b20:	080601ac 	.word	0x080601ac

080a0b24 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a0b24:	b508      	push	{r3, lr}
 80a0b26:	4b02      	ldr	r3, [pc, #8]	; (80a0b30 <hal_spi_begin+0xc>)
 80a0b28:	681b      	ldr	r3, [r3, #0]
 80a0b2a:	681b      	ldr	r3, [r3, #0]
 80a0b2c:	9301      	str	r3, [sp, #4]
 80a0b2e:	bd08      	pop	{r3, pc}
 80a0b30:	080601b4 	.word	0x080601b4

080a0b34 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a0b34:	b508      	push	{r3, lr}
 80a0b36:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <hal_spi_transfer+0xc>)
 80a0b38:	681b      	ldr	r3, [r3, #0]
 80a0b3a:	695b      	ldr	r3, [r3, #20]
 80a0b3c:	9301      	str	r3, [sp, #4]
 80a0b3e:	bd08      	pop	{r3, pc}
 80a0b40:	080601b4 	.word	0x080601b4

080a0b44 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0b44:	b508      	push	{r3, lr}
 80a0b46:	4b02      	ldr	r3, [pc, #8]	; (80a0b50 <hal_spi_init+0xc>)
 80a0b48:	681b      	ldr	r3, [r3, #0]
 80a0b4a:	69db      	ldr	r3, [r3, #28]
 80a0b4c:	9301      	str	r3, [sp, #4]
 80a0b4e:	bd08      	pop	{r3, pc}
 80a0b50:	080601b4 	.word	0x080601b4

080a0b54 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b02      	ldr	r3, [pc, #8]	; (80a0b60 <hal_spi_is_enabled+0xc>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	6a1b      	ldr	r3, [r3, #32]
 80a0b5c:	9301      	str	r3, [sp, #4]
 80a0b5e:	bd08      	pop	{r3, pc}
 80a0b60:	080601b4 	.word	0x080601b4

080a0b64 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a0b64:	b508      	push	{r3, lr}
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <hal_spi_info+0xc>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0b6c:	9301      	str	r3, [sp, #4]
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	080601b4 	.word	0x080601b4

080a0b74 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 80a0b74:	b508      	push	{r3, lr}
 80a0b76:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <hal_spi_transfer_dma+0xc>)
 80a0b78:	681b      	ldr	r3, [r3, #0]
 80a0b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0b7c:	9301      	str	r3, [sp, #4]
 80a0b7e:	bd08      	pop	{r3, pc}
 80a0b80:	080601b4 	.word	0x080601b4

080a0b84 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <hal_spi_transfer_dma_status+0xc>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	bd08      	pop	{r3, pc}
 80a0b90:	080601b4 	.word	0x080601b4

080a0b94 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a0b94:	b508      	push	{r3, lr}
 80a0b96:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <hal_spi_set_settings+0xc>)
 80a0b98:	681b      	ldr	r3, [r3, #0]
 80a0b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0b9c:	9301      	str	r3, [sp, #4]
 80a0b9e:	bd08      	pop	{r3, pc}
 80a0ba0:	080601b4 	.word	0x080601b4

080a0ba4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0ba4:	b508      	push	{r3, lr}
 80a0ba6:	4b02      	ldr	r3, [pc, #8]	; (80a0bb0 <hal_usart_init+0xc>)
 80a0ba8:	681b      	ldr	r3, [r3, #0]
 80a0baa:	699b      	ldr	r3, [r3, #24]
 80a0bac:	9301      	str	r3, [sp, #4]
 80a0bae:	bd08      	pop	{r3, pc}
 80a0bb0:	080601c4 	.word	0x080601c4

080a0bb4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0bb4:	b508      	push	{r3, lr}
 80a0bb6:	4b02      	ldr	r3, [pc, #8]	; (80a0bc0 <hal_usart_write+0xc>)
 80a0bb8:	681b      	ldr	r3, [r3, #0]
 80a0bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0bbc:	9301      	str	r3, [sp, #4]
 80a0bbe:	bd08      	pop	{r3, pc}
 80a0bc0:	080601c4 	.word	0x080601c4

080a0bc4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0bc4:	b508      	push	{r3, lr}
 80a0bc6:	4b02      	ldr	r3, [pc, #8]	; (80a0bd0 <hal_usart_available+0xc>)
 80a0bc8:	681b      	ldr	r3, [r3, #0]
 80a0bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0bcc:	9301      	str	r3, [sp, #4]
 80a0bce:	bd08      	pop	{r3, pc}
 80a0bd0:	080601c4 	.word	0x080601c4

080a0bd4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0bd4:	b508      	push	{r3, lr}
 80a0bd6:	4b02      	ldr	r3, [pc, #8]	; (80a0be0 <hal_usart_read+0xc>)
 80a0bd8:	681b      	ldr	r3, [r3, #0]
 80a0bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0bdc:	9301      	str	r3, [sp, #4]
 80a0bde:	bd08      	pop	{r3, pc}
 80a0be0:	080601c4 	.word	0x080601c4

080a0be4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0be4:	b508      	push	{r3, lr}
 80a0be6:	4b02      	ldr	r3, [pc, #8]	; (80a0bf0 <hal_usart_peek+0xc>)
 80a0be8:	681b      	ldr	r3, [r3, #0]
 80a0bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bec:	9301      	str	r3, [sp, #4]
 80a0bee:	bd08      	pop	{r3, pc}
 80a0bf0:	080601c4 	.word	0x080601c4

080a0bf4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0bf4:	b508      	push	{r3, lr}
 80a0bf6:	4b02      	ldr	r3, [pc, #8]	; (80a0c00 <hal_usart_flush+0xc>)
 80a0bf8:	681b      	ldr	r3, [r3, #0]
 80a0bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0bfc:	9301      	str	r3, [sp, #4]
 80a0bfe:	bd08      	pop	{r3, pc}
 80a0c00:	080601c4 	.word	0x080601c4

080a0c04 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0c04:	b508      	push	{r3, lr}
 80a0c06:	4b02      	ldr	r3, [pc, #8]	; (80a0c10 <hal_usart_is_enabled+0xc>)
 80a0c08:	681b      	ldr	r3, [r3, #0]
 80a0c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0c0c:	9301      	str	r3, [sp, #4]
 80a0c0e:	bd08      	pop	{r3, pc}
 80a0c10:	080601c4 	.word	0x080601c4

080a0c14 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0c14:	b508      	push	{r3, lr}
 80a0c16:	4b02      	ldr	r3, [pc, #8]	; (80a0c20 <hal_usart_available_data_for_write+0xc>)
 80a0c18:	681b      	ldr	r3, [r3, #0]
 80a0c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0c1c:	9301      	str	r3, [sp, #4]
 80a0c1e:	bd08      	pop	{r3, pc}
 80a0c20:	080601c4 	.word	0x080601c4

080a0c24 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0c24:	b508      	push	{r3, lr}
 80a0c26:	4b02      	ldr	r3, [pc, #8]	; (80a0c30 <HAL_USB_USART_Init+0xc>)
 80a0c28:	681b      	ldr	r3, [r3, #0]
 80a0c2a:	681b      	ldr	r3, [r3, #0]
 80a0c2c:	9301      	str	r3, [sp, #4]
 80a0c2e:	bd08      	pop	{r3, pc}
 80a0c30:	080601d8 	.word	0x080601d8

080a0c34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0c34:	b508      	push	{r3, lr}
 80a0c36:	4b02      	ldr	r3, [pc, #8]	; (80a0c40 <HAL_USB_USART_Available_Data+0xc>)
 80a0c38:	681b      	ldr	r3, [r3, #0]
 80a0c3a:	691b      	ldr	r3, [r3, #16]
 80a0c3c:	9301      	str	r3, [sp, #4]
 80a0c3e:	bd08      	pop	{r3, pc}
 80a0c40:	080601d8 	.word	0x080601d8

080a0c44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0c44:	b508      	push	{r3, lr}
 80a0c46:	4b02      	ldr	r3, [pc, #8]	; (80a0c50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0c48:	681b      	ldr	r3, [r3, #0]
 80a0c4a:	695b      	ldr	r3, [r3, #20]
 80a0c4c:	9301      	str	r3, [sp, #4]
 80a0c4e:	bd08      	pop	{r3, pc}
 80a0c50:	080601d8 	.word	0x080601d8

080a0c54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0c54:	b508      	push	{r3, lr}
 80a0c56:	4b02      	ldr	r3, [pc, #8]	; (80a0c60 <HAL_USB_USART_Receive_Data+0xc>)
 80a0c58:	681b      	ldr	r3, [r3, #0]
 80a0c5a:	699b      	ldr	r3, [r3, #24]
 80a0c5c:	9301      	str	r3, [sp, #4]
 80a0c5e:	bd08      	pop	{r3, pc}
 80a0c60:	080601d8 	.word	0x080601d8

080a0c64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0c64:	b508      	push	{r3, lr}
 80a0c66:	4b02      	ldr	r3, [pc, #8]	; (80a0c70 <HAL_USB_USART_Send_Data+0xc>)
 80a0c68:	681b      	ldr	r3, [r3, #0]
 80a0c6a:	69db      	ldr	r3, [r3, #28]
 80a0c6c:	9301      	str	r3, [sp, #4]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	080601d8 	.word	0x080601d8

080a0c74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0c74:	b508      	push	{r3, lr}
 80a0c76:	4b02      	ldr	r3, [pc, #8]	; (80a0c80 <HAL_USB_USART_Flush_Data+0xc>)
 80a0c78:	681b      	ldr	r3, [r3, #0]
 80a0c7a:	6a1b      	ldr	r3, [r3, #32]
 80a0c7c:	9301      	str	r3, [sp, #4]
 80a0c7e:	bd08      	pop	{r3, pc}
 80a0c80:	080601d8 	.word	0x080601d8

080a0c84 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0c84:	b508      	push	{r3, lr}
 80a0c86:	4b02      	ldr	r3, [pc, #8]	; (80a0c90 <inet_gethostbyname+0xc>)
 80a0c88:	681b      	ldr	r3, [r3, #0]
 80a0c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0c8c:	9301      	str	r3, [sp, #4]
 80a0c8e:	bd08      	pop	{r3, pc}
 80a0c90:	080601c0 	.word	0x080601c0

080a0c94 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a0c94:	b508      	push	{r3, lr}
 80a0c96:	4b02      	ldr	r3, [pc, #8]	; (80a0ca0 <LED_SetSignalingColor+0xc>)
 80a0c98:	681b      	ldr	r3, [r3, #0]
 80a0c9a:	685b      	ldr	r3, [r3, #4]
 80a0c9c:	9301      	str	r3, [sp, #4]
 80a0c9e:	bd08      	pop	{r3, pc}
 80a0ca0:	080201a8 	.word	0x080201a8

080a0ca4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a0ca4:	b508      	push	{r3, lr}
 80a0ca6:	4b02      	ldr	r3, [pc, #8]	; (80a0cb0 <LED_Signaling_Start+0xc>)
 80a0ca8:	681b      	ldr	r3, [r3, #0]
 80a0caa:	689b      	ldr	r3, [r3, #8]
 80a0cac:	9301      	str	r3, [sp, #4]
 80a0cae:	bd08      	pop	{r3, pc}
 80a0cb0:	080201a8 	.word	0x080201a8

080a0cb4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a0cb4:	b508      	push	{r3, lr}
 80a0cb6:	4b02      	ldr	r3, [pc, #8]	; (80a0cc0 <LED_Signaling_Stop+0xc>)
 80a0cb8:	681b      	ldr	r3, [r3, #0]
 80a0cba:	68db      	ldr	r3, [r3, #12]
 80a0cbc:	9301      	str	r3, [sp, #4]
 80a0cbe:	bd08      	pop	{r3, pc}
 80a0cc0:	080201a8 	.word	0x080201a8

080a0cc4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a0cc4:	b508      	push	{r3, lr}
 80a0cc6:	4b02      	ldr	r3, [pc, #8]	; (80a0cd0 <LED_RGB_IsOverRidden+0xc>)
 80a0cc8:	681b      	ldr	r3, [r3, #0]
 80a0cca:	699b      	ldr	r3, [r3, #24]
 80a0ccc:	9301      	str	r3, [sp, #4]
 80a0cce:	bd08      	pop	{r3, pc}
 80a0cd0:	080201a8 	.word	0x080201a8

080a0cd4 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a0cd4:	b508      	push	{r3, lr}
 80a0cd6:	4b02      	ldr	r3, [pc, #8]	; (80a0ce0 <LED_On+0xc>)
 80a0cd8:	681b      	ldr	r3, [r3, #0]
 80a0cda:	69db      	ldr	r3, [r3, #28]
 80a0cdc:	9301      	str	r3, [sp, #4]
 80a0cde:	bd08      	pop	{r3, pc}
 80a0ce0:	080201a8 	.word	0x080201a8

080a0ce4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0ce4:	b508      	push	{r3, lr}
 80a0ce6:	4b02      	ldr	r3, [pc, #8]	; (80a0cf0 <set_system_mode+0xc>)
 80a0ce8:	681b      	ldr	r3, [r3, #0]
 80a0cea:	685b      	ldr	r3, [r3, #4]
 80a0cec:	9301      	str	r3, [sp, #4]
 80a0cee:	bd08      	pop	{r3, pc}
 80a0cf0:	080601a4 	.word	0x080601a4

080a0cf4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0cf4:	b508      	push	{r3, lr}
 80a0cf6:	4b02      	ldr	r3, [pc, #8]	; (80a0d00 <system_delay_ms+0xc>)
 80a0cf8:	681b      	ldr	r3, [r3, #0]
 80a0cfa:	695b      	ldr	r3, [r3, #20]
 80a0cfc:	9301      	str	r3, [sp, #4]
 80a0cfe:	bd08      	pop	{r3, pc}
 80a0d00:	080601a4 	.word	0x080601a4

080a0d04 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0d04:	b508      	push	{r3, lr}
 80a0d06:	4b02      	ldr	r3, [pc, #8]	; (80a0d10 <system_thread_set_state+0xc>)
 80a0d08:	681b      	ldr	r3, [r3, #0]
 80a0d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0d0c:	9301      	str	r3, [sp, #4]
 80a0d0e:	bd08      	pop	{r3, pc}
 80a0d10:	080601a4 	.word	0x080601a4

080a0d14 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0d14:	b508      	push	{r3, lr}
 80a0d16:	4b03      	ldr	r3, [pc, #12]	; (80a0d24 <system_ctrl_set_app_request_handler+0x10>)
 80a0d18:	681b      	ldr	r3, [r3, #0]
 80a0d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0d1e:	9301      	str	r3, [sp, #4]
 80a0d20:	bd08      	pop	{r3, pc}
 80a0d22:	0000      	.short	0x0000
 80a0d24:	080601a4 	.word	0x080601a4

080a0d28 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0d28:	b508      	push	{r3, lr}
 80a0d2a:	4b03      	ldr	r3, [pc, #12]	; (80a0d38 <system_ctrl_set_result+0x10>)
 80a0d2c:	681b      	ldr	r3, [r3, #0]
 80a0d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0d32:	9301      	str	r3, [sp, #4]
 80a0d34:	bd08      	pop	{r3, pc}
 80a0d36:	0000      	.short	0x0000
 80a0d38:	080601a4 	.word	0x080601a4

080a0d3c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0d3c:	b508      	push	{r3, lr}
 80a0d3e:	4b02      	ldr	r3, [pc, #8]	; (80a0d48 <spark_process+0xc>)
 80a0d40:	681b      	ldr	r3, [r3, #0]
 80a0d42:	689b      	ldr	r3, [r3, #8]
 80a0d44:	9301      	str	r3, [sp, #4]
 80a0d46:	bd08      	pop	{r3, pc}
 80a0d48:	080601cc 	.word	0x080601cc

080a0d4c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0d4c:	b508      	push	{r3, lr}
 80a0d4e:	4b02      	ldr	r3, [pc, #8]	; (80a0d58 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0d50:	681b      	ldr	r3, [r3, #0]
 80a0d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0d54:	9301      	str	r3, [sp, #4]
 80a0d56:	bd08      	pop	{r3, pc}
 80a0d58:	080601cc 	.word	0x080601cc

080a0d5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d5c:	b508      	push	{r3, lr}
 80a0d5e:	4b02      	ldr	r3, [pc, #8]	; (80a0d68 <network_connect+0xc>)
 80a0d60:	681b      	ldr	r3, [r3, #0]
 80a0d62:	685b      	ldr	r3, [r3, #4]
 80a0d64:	9301      	str	r3, [sp, #4]
 80a0d66:	bd08      	pop	{r3, pc}
 80a0d68:	080601c8 	.word	0x080601c8

080a0d6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0d6c:	b508      	push	{r3, lr}
 80a0d6e:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <network_connecting+0xc>)
 80a0d70:	681b      	ldr	r3, [r3, #0]
 80a0d72:	689b      	ldr	r3, [r3, #8]
 80a0d74:	9301      	str	r3, [sp, #4]
 80a0d76:	bd08      	pop	{r3, pc}
 80a0d78:	080601c8 	.word	0x080601c8

080a0d7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0d7c:	b508      	push	{r3, lr}
 80a0d7e:	4b02      	ldr	r3, [pc, #8]	; (80a0d88 <network_disconnect+0xc>)
 80a0d80:	681b      	ldr	r3, [r3, #0]
 80a0d82:	68db      	ldr	r3, [r3, #12]
 80a0d84:	9301      	str	r3, [sp, #4]
 80a0d86:	bd08      	pop	{r3, pc}
 80a0d88:	080601c8 	.word	0x080601c8

080a0d8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0d8c:	b508      	push	{r3, lr}
 80a0d8e:	4b02      	ldr	r3, [pc, #8]	; (80a0d98 <network_ready+0xc>)
 80a0d90:	681b      	ldr	r3, [r3, #0]
 80a0d92:	691b      	ldr	r3, [r3, #16]
 80a0d94:	9301      	str	r3, [sp, #4]
 80a0d96:	bd08      	pop	{r3, pc}
 80a0d98:	080601c8 	.word	0x080601c8

080a0d9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d9c:	b508      	push	{r3, lr}
 80a0d9e:	4b02      	ldr	r3, [pc, #8]	; (80a0da8 <network_on+0xc>)
 80a0da0:	681b      	ldr	r3, [r3, #0]
 80a0da2:	695b      	ldr	r3, [r3, #20]
 80a0da4:	9301      	str	r3, [sp, #4]
 80a0da6:	bd08      	pop	{r3, pc}
 80a0da8:	080601c8 	.word	0x080601c8

080a0dac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0dac:	b508      	push	{r3, lr}
 80a0dae:	4b02      	ldr	r3, [pc, #8]	; (80a0db8 <network_off+0xc>)
 80a0db0:	681b      	ldr	r3, [r3, #0]
 80a0db2:	699b      	ldr	r3, [r3, #24]
 80a0db4:	9301      	str	r3, [sp, #4]
 80a0db6:	bd08      	pop	{r3, pc}
 80a0db8:	080601c8 	.word	0x080601c8

080a0dbc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0dbc:	b508      	push	{r3, lr}
 80a0dbe:	4b02      	ldr	r3, [pc, #8]	; (80a0dc8 <network_listen+0xc>)
 80a0dc0:	681b      	ldr	r3, [r3, #0]
 80a0dc2:	69db      	ldr	r3, [r3, #28]
 80a0dc4:	9301      	str	r3, [sp, #4]
 80a0dc6:	bd08      	pop	{r3, pc}
 80a0dc8:	080601c8 	.word	0x080601c8

080a0dcc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0dcc:	b508      	push	{r3, lr}
 80a0dce:	4b02      	ldr	r3, [pc, #8]	; (80a0dd8 <network_listening+0xc>)
 80a0dd0:	681b      	ldr	r3, [r3, #0]
 80a0dd2:	6a1b      	ldr	r3, [r3, #32]
 80a0dd4:	9301      	str	r3, [sp, #4]
 80a0dd6:	bd08      	pop	{r3, pc}
 80a0dd8:	080601c8 	.word	0x080601c8

080a0ddc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0ddc:	b508      	push	{r3, lr}
 80a0dde:	4b02      	ldr	r3, [pc, #8]	; (80a0de8 <network_set_listen_timeout+0xc>)
 80a0de0:	681b      	ldr	r3, [r3, #0]
 80a0de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0de4:	9301      	str	r3, [sp, #4]
 80a0de6:	bd08      	pop	{r3, pc}
 80a0de8:	080601c8 	.word	0x080601c8

080a0dec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0dec:	b508      	push	{r3, lr}
 80a0dee:	4b02      	ldr	r3, [pc, #8]	; (80a0df8 <network_get_listen_timeout+0xc>)
 80a0df0:	681b      	ldr	r3, [r3, #0]
 80a0df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0df4:	9301      	str	r3, [sp, #4]
 80a0df6:	bd08      	pop	{r3, pc}
 80a0df8:	080601c8 	.word	0x080601c8

080a0dfc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0dfc:	b508      	push	{r3, lr}
 80a0dfe:	4b02      	ldr	r3, [pc, #8]	; (80a0e08 <network_is_on+0xc>)
 80a0e00:	681b      	ldr	r3, [r3, #0]
 80a0e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0e04:	9301      	str	r3, [sp, #4]
 80a0e06:	bd08      	pop	{r3, pc}
 80a0e08:	080601c8 	.word	0x080601c8

080a0e0c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0e0c:	b508      	push	{r3, lr}
 80a0e0e:	4b02      	ldr	r3, [pc, #8]	; (80a0e18 <network_is_off+0xc>)
 80a0e10:	681b      	ldr	r3, [r3, #0]
 80a0e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e14:	9301      	str	r3, [sp, #4]
 80a0e16:	bd08      	pop	{r3, pc}
 80a0e18:	080601c8 	.word	0x080601c8

080a0e1c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0e1c:	b508      	push	{r3, lr}
 80a0e1e:	4b02      	ldr	r3, [pc, #8]	; (80a0e28 <malloc+0xc>)
 80a0e20:	681b      	ldr	r3, [r3, #0]
 80a0e22:	681b      	ldr	r3, [r3, #0]
 80a0e24:	9301      	str	r3, [sp, #4]
 80a0e26:	bd08      	pop	{r3, pc}
 80a0e28:	080601a0 	.word	0x080601a0

080a0e2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0e2c:	b508      	push	{r3, lr}
 80a0e2e:	4b02      	ldr	r3, [pc, #8]	; (80a0e38 <free+0xc>)
 80a0e30:	681b      	ldr	r3, [r3, #0]
 80a0e32:	685b      	ldr	r3, [r3, #4]
 80a0e34:	9301      	str	r3, [sp, #4]
 80a0e36:	bd08      	pop	{r3, pc}
 80a0e38:	080601a0 	.word	0x080601a0

080a0e3c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0e3c:	b508      	push	{r3, lr}
 80a0e3e:	4b02      	ldr	r3, [pc, #8]	; (80a0e48 <vsnprintf+0xc>)
 80a0e40:	681b      	ldr	r3, [r3, #0]
 80a0e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0e44:	9301      	str	r3, [sp, #4]
 80a0e46:	bd08      	pop	{r3, pc}
 80a0e48:	080601a0 	.word	0x080601a0

080a0e4c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0e4c:	b508      	push	{r3, lr}
 80a0e4e:	4b02      	ldr	r3, [pc, #8]	; (80a0e58 <newlib_impure_ptr_callback+0xc>)
 80a0e50:	681b      	ldr	r3, [r3, #0]
 80a0e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e54:	9301      	str	r3, [sp, #4]
 80a0e56:	bd08      	pop	{r3, pc}
 80a0e58:	080601a0 	.word	0x080601a0

080a0e5c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0e5c:	2100      	movs	r1, #0
 80a0e5e:	f7ff bf49 	b.w	80a0cf4 <system_delay_ms>

080a0e62 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0e62:	4770      	bx	lr

080a0e64 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e66:	4606      	mov	r6, r0
 80a0e68:	4615      	mov	r5, r2
 80a0e6a:	460c      	mov	r4, r1
 80a0e6c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0e6e:	42bc      	cmp	r4, r7
 80a0e70:	d006      	beq.n	80a0e80 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0e72:	6833      	ldr	r3, [r6, #0]
 80a0e74:	4630      	mov	r0, r6
 80a0e76:	689b      	ldr	r3, [r3, #8]
 80a0e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0e7c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0e7e:	e7f6      	b.n	80a0e6e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0e80:	4628      	mov	r0, r5
 80a0e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e84 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0e84:	2200      	movs	r2, #0
 80a0e86:	7c00      	ldrb	r0, [r0, #16]
 80a0e88:	f7ff be12 	b.w	80a0ab0 <hal_i2c_write>

080a0e8c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0e8c:	2100      	movs	r1, #0
 80a0e8e:	7c00      	ldrb	r0, [r0, #16]
 80a0e90:	f7ff be16 	b.w	80a0ac0 <hal_i2c_available>

080a0e94 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0e94:	2100      	movs	r1, #0
 80a0e96:	7c00      	ldrb	r0, [r0, #16]
 80a0e98:	f7ff be1a 	b.w	80a0ad0 <hal_i2c_read>

080a0e9c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0e9c:	2100      	movs	r1, #0
 80a0e9e:	7c00      	ldrb	r0, [r0, #16]
 80a0ea0:	f7ff be1e 	b.w	80a0ae0 <hal_i2c_peek>

080a0ea4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0ea4:	2100      	movs	r1, #0
 80a0ea6:	7c00      	ldrb	r0, [r0, #16]
 80a0ea8:	f7ff be22 	b.w	80a0af0 <hal_i2c_flush>

080a0eac <_ZN7TwoWireD0Ev>:
 80a0eac:	b510      	push	{r4, lr}
 80a0eae:	4604      	mov	r4, r0
 80a0eb0:	2114      	movs	r1, #20
 80a0eb2:	f000 fd77 	bl	80a19a4 <_ZdlPvj>
 80a0eb6:	4620      	mov	r0, r4
 80a0eb8:	bd10      	pop	{r4, pc}
	...

080a0ebc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0ebc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ec2:	4604      	mov	r4, r0
 80a0ec4:	4608      	mov	r0, r1
 80a0ec6:	2100      	movs	r1, #0
 80a0ec8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0ecc:	4b03      	ldr	r3, [pc, #12]	; (80a0edc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0ece:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0ed0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0ed2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0ed4:	f7ff fe1c 	bl	80a0b10 <hal_i2c_init>
}
 80a0ed8:	4620      	mov	r0, r4
 80a0eda:	bd10      	pop	{r4, pc}
 80a0edc:	080a1ba0 	.word	0x080a1ba0

080a0ee0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0ee0:	4770      	bx	lr

080a0ee2 <_ZN9IPAddressD0Ev>:
 80a0ee2:	b510      	push	{r4, lr}
 80a0ee4:	4604      	mov	r4, r0
 80a0ee6:	2118      	movs	r1, #24
 80a0ee8:	f000 fd5c 	bl	80a19a4 <_ZdlPvj>
 80a0eec:	4620      	mov	r0, r4
 80a0eee:	bd10      	pop	{r4, pc}

080a0ef0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ef2:	460e      	mov	r6, r1
 80a0ef4:	2400      	movs	r4, #0
 80a0ef6:	f100 0708 	add.w	r7, r0, #8
 80a0efa:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0efc:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0f00:	220a      	movs	r2, #10
 80a0f02:	4630      	mov	r0, r6
 80a0f04:	f000 f8ef 	bl	80a10e6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0f08:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0f0a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0f0c:	d101      	bne.n	80a0f12 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0f0e:	4620      	mov	r0, r4
 80a0f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0f12:	2c00      	cmp	r4, #0
 80a0f14:	d0f2      	beq.n	80a0efc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0f16:	212e      	movs	r1, #46	; 0x2e
 80a0f18:	4630      	mov	r0, r6
 80a0f1a:	f000 f8d5 	bl	80a10c8 <_ZN5Print5printEc>
 80a0f1e:	4404      	add	r4, r0
 80a0f20:	e7ec      	b.n	80a0efc <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0f24 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0f24:	b510      	push	{r4, lr}
 80a0f26:	4604      	mov	r4, r0
 80a0f28:	4b04      	ldr	r3, [pc, #16]	; (80a0f3c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0f2a:	2211      	movs	r2, #17
 80a0f2c:	2100      	movs	r1, #0
 80a0f2e:	f840 3b04 	str.w	r3, [r0], #4
 80a0f32:	f000 fd4f 	bl	80a19d4 <memset>
}
 80a0f36:	4620      	mov	r0, r4
 80a0f38:	bd10      	pop	{r4, pc}
 80a0f3a:	bf00      	nop
 80a0f3c:	080a1bc8 	.word	0x080a1bc8

080a0f40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0f40:	4603      	mov	r3, r0
 80a0f42:	4a07      	ldr	r2, [pc, #28]	; (80a0f60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0f44:	b510      	push	{r4, lr}
 80a0f46:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0f4a:	f101 0210 	add.w	r2, r1, #16
 80a0f4e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0f52:	4291      	cmp	r1, r2
 80a0f54:	f843 4b04 	str.w	r4, [r3], #4
 80a0f58:	d1f9      	bne.n	80a0f4e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0f5a:	780a      	ldrb	r2, [r1, #0]
 80a0f5c:	701a      	strb	r2, [r3, #0]
}
 80a0f5e:	bd10      	pop	{r4, pc}
 80a0f60:	080a1bc8 	.word	0x080a1bc8

080a0f64 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0f64:	4a02      	ldr	r2, [pc, #8]	; (80a0f70 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0f66:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0f6a:	2204      	movs	r2, #4
 80a0f6c:	7502      	strb	r2, [r0, #20]
}
 80a0f6e:	4770      	bx	lr
 80a0f70:	080a1bc8 	.word	0x080a1bc8

080a0f74 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0f74:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0f76:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0f7a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0f7e:	2304      	movs	r3, #4
 80a0f80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0f84:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0f88:	6044      	str	r4, [r0, #4]
 80a0f8a:	7503      	strb	r3, [r0, #20]
}
 80a0f8c:	bd10      	pop	{r4, pc}
	...

080a0f90 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0f92:	4d04      	ldr	r5, [pc, #16]	; (80a0fa4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0f94:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0f96:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0f9a:	9500      	str	r5, [sp, #0]
 80a0f9c:	f7ff ffea 	bl	80a0f74 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0fa0:	b003      	add	sp, #12
 80a0fa2:	bd30      	pop	{r4, r5, pc}
 80a0fa4:	080a1bc8 	.word	0x080a1bc8

080a0fa8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0fa8:	4b01      	ldr	r3, [pc, #4]	; (80a0fb0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0faa:	4a02      	ldr	r2, [pc, #8]	; (80a0fb4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0fac:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0fae:	4770      	bx	lr
 80a0fb0:	20000520 	.word	0x20000520
 80a0fb4:	080a1bd4 	.word	0x080a1bd4

080a0fb8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0fb8:	2300      	movs	r3, #0
 80a0fba:	6840      	ldr	r0, [r0, #4]
 80a0fbc:	461a      	mov	r2, r3
 80a0fbe:	f7ff becd 	b.w	80a0d5c <network_connect>

080a0fc2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0fc2:	2200      	movs	r2, #0
 80a0fc4:	2102      	movs	r1, #2
 80a0fc6:	6840      	ldr	r0, [r0, #4]
 80a0fc8:	f7ff bed8 	b.w	80a0d7c <network_disconnect>

080a0fcc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0fcc:	2200      	movs	r2, #0
 80a0fce:	6840      	ldr	r0, [r0, #4]
 80a0fd0:	4611      	mov	r1, r2
 80a0fd2:	f7ff becb 	b.w	80a0d6c <network_connecting>

080a0fd6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0fd6:	2200      	movs	r2, #0
 80a0fd8:	6840      	ldr	r0, [r0, #4]
 80a0fda:	4611      	mov	r1, r2
 80a0fdc:	f7ff bed6 	b.w	80a0d8c <network_ready>

080a0fe0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0fe0:	2300      	movs	r3, #0
 80a0fe2:	6840      	ldr	r0, [r0, #4]
 80a0fe4:	461a      	mov	r2, r3
 80a0fe6:	4619      	mov	r1, r3
 80a0fe8:	f7ff bed8 	b.w	80a0d9c <network_on>

080a0fec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0fec:	2300      	movs	r3, #0
 80a0fee:	6840      	ldr	r0, [r0, #4]
 80a0ff0:	461a      	mov	r2, r3
 80a0ff2:	4619      	mov	r1, r3
 80a0ff4:	f7ff beda 	b.w	80a0dac <network_off>

080a0ff8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0ff8:	2100      	movs	r1, #0
 80a0ffa:	6840      	ldr	r0, [r0, #4]
 80a0ffc:	f7ff befe 	b.w	80a0dfc <network_is_on>

080a1000 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1000:	2100      	movs	r1, #0
 80a1002:	6840      	ldr	r0, [r0, #4]
 80a1004:	f7ff bf02 	b.w	80a0e0c <network_is_off>

080a1008 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1008:	2200      	movs	r2, #0
 80a100a:	6840      	ldr	r0, [r0, #4]
 80a100c:	f081 0101 	eor.w	r1, r1, #1
 80a1010:	f7ff bed4 	b.w	80a0dbc <network_listen>

080a1014 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1014:	2200      	movs	r2, #0
 80a1016:	6840      	ldr	r0, [r0, #4]
 80a1018:	f7ff bee0 	b.w	80a0ddc <network_set_listen_timeout>

080a101c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a101c:	2200      	movs	r2, #0
 80a101e:	6840      	ldr	r0, [r0, #4]
 80a1020:	4611      	mov	r1, r2
 80a1022:	f7ff bee3 	b.w	80a0dec <network_get_listen_timeout>

080a1026 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1026:	2200      	movs	r2, #0
 80a1028:	6840      	ldr	r0, [r0, #4]
 80a102a:	4611      	mov	r1, r2
 80a102c:	f7ff bece 	b.w	80a0dcc <network_listening>

080a1030 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1030:	b570      	push	{r4, r5, r6, lr}
 80a1032:	4615      	mov	r5, r2
 80a1034:	b08e      	sub	sp, #56	; 0x38
 80a1036:	4604      	mov	r4, r0
    IPAddress addr;
 80a1038:	a808      	add	r0, sp, #32
 80a103a:	f7ff ff73 	bl	80a0f24 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a103e:	2211      	movs	r2, #17
 80a1040:	2100      	movs	r1, #0
 80a1042:	a803      	add	r0, sp, #12
 80a1044:	f000 fcc6 	bl	80a19d4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1048:	2600      	movs	r6, #0
 80a104a:	4628      	mov	r0, r5
 80a104c:	f000 fcee 	bl	80a1a2c <strlen>
 80a1050:	4b0a      	ldr	r3, [pc, #40]	; (80a107c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1052:	9600      	str	r6, [sp, #0]
 80a1054:	b281      	uxth	r1, r0
 80a1056:	685b      	ldr	r3, [r3, #4]
 80a1058:	4628      	mov	r0, r5
 80a105a:	aa03      	add	r2, sp, #12
 80a105c:	f7ff fe12 	bl	80a0c84 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1060:	b130      	cbz	r0, 80a1070 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1062:	4631      	mov	r1, r6
 80a1064:	4620      	mov	r0, r4
 80a1066:	f7ff ff7d 	bl	80a0f64 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a106a:	4620      	mov	r0, r4
 80a106c:	b00e      	add	sp, #56	; 0x38
 80a106e:	bd70      	pop	{r4, r5, r6, pc}
 80a1070:	4620      	mov	r0, r4
 80a1072:	a903      	add	r1, sp, #12
 80a1074:	f7ff ff64 	bl	80a0f40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1078:	e7f7      	b.n	80a106a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a107a:	bf00      	nop
 80a107c:	200009a4 	.word	0x200009a4

080a1080 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1080:	4b02      	ldr	r3, [pc, #8]	; (80a108c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1082:	4a03      	ldr	r2, [pc, #12]	; (80a1090 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1084:	601a      	str	r2, [r3, #0]
 80a1086:	2200      	movs	r2, #0
 80a1088:	605a      	str	r2, [r3, #4]

} // spark
 80a108a:	4770      	bx	lr
 80a108c:	20000524 	.word	0x20000524
 80a1090:	080a1be0 	.word	0x080a1be0

080a1094 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1096:	4606      	mov	r6, r0
 80a1098:	460d      	mov	r5, r1
  size_t n = 0;
 80a109a:	2400      	movs	r4, #0
 80a109c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a109e:	42bd      	cmp	r5, r7
 80a10a0:	d00c      	beq.n	80a10bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a10a2:	6833      	ldr	r3, [r6, #0]
 80a10a4:	4630      	mov	r0, r6
 80a10a6:	689b      	ldr	r3, [r3, #8]
 80a10a8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a10ac:	4798      	blx	r3
     if (chunk>=0)
 80a10ae:	1e03      	subs	r3, r0, #0
 80a10b0:	db01      	blt.n	80a10b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a10b2:	441c      	add	r4, r3
  while (size--) {
 80a10b4:	e7f3      	b.n	80a109e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a10b6:	2c00      	cmp	r4, #0
 80a10b8:	bf08      	it	eq
 80a10ba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a10bc:	4620      	mov	r0, r4
 80a10be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10c0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a10c0:	b508      	push	{r3, lr}
  return write(str);
 80a10c2:	f7ff f984 	bl	80a03ce <_ZN5Print5writeEPKc>
}
 80a10c6:	bd08      	pop	{r3, pc}

080a10c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a10c8:	6803      	ldr	r3, [r0, #0]
 80a10ca:	689b      	ldr	r3, [r3, #8]
 80a10cc:	4718      	bx	r3

080a10ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a10ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a10d0:	210d      	movs	r1, #13
{
 80a10d2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a10d4:	f7ff fff8 	bl	80a10c8 <_ZN5Print5printEc>
  n += print('\n');
 80a10d8:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a10da:	4604      	mov	r4, r0
  n += print('\n');
 80a10dc:	4628      	mov	r0, r5
 80a10de:	f7ff fff3 	bl	80a10c8 <_ZN5Print5printEc>
  return n;
}
 80a10e2:	4420      	add	r0, r4
 80a10e4:	bd38      	pop	{r3, r4, r5, pc}

080a10e6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a10e6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a10e8:	2a01      	cmp	r2, #1
 80a10ea:	bf98      	it	ls
 80a10ec:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a10ee:	b530      	push	{r4, r5, lr}
 80a10f0:	b08b      	sub	sp, #44	; 0x2c
 80a10f2:	460c      	mov	r4, r1
  *str = '\0';
 80a10f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a10f8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a10fa:	4625      	mov	r5, r4
 80a10fc:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1100:	fb04 5312 	mls	r3, r4, r2, r5
 80a1104:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1106:	2b09      	cmp	r3, #9
 80a1108:	bf94      	ite	ls
 80a110a:	3330      	addls	r3, #48	; 0x30
 80a110c:	3337      	addhi	r3, #55	; 0x37
 80a110e:	b2db      	uxtb	r3, r3
  } while(n);
 80a1110:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1112:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1116:	d9f0      	bls.n	80a10fa <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1118:	f7ff f959 	bl	80a03ce <_ZN5Print5writeEPKc>
}
 80a111c:	b00b      	add	sp, #44	; 0x2c
 80a111e:	bd30      	pop	{r4, r5, pc}

080a1120 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a1120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1124:	b086      	sub	sp, #24
 80a1126:	af00      	add	r7, sp, #0
 80a1128:	4605      	mov	r5, r0
 80a112a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a112c:	1d38      	adds	r0, r7, #4
 80a112e:	2114      	movs	r1, #20
{
 80a1130:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a1132:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a1134:	f7ff fe82 	bl	80a0e3c <vsnprintf>

    if (n<bufsize)
 80a1138:	2813      	cmp	r0, #19
 80a113a:	d80e      	bhi.n	80a115a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a113c:	4628      	mov	r0, r5
 80a113e:	1d39      	adds	r1, r7, #4
 80a1140:	f7ff f945 	bl	80a03ce <_ZN5Print5writeEPKc>
 80a1144:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a1146:	b11e      	cbz	r6, 80a1150 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a1148:	4628      	mov	r0, r5
 80a114a:	f7ff ffc0 	bl	80a10ce <_ZN5Print7printlnEv>
 80a114e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a1150:	4620      	mov	r0, r4
 80a1152:	3718      	adds	r7, #24
 80a1154:	46bd      	mov	sp, r7
 80a1156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a115a:	f100 0308 	add.w	r3, r0, #8
 80a115e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a1162:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a1164:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a1168:	4622      	mov	r2, r4
 80a116a:	1c41      	adds	r1, r0, #1
 80a116c:	683b      	ldr	r3, [r7, #0]
 80a116e:	4668      	mov	r0, sp
 80a1170:	f7ff fe64 	bl	80a0e3c <vsnprintf>
  return write(str);
 80a1174:	4669      	mov	r1, sp
 80a1176:	4628      	mov	r0, r5
 80a1178:	f7ff f929 	bl	80a03ce <_ZN5Print5writeEPKc>
 80a117c:	4604      	mov	r4, r0
 80a117e:	46c5      	mov	sp, r8
 80a1180:	e7e1      	b.n	80a1146 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a1182 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a1182:	b510      	push	{r4, lr}
 80a1184:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
 80a1186:	f7ff fd9d 	bl	80a0cc4 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
 80a118a:	4284      	cmp	r4, r0
 80a118c:	d008      	beq.n	80a11a0 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a118e:	b11c      	cbz	r4, 80a1198 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a1190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
 80a1194:	f7ff bd86 	b.w	80a0ca4 <LED_Signaling_Start>
}
 80a1198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
 80a119c:	f7ff bd8a 	b.w	80a0cb4 <LED_Signaling_Stop>
}
 80a11a0:	bd10      	pop	{r4, pc}

080a11a2 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a11a2:	b570      	push	{r4, r5, r6, lr}
 80a11a4:	4605      	mov	r5, r0
 80a11a6:	460e      	mov	r6, r1
 80a11a8:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
 80a11aa:	f7ff fd8b 	bl	80a0cc4 <LED_RGB_IsOverRidden>
    if (!controlled()) {
 80a11ae:	b150      	cbz	r0, 80a11c6 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a11b0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80a11b4:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
 80a11b8:	f7ff fd6c 	bl	80a0c94 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80a11bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
 80a11c0:	20e7      	movs	r0, #231	; 0xe7
 80a11c2:	f7ff bd87 	b.w	80a0cd4 <LED_On>
}
 80a11c6:	bd70      	pop	{r4, r5, r6, pc}

080a11c8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11c8:	2200      	movs	r2, #0
 80a11ca:	4b01      	ldr	r3, [pc, #4]	; (80a11d0 <_GLOBAL__sub_I_RGB+0x8>)
 80a11cc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a11ce:	4770      	bx	lr
 80a11d0:	2000052c 	.word	0x2000052c

080a11d4 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a11d4:	6880      	ldr	r0, [r0, #8]
 80a11d6:	f7ff bc33 	b.w	80a0a40 <os_mutex_recursive_unlock>

080a11da <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a11da:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a11dc:	2600      	movs	r6, #0
 80a11de:	4604      	mov	r4, r0
 80a11e0:	460d      	mov	r5, r1
 80a11e2:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a11e6:	f7ff fc13 	bl	80a0a10 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a11ea:	4628      	mov	r0, r5
    _spi = spi;
 80a11ec:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a11ee:	f7ff fca9 	bl	80a0b44 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a11f2:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a11f4:	6066      	str	r6, [r4, #4]
}
 80a11f6:	bd70      	pop	{r4, r5, r6, pc}

080a11f8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a11f8:	b510      	push	{r4, lr}
 80a11fa:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 80a11fc:	6880      	ldr	r0, [r0, #8]
 80a11fe:	f7ff fc17 	bl	80a0a30 <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a1202:	7820      	ldrb	r0, [r4, #0]
 80a1204:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1208:	f7ff fc8c 	bl	80a0b24 <hal_spi_begin>
        unlock();
 80a120c:	4620      	mov	r0, r4
 80a120e:	f7ff ffe1 	bl	80a11d4 <_ZN8SPIClass6unlockEv>
    }
}
 80a1212:	bd10      	pop	{r4, pc}

080a1214 <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 80a1214:	b508      	push	{r3, lr}
    // Release peripheral
    unlock();
 80a1216:	f7ff ffdd 	bl	80a11d4 <_ZN8SPIClass6unlockEv>
}
 80a121a:	bd08      	pop	{r3, pc}

080a121c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a121c:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a121e:	2400      	movs	r4, #0
 80a1220:	0840      	lsrs	r0, r0, #1
 80a1222:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1224:	6818      	ldr	r0, [r3, #0]
 80a1226:	b2e5      	uxtb	r5, r4
 80a1228:	4288      	cmp	r0, r1
 80a122a:	d906      	bls.n	80a123a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a122c:	3401      	adds	r4, #1
 80a122e:	2c08      	cmp	r4, #8
 80a1230:	d002      	beq.n	80a1238 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a1232:	0840      	lsrs	r0, r0, #1
 80a1234:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1236:	e7f5      	b.n	80a1224 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1238:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a123a:	4b02      	ldr	r3, [pc, #8]	; (80a1244 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a123c:	5d5b      	ldrb	r3, [r3, r5]
 80a123e:	7013      	strb	r3, [r2, #0]
}
 80a1240:	bd30      	pop	{r4, r5, pc}
 80a1242:	bf00      	nop
 80a1244:	080a1c14 	.word	0x080a1c14

080a1248 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 80a1248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a124c:	4606      	mov	r6, r0
 80a124e:	b08f      	sub	sp, #60	; 0x3c
 80a1250:	6880      	ldr	r0, [r0, #8]
 80a1252:	460c      	mov	r4, r1
 80a1254:	f7ff fbec 	bl	80a0a30 <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1258:	2214      	movs	r2, #20
 80a125a:	2100      	movs	r1, #0
 80a125c:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 80a125e:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1260:	f000 fbb8 	bl	80a19d4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1264:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a1266:	2200      	movs	r2, #0
 80a1268:	4628      	mov	r0, r5
 80a126a:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 80a126c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80a1270:	f7ff fc78 	bl	80a0b64 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80a1274:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80a1278:	b113      	cbz	r3, 80a1280 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80a127a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a127e:	b155      	cbz	r5, 80a1296 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  SPISettings()
  {
 80a1280:	2700      	movs	r7, #0
 80a1282:	2501      	movs	r5, #1
 80a1284:	46b9      	mov	r9, r7
 80a1286:	46b8      	mov	r8, r7
  virtual ~SPISettings() {
  }

  bool operator==(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1288:	7923      	ldrb	r3, [r4, #4]
 80a128a:	b15d      	cbz	r5, 80a12a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80a128c:	b1c3      	cbz	r3, 80a12c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80a128e:	2000      	movs	r0, #0
 80a1290:	b00f      	add	sp, #60	; 0x3c
 80a1292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80a1296:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a129a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a129e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 80a12a2:	e7f1      	b.n	80a1288 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
      return true;

    if (default_ == other.default_ &&
 80a12a4:	2b00      	cmp	r3, #0
 80a12a6:	d135      	bne.n	80a1314 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 80a12a8:	68a3      	ldr	r3, [r4, #8]
 80a12aa:	4543      	cmp	r3, r8
 80a12ac:	d108      	bne.n	80a12c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a12ae:	f88d 9020 	strb.w	r9, [sp, #32]
 80a12b2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a12b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a12ba:	89a3      	ldrh	r3, [r4, #12]
 80a12bc:	429a      	cmp	r2, r3
 80a12be:	d0e6      	beq.n	80a128e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 80a12c0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a12c2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 80a12c4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a12c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a12ca:	ab04      	add	r3, sp, #16
 80a12cc:	f10d 020f 	add.w	r2, sp, #15
 80a12d0:	f7ff ffa4 	bl	80a121c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    return false;
  }

  bool operator<=(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a12d4:	7921      	ldrb	r1, [r4, #4]
 80a12d6:	b985      	cbnz	r5, 80a12fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
      return true;

    if (default_ == other.default_ &&
 80a12d8:	b989      	cbnz	r1, 80a12fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a12da:	68a3      	ldr	r3, [r4, #8]
 80a12dc:	4543      	cmp	r3, r8
 80a12de:	d30e      	bcc.n	80a12fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a12e0:	f88d 9020 	strb.w	r9, [sp, #32]
 80a12e4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a12e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a12ec:	89a3      	ldrh	r3, [r4, #12]
 80a12ee:	429a      	cmp	r2, r3
 80a12f0:	d105      	bne.n	80a12fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80a12f2:	9b04      	ldr	r3, [sp, #16]
 80a12f4:	4543      	cmp	r3, r8
 80a12f6:	d102      	bne.n	80a12fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a12f8:	e7c9      	b.n	80a128e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 80a12fa:	2900      	cmp	r1, #0
 80a12fc:	d1f9      	bne.n	80a12f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 80a12fe:	2300      	movs	r3, #0
 80a1300:	9301      	str	r3, [sp, #4]
 80a1302:	7b63      	ldrb	r3, [r4, #13]
 80a1304:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a1308:	9300      	str	r3, [sp, #0]
 80a130a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a130c:	7830      	ldrb	r0, [r6, #0]
 80a130e:	f7ff fc41 	bl	80a0b94 <hal_spi_set_settings>
    return 0;
 80a1312:	e7bc      	b.n	80a128e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a1314:	462b      	mov	r3, r5
 80a1316:	462a      	mov	r2, r5
 80a1318:	2101      	movs	r1, #1
 80a131a:	e9cd 5500 	strd	r5, r5, [sp]
 80a131e:	e7f5      	b.n	80a130c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

080a1320 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1320:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a1322:	7800      	ldrb	r0, [r0, #0]
 80a1324:	f7ff fc06 	bl	80a0b34 <hal_spi_transfer>
}
 80a1328:	b2c0      	uxtb	r0, r0
 80a132a:	bd08      	pop	{r3, pc}

080a132c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80a132c:	b530      	push	{r4, r5, lr}
 80a132e:	b087      	sub	sp, #28
 80a1330:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a1332:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 80a1334:	9500      	str	r5, [sp, #0]
 80a1336:	7800      	ldrb	r0, [r0, #0]
 80a1338:	f7ff fc1c 	bl	80a0b74 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 80a133c:	b93d      	cbnz	r5, 80a134e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 80a133e:	7820      	ldrb	r0, [r4, #0]
 80a1340:	a902      	add	r1, sp, #8
 80a1342:	f7ff fc1f 	bl	80a0b84 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 80a1346:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a134a:	07db      	lsls	r3, r3, #31
 80a134c:	d4f7      	bmi.n	80a133e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 80a134e:	b007      	add	sp, #28
 80a1350:	bd30      	pop	{r4, r5, pc}
	...

080a1354 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1354:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1356:	2000      	movs	r0, #0
 80a1358:	4b04      	ldr	r3, [pc, #16]	; (80a136c <_GLOBAL__sub_I_System+0x18>)
 80a135a:	601a      	str	r2, [r3, #0]
 80a135c:	4b04      	ldr	r3, [pc, #16]	; (80a1370 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a135e:	4a05      	ldr	r2, [pc, #20]	; (80a1374 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1360:	6018      	str	r0, [r3, #0]
 80a1362:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1364:	7198      	strb	r0, [r3, #6]
 80a1366:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1368:	f7ff bcbc 	b.w	80a0ce4 <set_system_mode>
 80a136c:	20000548 	.word	0x20000548
 80a1370:	2000053c 	.word	0x2000053c
 80a1374:	ffff0000 	.word	0xffff0000

080a1378 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1378:	4b02      	ldr	r3, [pc, #8]	; (80a1384 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a137a:	681a      	ldr	r2, [r3, #0]
 80a137c:	4b02      	ldr	r3, [pc, #8]	; (80a1388 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a137e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1380:	4770      	bx	lr
 80a1382:	bf00      	nop
 80a1384:	20000000 	.word	0x20000000
 80a1388:	2000054c 	.word	0x2000054c

080a138c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a138c:	4770      	bx	lr

080a138e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a138e:	7441      	strb	r1, [r0, #17]
}
 80a1390:	4770      	bx	lr

080a1392 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1392:	4770      	bx	lr

080a1394 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1394:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1396:	7c00      	ldrb	r0, [r0, #16]
 80a1398:	f7ff fc3c 	bl	80a0c14 <hal_usart_available_data_for_write>
}
 80a139c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13a0:	bd08      	pop	{r3, pc}

080a13a2 <_ZN11USARTSerial9availableEv>:
{
 80a13a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a13a4:	7c00      	ldrb	r0, [r0, #16]
 80a13a6:	f7ff fc0d 	bl	80a0bc4 <hal_usart_available>
}
 80a13aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13ae:	bd08      	pop	{r3, pc}

080a13b0 <_ZN11USARTSerial4peekEv>:
{
 80a13b0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a13b2:	7c00      	ldrb	r0, [r0, #16]
 80a13b4:	f7ff fc16 	bl	80a0be4 <hal_usart_peek>
}
 80a13b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a13bc:	bd08      	pop	{r3, pc}

080a13be <_ZN11USARTSerial4readEv>:
{
 80a13be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a13c0:	7c00      	ldrb	r0, [r0, #16]
 80a13c2:	f7ff fc07 	bl	80a0bd4 <hal_usart_read>
}
 80a13c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a13ca:	bd08      	pop	{r3, pc}

080a13cc <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a13cc:	7c00      	ldrb	r0, [r0, #16]
 80a13ce:	f7ff bc11 	b.w	80a0bf4 <hal_usart_flush>

080a13d2 <_ZN11USARTSerial5writeEh>:
{
 80a13d2:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a13d4:	7c46      	ldrb	r6, [r0, #17]
{
 80a13d6:	4604      	mov	r4, r0
 80a13d8:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a13da:	b12e      	cbz	r6, 80a13e8 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a13dc:	4629      	mov	r1, r5
 80a13de:	7c20      	ldrb	r0, [r4, #16]
}
 80a13e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a13e4:	f7ff bbe6 	b.w	80a0bb4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a13e8:	7c00      	ldrb	r0, [r0, #16]
 80a13ea:	f7ff fc13 	bl	80a0c14 <hal_usart_available_data_for_write>
 80a13ee:	2800      	cmp	r0, #0
 80a13f0:	dcf4      	bgt.n	80a13dc <_ZN11USARTSerial5writeEh+0xa>
}
 80a13f2:	4630      	mov	r0, r6
 80a13f4:	bd70      	pop	{r4, r5, r6, pc}

080a13f6 <_ZN11USARTSerialD0Ev>:
 80a13f6:	b510      	push	{r4, lr}
 80a13f8:	4604      	mov	r4, r0
 80a13fa:	2114      	movs	r1, #20
 80a13fc:	f000 fad2 	bl	80a19a4 <_ZdlPvj>
 80a1400:	4620      	mov	r0, r4
 80a1402:	bd10      	pop	{r4, pc}

080a1404 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1404:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1408:	b510      	push	{r4, lr}
 80a140a:	4604      	mov	r4, r0
 80a140c:	4608      	mov	r0, r1
 80a140e:	4611      	mov	r1, r2
 80a1410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1414:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1418:	4a04      	ldr	r2, [pc, #16]	; (80a142c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a141a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a141c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a141e:	2201      	movs	r2, #1
 80a1420:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1422:	461a      	mov	r2, r3
 80a1424:	f7ff fbbe 	bl	80a0ba4 <hal_usart_init>
}
 80a1428:	4620      	mov	r0, r4
 80a142a:	bd10      	pop	{r4, pc}
 80a142c:	080a1c40 	.word	0x080a1c40

080a1430 <_Z22__fetch_global_Serial1v>:
{
 80a1430:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1432:	4d0c      	ldr	r5, [pc, #48]	; (80a1464 <_Z22__fetch_global_Serial1v+0x34>)
 80a1434:	7829      	ldrb	r1, [r5, #0]
 80a1436:	f3bf 8f5b 	dmb	ish
 80a143a:	f011 0401 	ands.w	r4, r1, #1
 80a143e:	d10f      	bne.n	80a1460 <_Z22__fetch_global_Serial1v+0x30>
 80a1440:	4628      	mov	r0, r5
 80a1442:	f7fe fe2c 	bl	80a009e <__cxa_guard_acquire>
 80a1446:	b158      	cbz	r0, 80a1460 <_Z22__fetch_global_Serial1v+0x30>
 80a1448:	4621      	mov	r1, r4
 80a144a:	4b07      	ldr	r3, [pc, #28]	; (80a1468 <_Z22__fetch_global_Serial1v+0x38>)
 80a144c:	4a07      	ldr	r2, [pc, #28]	; (80a146c <_Z22__fetch_global_Serial1v+0x3c>)
 80a144e:	4808      	ldr	r0, [pc, #32]	; (80a1470 <_Z22__fetch_global_Serial1v+0x40>)
 80a1450:	f7ff ffd8 	bl	80a1404 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1454:	4628      	mov	r0, r5
 80a1456:	f7fe fe27 	bl	80a00a8 <__cxa_guard_release>
 80a145a:	4806      	ldr	r0, [pc, #24]	; (80a1474 <_Z22__fetch_global_Serial1v+0x44>)
 80a145c:	f000 faa6 	bl	80a19ac <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1460:	4803      	ldr	r0, [pc, #12]	; (80a1470 <_Z22__fetch_global_Serial1v+0x40>)
 80a1462:	bd38      	pop	{r3, r4, r5, pc}
 80a1464:	20000550 	.word	0x20000550
 80a1468:	200005d8 	.word	0x200005d8
 80a146c:	20000554 	.word	0x20000554
 80a1470:	2000065c 	.word	0x2000065c
 80a1474:	080a1393 	.word	0x080a1393

080a1478 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1478:	7441      	strb	r1, [r0, #17]
}
 80a147a:	4770      	bx	lr

080a147c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a147c:	4770      	bx	lr

080a147e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a147e:	4770      	bx	lr

080a1480 <_ZN9USBSerial4readEv>:
{
 80a1480:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1482:	2100      	movs	r1, #0
 80a1484:	7c00      	ldrb	r0, [r0, #16]
 80a1486:	f7ff fbe5 	bl	80a0c54 <HAL_USB_USART_Receive_Data>
}
 80a148a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a148e:	bd08      	pop	{r3, pc}

080a1490 <_ZN9USBSerial4peekEv>:
{
 80a1490:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1492:	2101      	movs	r1, #1
 80a1494:	7c00      	ldrb	r0, [r0, #16]
 80a1496:	f7ff fbdd 	bl	80a0c54 <HAL_USB_USART_Receive_Data>
}
 80a149a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a149e:	bd08      	pop	{r3, pc}

080a14a0 <_ZN9USBSerial17availableForWriteEv>:
{
 80a14a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a14a2:	7c00      	ldrb	r0, [r0, #16]
 80a14a4:	f7ff fbce 	bl	80a0c44 <HAL_USB_USART_Available_Data_For_Write>
}
 80a14a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a14ac:	bd08      	pop	{r3, pc}

080a14ae <_ZN9USBSerial9availableEv>:
{
 80a14ae:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a14b0:	7c00      	ldrb	r0, [r0, #16]
 80a14b2:	f7ff fbbf 	bl	80a0c34 <HAL_USB_USART_Available_Data>
}
 80a14b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a14ba:	bd08      	pop	{r3, pc}

080a14bc <_ZN9USBSerial5writeEh>:
{
 80a14bc:	b538      	push	{r3, r4, r5, lr}
 80a14be:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14c0:	7c00      	ldrb	r0, [r0, #16]
{
 80a14c2:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14c4:	f7ff fbbe 	bl	80a0c44 <HAL_USB_USART_Available_Data_For_Write>
 80a14c8:	2800      	cmp	r0, #0
 80a14ca:	dc01      	bgt.n	80a14d0 <_ZN9USBSerial5writeEh+0x14>
 80a14cc:	7c60      	ldrb	r0, [r4, #17]
 80a14ce:	b128      	cbz	r0, 80a14dc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a14d0:	4629      	mov	r1, r5
 80a14d2:	7c20      	ldrb	r0, [r4, #16]
 80a14d4:	f7ff fbc6 	bl	80a0c64 <HAL_USB_USART_Send_Data>
 80a14d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a14dc:	bd38      	pop	{r3, r4, r5, pc}

080a14de <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a14de:	7c00      	ldrb	r0, [r0, #16]
 80a14e0:	f7ff bbc8 	b.w	80a0c74 <HAL_USB_USART_Flush_Data>

080a14e4 <_ZN9USBSerialD0Ev>:
 80a14e4:	b510      	push	{r4, lr}
 80a14e6:	4604      	mov	r4, r0
 80a14e8:	2114      	movs	r1, #20
 80a14ea:	f000 fa5b 	bl	80a19a4 <_ZdlPvj>
 80a14ee:	4620      	mov	r0, r4
 80a14f0:	bd10      	pop	{r4, pc}

080a14f2 <__tcf_1>:
 80a14f2:	4770      	bx	lr

080a14f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a14f4:	b510      	push	{r4, lr}
 80a14f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a14fa:	4604      	mov	r4, r0
 80a14fc:	4608      	mov	r0, r1
 80a14fe:	2100      	movs	r1, #0
 80a1500:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1504:	4b04      	ldr	r3, [pc, #16]	; (80a1518 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1506:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1508:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a150a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a150c:	4611      	mov	r1, r2
  _blocking = true;
 80a150e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1510:	f7ff fb88 	bl	80a0c24 <HAL_USB_USART_Init>
}
 80a1514:	4620      	mov	r0, r4
 80a1516:	bd10      	pop	{r4, pc}
 80a1518:	080a1c70 	.word	0x080a1c70

080a151c <_Z19acquireSerialBufferv>:
{
 80a151c:	b510      	push	{r4, lr}
 80a151e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1520:	2214      	movs	r2, #20
 80a1522:	2100      	movs	r1, #0
 80a1524:	f000 fa56 	bl	80a19d4 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1528:	4b05      	ldr	r3, [pc, #20]	; (80a1540 <_Z19acquireSerialBufferv+0x24>)
}
 80a152a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a152c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a152e:	4b05      	ldr	r3, [pc, #20]	; (80a1544 <_Z19acquireSerialBufferv+0x28>)
 80a1530:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1532:	f240 1301 	movw	r3, #257	; 0x101
 80a1536:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1538:	2381      	movs	r3, #129	; 0x81
 80a153a:	8223      	strh	r3, [r4, #16]
}
 80a153c:	bd10      	pop	{r4, pc}
 80a153e:	bf00      	nop
 80a1540:	200006a0 	.word	0x200006a0
 80a1544:	200007a1 	.word	0x200007a1

080a1548 <_Z16_fetch_usbserialv>:
{
 80a1548:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a154a:	4d0e      	ldr	r5, [pc, #56]	; (80a1584 <_Z16_fetch_usbserialv+0x3c>)
{
 80a154c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a154e:	a801      	add	r0, sp, #4
 80a1550:	f7ff ffe4 	bl	80a151c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1554:	7829      	ldrb	r1, [r5, #0]
 80a1556:	f3bf 8f5b 	dmb	ish
 80a155a:	f011 0401 	ands.w	r4, r1, #1
 80a155e:	d10e      	bne.n	80a157e <_Z16_fetch_usbserialv+0x36>
 80a1560:	4628      	mov	r0, r5
 80a1562:	f7fe fd9c 	bl	80a009e <__cxa_guard_acquire>
 80a1566:	b150      	cbz	r0, 80a157e <_Z16_fetch_usbserialv+0x36>
 80a1568:	4621      	mov	r1, r4
 80a156a:	aa01      	add	r2, sp, #4
 80a156c:	4806      	ldr	r0, [pc, #24]	; (80a1588 <_Z16_fetch_usbserialv+0x40>)
 80a156e:	f7ff ffc1 	bl	80a14f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1572:	4628      	mov	r0, r5
 80a1574:	f7fe fd98 	bl	80a00a8 <__cxa_guard_release>
 80a1578:	4804      	ldr	r0, [pc, #16]	; (80a158c <_Z16_fetch_usbserialv+0x44>)
 80a157a:	f000 fa17 	bl	80a19ac <atexit>
	return _usbserial;
}
 80a157e:	4802      	ldr	r0, [pc, #8]	; (80a1588 <_Z16_fetch_usbserialv+0x40>)
 80a1580:	b007      	add	sp, #28
 80a1582:	bd30      	pop	{r4, r5, pc}
 80a1584:	20000670 	.word	0x20000670
 80a1588:	20000678 	.word	0x20000678
 80a158c:	080a147d 	.word	0x080a147d

080a1590 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1590:	b510      	push	{r4, lr}
 80a1592:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1594:	2214      	movs	r2, #20
 80a1596:	2100      	movs	r1, #0
 80a1598:	f000 fa1c 	bl	80a19d4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a159c:	4b05      	ldr	r3, [pc, #20]	; (80a15b4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a159e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a15a0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a15a2:	4b05      	ldr	r3, [pc, #20]	; (80a15b8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a15a4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a15a6:	f240 1301 	movw	r3, #257	; 0x101
 80a15aa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a15ac:	2381      	movs	r3, #129	; 0x81
 80a15ae:	8223      	strh	r3, [r4, #16]
}
 80a15b0:	bd10      	pop	{r4, pc}
 80a15b2:	bf00      	nop
 80a15b4:	20000822 	.word	0x20000822
 80a15b8:	20000923 	.word	0x20000923

080a15bc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a15bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15be:	4c0e      	ldr	r4, [pc, #56]	; (80a15f8 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a15c0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a15c2:	a801      	add	r0, sp, #4
 80a15c4:	f7ff ffe4 	bl	80a1590 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15c8:	7823      	ldrb	r3, [r4, #0]
 80a15ca:	f3bf 8f5b 	dmb	ish
 80a15ce:	07db      	lsls	r3, r3, #31
 80a15d0:	d40e      	bmi.n	80a15f0 <_Z17_fetch_usbserial1v+0x34>
 80a15d2:	4620      	mov	r0, r4
 80a15d4:	f7fe fd63 	bl	80a009e <__cxa_guard_acquire>
 80a15d8:	b150      	cbz	r0, 80a15f0 <_Z17_fetch_usbserial1v+0x34>
 80a15da:	2101      	movs	r1, #1
 80a15dc:	aa01      	add	r2, sp, #4
 80a15de:	4807      	ldr	r0, [pc, #28]	; (80a15fc <_Z17_fetch_usbserial1v+0x40>)
 80a15e0:	f7ff ff88 	bl	80a14f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a15e4:	4620      	mov	r0, r4
 80a15e6:	f7fe fd5f 	bl	80a00a8 <__cxa_guard_release>
 80a15ea:	4805      	ldr	r0, [pc, #20]	; (80a1600 <_Z17_fetch_usbserial1v+0x44>)
 80a15ec:	f000 f9de 	bl	80a19ac <atexit>
  return _usbserial1;
}
 80a15f0:	4802      	ldr	r0, [pc, #8]	; (80a15fc <_Z17_fetch_usbserial1v+0x40>)
 80a15f2:	b006      	add	sp, #24
 80a15f4:	bd10      	pop	{r4, pc}
 80a15f6:	bf00      	nop
 80a15f8:	20000674 	.word	0x20000674
 80a15fc:	2000068c 	.word	0x2000068c
 80a1600:	080a14f3 	.word	0x080a14f3

080a1604 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1604:	2200      	movs	r2, #0
 80a1606:	6840      	ldr	r0, [r0, #4]
 80a1608:	4611      	mov	r1, r2
 80a160a:	f7ff bbbf 	b.w	80a0d8c <network_ready>

080a160e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a160e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1610:	4615      	mov	r5, r2
 80a1612:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a1614:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1616:	460e      	mov	r6, r1
 80a1618:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a161a:	2100      	movs	r1, #0
 80a161c:	a803      	add	r0, sp, #12
 80a161e:	f000 f9d9 	bl	80a19d4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1622:	4628      	mov	r0, r5
 80a1624:	f000 fa02 	bl	80a1a2c <strlen>
 80a1628:	2700      	movs	r7, #0
 80a162a:	b281      	uxth	r1, r0
 80a162c:	6873      	ldr	r3, [r6, #4]
 80a162e:	4628      	mov	r0, r5
 80a1630:	9700      	str	r7, [sp, #0]
 80a1632:	aa03      	add	r2, sp, #12
 80a1634:	f7ff fb26 	bl	80a0c84 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1638:	b130      	cbz	r0, 80a1648 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a163a:	4639      	mov	r1, r7
 80a163c:	4620      	mov	r0, r4
 80a163e:	f7ff fc91 	bl	80a0f64 <_ZN9IPAddressC1Em>
    }
 80a1642:	4620      	mov	r0, r4
 80a1644:	b009      	add	sp, #36	; 0x24
 80a1646:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1648:	4620      	mov	r0, r4
 80a164a:	a903      	add	r1, sp, #12
 80a164c:	f7ff fc78 	bl	80a0f40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1650:	e7f7      	b.n	80a1642 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1652 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1652:	2200      	movs	r2, #0
 80a1654:	6840      	ldr	r0, [r0, #4]
 80a1656:	4611      	mov	r1, r2
 80a1658:	f7ff bbb8 	b.w	80a0dcc <network_listening>

080a165c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a165c:	2200      	movs	r2, #0
 80a165e:	6840      	ldr	r0, [r0, #4]
 80a1660:	4611      	mov	r1, r2
 80a1662:	f7ff bbc3 	b.w	80a0dec <network_get_listen_timeout>

080a1666 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1666:	2200      	movs	r2, #0
 80a1668:	6840      	ldr	r0, [r0, #4]
 80a166a:	f7ff bbb7 	b.w	80a0ddc <network_set_listen_timeout>

080a166e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a166e:	2200      	movs	r2, #0
 80a1670:	6840      	ldr	r0, [r0, #4]
 80a1672:	f081 0101 	eor.w	r1, r1, #1
 80a1676:	f7ff bba1 	b.w	80a0dbc <network_listen>

080a167a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a167a:	2300      	movs	r3, #0
 80a167c:	6840      	ldr	r0, [r0, #4]
 80a167e:	461a      	mov	r2, r3
 80a1680:	4619      	mov	r1, r3
 80a1682:	f7ff bb93 	b.w	80a0dac <network_off>

080a1686 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a1686:	2300      	movs	r3, #0
 80a1688:	6840      	ldr	r0, [r0, #4]
 80a168a:	461a      	mov	r2, r3
 80a168c:	4619      	mov	r1, r3
 80a168e:	f7ff bb85 	b.w	80a0d9c <network_on>

080a1692 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1692:	2200      	movs	r2, #0
 80a1694:	6840      	ldr	r0, [r0, #4]
 80a1696:	4611      	mov	r1, r2
 80a1698:	f7ff bb68 	b.w	80a0d6c <network_connecting>

080a169c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a169c:	2200      	movs	r2, #0
 80a169e:	2102      	movs	r1, #2
 80a16a0:	6840      	ldr	r0, [r0, #4]
 80a16a2:	f7ff bb6b 	b.w	80a0d7c <network_disconnect>

080a16a6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a16a6:	2300      	movs	r3, #0
 80a16a8:	6840      	ldr	r0, [r0, #4]
 80a16aa:	461a      	mov	r2, r3
 80a16ac:	f7ff bb56 	b.w	80a0d5c <network_connect>

080a16b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a16b0:	2204      	movs	r2, #4
 80a16b2:	4b02      	ldr	r3, [pc, #8]	; (80a16bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a16b4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a16b6:	4a02      	ldr	r2, [pc, #8]	; (80a16c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a16b8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a16ba:	4770      	bx	lr
 80a16bc:	200009a4 	.word	0x200009a4
 80a16c0:	080a1ca0 	.word	0x080a1ca0

080a16c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a16c4:	4b01      	ldr	r3, [pc, #4]	; (80a16cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a16c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a16c8:	4770      	bx	lr
 80a16ca:	bf00      	nop
 80a16cc:	20000004 	.word	0x20000004

080a16d0 <serialEventRun>:
{
 80a16d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a16d2:	4b13      	ldr	r3, [pc, #76]	; (80a1720 <serialEventRun+0x50>)
 80a16d4:	b143      	cbz	r3, 80a16e8 <serialEventRun+0x18>
 80a16d6:	f7ff ff37 	bl	80a1548 <_Z16_fetch_usbserialv>
 80a16da:	6803      	ldr	r3, [r0, #0]
 80a16dc:	691b      	ldr	r3, [r3, #16]
 80a16de:	4798      	blx	r3
 80a16e0:	2800      	cmp	r0, #0
 80a16e2:	dd01      	ble.n	80a16e8 <serialEventRun+0x18>
        serialEvent();
 80a16e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a16e8:	4b0e      	ldr	r3, [pc, #56]	; (80a1724 <serialEventRun+0x54>)
 80a16ea:	b143      	cbz	r3, 80a16fe <serialEventRun+0x2e>
 80a16ec:	f7ff fea0 	bl	80a1430 <_Z22__fetch_global_Serial1v>
 80a16f0:	6803      	ldr	r3, [r0, #0]
 80a16f2:	691b      	ldr	r3, [r3, #16]
 80a16f4:	4798      	blx	r3
 80a16f6:	2800      	cmp	r0, #0
 80a16f8:	dd01      	ble.n	80a16fe <serialEventRun+0x2e>
        serialEvent1();
 80a16fa:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a16fe:	4b0a      	ldr	r3, [pc, #40]	; (80a1728 <serialEventRun+0x58>)
 80a1700:	b10b      	cbz	r3, 80a1706 <serialEventRun+0x36>
 80a1702:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1706:	4b09      	ldr	r3, [pc, #36]	; (80a172c <serialEventRun+0x5c>)
 80a1708:	b143      	cbz	r3, 80a171c <serialEventRun+0x4c>
 80a170a:	f7ff ff57 	bl	80a15bc <_Z17_fetch_usbserial1v>
 80a170e:	6803      	ldr	r3, [r0, #0]
 80a1710:	691b      	ldr	r3, [r3, #16]
 80a1712:	4798      	blx	r3
 80a1714:	2800      	cmp	r0, #0
 80a1716:	dd01      	ble.n	80a171c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1718:	f3af 8000 	nop.w
}
 80a171c:	bd08      	pop	{r3, pc}
 80a171e:	bf00      	nop
	...

080a1730 <_post_loop>:
{
 80a1730:	b508      	push	{r3, lr}
	serialEventRun();
 80a1732:	f7ff ffcd 	bl	80a16d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1736:	f7ff f99b 	bl	80a0a70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a173a:	4b01      	ldr	r3, [pc, #4]	; (80a1740 <_post_loop+0x10>)
 80a173c:	6018      	str	r0, [r3, #0]
}
 80a173e:	bd08      	pop	{r3, pc}
 80a1740:	200009b4 	.word	0x200009b4

080a1744 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1744:	4805      	ldr	r0, [pc, #20]	; (80a175c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1746:	4a06      	ldr	r2, [pc, #24]	; (80a1760 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1748:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a174a:	1a12      	subs	r2, r2, r0
 80a174c:	4905      	ldr	r1, [pc, #20]	; (80a1764 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a174e:	f000 f933 	bl	80a19b8 <memcpy>
    __backup_sram_signature = signature;
 80a1752:	4b05      	ldr	r3, [pc, #20]	; (80a1768 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1754:	4a05      	ldr	r2, [pc, #20]	; (80a176c <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1756:	601a      	str	r2, [r3, #0]
}
 80a1758:	bd08      	pop	{r3, pc}
 80a175a:	bf00      	nop
 80a175c:	40024000 	.word	0x40024000
 80a1760:	40024004 	.word	0x40024004
 80a1764:	080a1d00 	.word	0x080a1d00
 80a1768:	40024000 	.word	0x40024000
 80a176c:	9a271c1e 	.word	0x9a271c1e

080a1770 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1770:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1772:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1774:	461a      	mov	r2, r3
 80a1776:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a177a:	9300      	str	r3, [sp, #0]
 80a177c:	f7ff fad4 	bl	80a0d28 <system_ctrl_set_result>
}
 80a1780:	b003      	add	sp, #12
 80a1782:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1788 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1788:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a178a:	8843      	ldrh	r3, [r0, #2]
 80a178c:	2b0a      	cmp	r3, #10
 80a178e:	d008      	beq.n	80a17a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1790:	2b50      	cmp	r3, #80	; 0x50
 80a1792:	d10b      	bne.n	80a17ac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1794:	4b09      	ldr	r3, [pc, #36]	; (80a17bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1796:	681b      	ldr	r3, [r3, #0]
 80a1798:	b14b      	cbz	r3, 80a17ae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a179a:	b003      	add	sp, #12
 80a179c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a17a0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a17a2:	f7ff ffe5 	bl	80a1770 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a17a6:	b003      	add	sp, #12
 80a17a8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a17ac:	2300      	movs	r3, #0
 80a17ae:	461a      	mov	r2, r3
 80a17b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a17b4:	9300      	str	r3, [sp, #0]
 80a17b6:	f7ff fab7 	bl	80a0d28 <system_ctrl_set_result>
}
 80a17ba:	e7f4      	b.n	80a17a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a17bc:	200009b0 	.word	0x200009b0

080a17c0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a17c0:	2100      	movs	r1, #0
{
 80a17c2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a17c4:	4811      	ldr	r0, [pc, #68]	; (80a180c <module_user_init_hook+0x4c>)
 80a17c6:	f7ff fb41 	bl	80a0e4c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a17ca:	4b11      	ldr	r3, [pc, #68]	; (80a1810 <module_user_init_hook+0x50>)
 80a17cc:	681a      	ldr	r2, [r3, #0]
 80a17ce:	4b11      	ldr	r3, [pc, #68]	; (80a1814 <module_user_init_hook+0x54>)
 80a17d0:	429a      	cmp	r2, r3
 80a17d2:	bf0c      	ite	eq
 80a17d4:	2201      	moveq	r2, #1
 80a17d6:	2200      	movne	r2, #0
 80a17d8:	4b0f      	ldr	r3, [pc, #60]	; (80a1818 <module_user_init_hook+0x58>)
 80a17da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a17dc:	d001      	beq.n	80a17e2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a17de:	f7ff ffb1 	bl	80a1744 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a17e2:	f7ff f935 	bl	80a0a50 <HAL_RNG_GetRandomNumber>
 80a17e6:	4604      	mov	r4, r0
    srand(seed);
 80a17e8:	f000 f8fc 	bl	80a19e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a17ec:	4b0b      	ldr	r3, [pc, #44]	; (80a181c <module_user_init_hook+0x5c>)
 80a17ee:	b113      	cbz	r3, 80a17f6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a17f0:	4620      	mov	r0, r4
 80a17f2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a17f6:	2100      	movs	r1, #0
 80a17f8:	4808      	ldr	r0, [pc, #32]	; (80a181c <module_user_init_hook+0x5c>)
 80a17fa:	f7ff faa7 	bl	80a0d4c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a17fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1802:	2100      	movs	r1, #0
 80a1804:	4806      	ldr	r0, [pc, #24]	; (80a1820 <module_user_init_hook+0x60>)
 80a1806:	f7ff ba85 	b.w	80a0d14 <system_ctrl_set_app_request_handler>
 80a180a:	bf00      	nop
 80a180c:	080a16c5 	.word	0x080a16c5
 80a1810:	40024000 	.word	0x40024000
 80a1814:	9a271c1e 	.word	0x9a271c1e
 80a1818:	200009ac 	.word	0x200009ac
 80a181c:	00000000 	.word	0x00000000
 80a1820:	080a1789 	.word	0x080a1789

080a1824 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1824:	4b02      	ldr	r3, [pc, #8]	; (80a1830 <__tcf_0+0xc>)
 80a1826:	6898      	ldr	r0, [r3, #8]
 80a1828:	b108      	cbz	r0, 80a182e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a182a:	f7ff b8f9 	b.w	80a0a20 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a182e:	4770      	bx	lr
 80a1830:	20000070 	.word	0x20000070

080a1834 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1834:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1836:	b570      	push	{r4, r5, r6, lr}
 80a1838:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a183a:	d901      	bls.n	80a1840 <pinAvailable+0xc>
    return false;
 80a183c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a183e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1840:	f1a0 030d 	sub.w	r3, r0, #13
 80a1844:	2b02      	cmp	r3, #2
 80a1846:	d90b      	bls.n	80a1860 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1848:	2801      	cmp	r0, #1
 80a184a:	d824      	bhi.n	80a1896 <pinAvailable+0x62>
 80a184c:	f000 f878 	bl	80a1940 <_Z19__fetch_global_Wirev>
 80a1850:	2100      	movs	r1, #0
 80a1852:	7c00      	ldrb	r0, [r0, #16]
 80a1854:	f7ff f954 	bl	80a0b00 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1858:	f080 0001 	eor.w	r0, r0, #1
 80a185c:	b2c0      	uxtb	r0, r0
 80a185e:	e7ee      	b.n	80a183e <pinAvailable+0xa>
 80a1860:	4e12      	ldr	r6, [pc, #72]	; (80a18ac <pinAvailable+0x78>)
 80a1862:	7831      	ldrb	r1, [r6, #0]
 80a1864:	f3bf 8f5b 	dmb	ish
 80a1868:	f011 0501 	ands.w	r5, r1, #1
 80a186c:	d10d      	bne.n	80a188a <pinAvailable+0x56>
 80a186e:	4630      	mov	r0, r6
 80a1870:	f7fe fc15 	bl	80a009e <__cxa_guard_acquire>
 80a1874:	b148      	cbz	r0, 80a188a <pinAvailable+0x56>
 80a1876:	4629      	mov	r1, r5
 80a1878:	480d      	ldr	r0, [pc, #52]	; (80a18b0 <pinAvailable+0x7c>)
 80a187a:	f7ff fcae 	bl	80a11da <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a187e:	4630      	mov	r0, r6
 80a1880:	f7fe fc12 	bl	80a00a8 <__cxa_guard_release>
 80a1884:	480b      	ldr	r0, [pc, #44]	; (80a18b4 <pinAvailable+0x80>)
 80a1886:	f000 f891 	bl	80a19ac <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a188a:	4b09      	ldr	r3, [pc, #36]	; (80a18b0 <pinAvailable+0x7c>)
 80a188c:	7818      	ldrb	r0, [r3, #0]
 80a188e:	f7ff f961 	bl	80a0b54 <hal_spi_is_enabled>
 80a1892:	2800      	cmp	r0, #0
 80a1894:	d1d2      	bne.n	80a183c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1896:	3c12      	subs	r4, #18
 80a1898:	2c01      	cmp	r4, #1
 80a189a:	d805      	bhi.n	80a18a8 <pinAvailable+0x74>
 80a189c:	f7ff fdc8 	bl	80a1430 <_Z22__fetch_global_Serial1v>
 80a18a0:	7c00      	ldrb	r0, [r0, #16]
 80a18a2:	f7ff f9af 	bl	80a0c04 <hal_usart_is_enabled>
 80a18a6:	e7d7      	b.n	80a1858 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a18a8:	2001      	movs	r0, #1
 80a18aa:	e7c8      	b.n	80a183e <pinAvailable+0xa>
 80a18ac:	2000006c 	.word	0x2000006c
 80a18b0:	20000070 	.word	0x20000070
 80a18b4:	080a1825 	.word	0x080a1825

080a18b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a18b8:	2817      	cmp	r0, #23
{
 80a18ba:	b538      	push	{r3, r4, r5, lr}
 80a18bc:	4604      	mov	r4, r0
 80a18be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a18c0:	d80a      	bhi.n	80a18d8 <pinMode+0x20>
 80a18c2:	29ff      	cmp	r1, #255	; 0xff
 80a18c4:	d008      	beq.n	80a18d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a18c6:	f7ff ffb5 	bl	80a1834 <pinAvailable>
 80a18ca:	b128      	cbz	r0, 80a18d8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a18cc:	4629      	mov	r1, r5
 80a18ce:	4620      	mov	r0, r4
}
 80a18d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a18d4:	f7ff b8d4 	b.w	80a0a80 <HAL_Pin_Mode>
}
 80a18d8:	bd38      	pop	{r3, r4, r5, pc}

080a18da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a18da:	b538      	push	{r3, r4, r5, lr}
 80a18dc:	4604      	mov	r4, r0
 80a18de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a18e0:	f7ff f8d6 	bl	80a0a90 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a18e4:	28ff      	cmp	r0, #255	; 0xff
 80a18e6:	d010      	beq.n	80a190a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a18e8:	2806      	cmp	r0, #6
 80a18ea:	d804      	bhi.n	80a18f6 <digitalWrite+0x1c>
 80a18ec:	234d      	movs	r3, #77	; 0x4d
 80a18ee:	fa23 f000 	lsr.w	r0, r3, r0
 80a18f2:	07c3      	lsls	r3, r0, #31
 80a18f4:	d409      	bmi.n	80a190a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a18f6:	4620      	mov	r0, r4
 80a18f8:	f7ff ff9c 	bl	80a1834 <pinAvailable>
 80a18fc:	b128      	cbz	r0, 80a190a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a18fe:	4629      	mov	r1, r5
 80a1900:	4620      	mov	r0, r4
}
 80a1902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a1906:	f7ff b8cb 	b.w	80a0aa0 <HAL_GPIO_Write>
}
 80a190a:	bd38      	pop	{r3, r4, r5, pc}

080a190c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a190c:	4770      	bx	lr
	...

080a1910 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a1910:	2300      	movs	r3, #0
{
 80a1912:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1914:	2520      	movs	r5, #32
 80a1916:	8043      	strh	r3, [r0, #2]
 80a1918:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a191a:	4e08      	ldr	r6, [pc, #32]	; (80a193c <_Z17acquireWireBufferv+0x2c>)
{
 80a191c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a191e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1920:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1922:	6085      	str	r5, [r0, #8]
 80a1924:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1926:	4628      	mov	r0, r5
 80a1928:	f000 f83e 	bl	80a19a8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a192c:	4631      	mov	r1, r6
	};
 80a192e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1930:	4628      	mov	r0, r5
 80a1932:	f000 f839 	bl	80a19a8 <_ZnajRKSt9nothrow_t>
	};
 80a1936:	60e0      	str	r0, [r4, #12]
}
 80a1938:	4620      	mov	r0, r4
 80a193a:	bd70      	pop	{r4, r5, r6, pc}
 80a193c:	080a1cd4 	.word	0x080a1cd4

080a1940 <_Z19__fetch_global_Wirev>:
{
 80a1940:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1942:	4d0e      	ldr	r5, [pc, #56]	; (80a197c <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1944:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1946:	7829      	ldrb	r1, [r5, #0]
 80a1948:	f3bf 8f5b 	dmb	ish
 80a194c:	f011 0401 	ands.w	r4, r1, #1
 80a1950:	d111      	bne.n	80a1976 <_Z19__fetch_global_Wirev+0x36>
 80a1952:	4628      	mov	r0, r5
 80a1954:	f7fe fba3 	bl	80a009e <__cxa_guard_acquire>
 80a1958:	b168      	cbz	r0, 80a1976 <_Z19__fetch_global_Wirev+0x36>
 80a195a:	a801      	add	r0, sp, #4
 80a195c:	f7ff ffd8 	bl	80a1910 <_Z17acquireWireBufferv>
 80a1960:	4621      	mov	r1, r4
 80a1962:	aa01      	add	r2, sp, #4
 80a1964:	4806      	ldr	r0, [pc, #24]	; (80a1980 <_Z19__fetch_global_Wirev+0x40>)
 80a1966:	f7ff faa9 	bl	80a0ebc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a196a:	4628      	mov	r0, r5
 80a196c:	f7fe fb9c 	bl	80a00a8 <__cxa_guard_release>
 80a1970:	4804      	ldr	r0, [pc, #16]	; (80a1984 <_Z19__fetch_global_Wirev+0x44>)
 80a1972:	f000 f81b 	bl	80a19ac <atexit>
	return wire;
}
 80a1976:	4802      	ldr	r0, [pc, #8]	; (80a1980 <_Z19__fetch_global_Wirev+0x40>)
 80a1978:	b007      	add	sp, #28
 80a197a:	bd30      	pop	{r4, r5, pc}
 80a197c:	200009b8 	.word	0x200009b8
 80a1980:	200009bc 	.word	0x200009bc
 80a1984:	080a190d 	.word	0x080a190d

080a1988 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1988:	2300      	movs	r3, #0
 80a198a:	b507      	push	{r0, r1, r2, lr}
 80a198c:	461a      	mov	r2, r3
 80a198e:	4619      	mov	r1, r3
 80a1990:	9300      	str	r3, [sp, #0]
 80a1992:	4803      	ldr	r0, [pc, #12]	; (80a19a0 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1994:	f7ff fafc 	bl	80a0f90 <_ZN9IPAddressC1Ehhhh>
 80a1998:	b003      	add	sp, #12
 80a199a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a199e:	bf00      	nop
 80a19a0:	200009d0 	.word	0x200009d0

080a19a4 <_ZdlPvj>:
 80a19a4:	f7fe bb79 	b.w	80a009a <_ZdlPv>

080a19a8 <_ZnajRKSt9nothrow_t>:
 80a19a8:	f7fe bb75 	b.w	80a0096 <_Znaj>

080a19ac <atexit>:
 80a19ac:	2300      	movs	r3, #0
 80a19ae:	4601      	mov	r1, r0
 80a19b0:	461a      	mov	r2, r3
 80a19b2:	4618      	mov	r0, r3
 80a19b4:	f000 b842 	b.w	80a1a3c <__register_exitproc>

080a19b8 <memcpy>:
 80a19b8:	440a      	add	r2, r1
 80a19ba:	4291      	cmp	r1, r2
 80a19bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a19c0:	d100      	bne.n	80a19c4 <memcpy+0xc>
 80a19c2:	4770      	bx	lr
 80a19c4:	b510      	push	{r4, lr}
 80a19c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a19ca:	4291      	cmp	r1, r2
 80a19cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a19d0:	d1f9      	bne.n	80a19c6 <memcpy+0xe>
 80a19d2:	bd10      	pop	{r4, pc}

080a19d4 <memset>:
 80a19d4:	4603      	mov	r3, r0
 80a19d6:	4402      	add	r2, r0
 80a19d8:	4293      	cmp	r3, r2
 80a19da:	d100      	bne.n	80a19de <memset+0xa>
 80a19dc:	4770      	bx	lr
 80a19de:	f803 1b01 	strb.w	r1, [r3], #1
 80a19e2:	e7f9      	b.n	80a19d8 <memset+0x4>

080a19e4 <srand>:
 80a19e4:	b538      	push	{r3, r4, r5, lr}
 80a19e6:	4b0d      	ldr	r3, [pc, #52]	; (80a1a1c <srand+0x38>)
 80a19e8:	4604      	mov	r4, r0
 80a19ea:	681d      	ldr	r5, [r3, #0]
 80a19ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a19ee:	b97b      	cbnz	r3, 80a1a10 <srand+0x2c>
 80a19f0:	2018      	movs	r0, #24
 80a19f2:	f7ff fa13 	bl	80a0e1c <malloc>
 80a19f6:	4a0a      	ldr	r2, [pc, #40]	; (80a1a20 <srand+0x3c>)
 80a19f8:	4b0a      	ldr	r3, [pc, #40]	; (80a1a24 <srand+0x40>)
 80a19fa:	63a8      	str	r0, [r5, #56]	; 0x38
 80a19fc:	e9c0 2300 	strd	r2, r3, [r0]
 80a1a00:	4b09      	ldr	r3, [pc, #36]	; (80a1a28 <srand+0x44>)
 80a1a02:	2201      	movs	r2, #1
 80a1a04:	6083      	str	r3, [r0, #8]
 80a1a06:	230b      	movs	r3, #11
 80a1a08:	8183      	strh	r3, [r0, #12]
 80a1a0a:	2300      	movs	r3, #0
 80a1a0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1a10:	2200      	movs	r2, #0
 80a1a12:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1a14:	611c      	str	r4, [r3, #16]
 80a1a16:	615a      	str	r2, [r3, #20]
 80a1a18:	bd38      	pop	{r3, r4, r5, pc}
 80a1a1a:	bf00      	nop
 80a1a1c:	20000004 	.word	0x20000004
 80a1a20:	abcd330e 	.word	0xabcd330e
 80a1a24:	e66d1234 	.word	0xe66d1234
 80a1a28:	0005deec 	.word	0x0005deec

080a1a2c <strlen>:
 80a1a2c:	4603      	mov	r3, r0
 80a1a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1a32:	2a00      	cmp	r2, #0
 80a1a34:	d1fb      	bne.n	80a1a2e <strlen+0x2>
 80a1a36:	1a18      	subs	r0, r3, r0
 80a1a38:	3801      	subs	r0, #1
 80a1a3a:	4770      	bx	lr

080a1a3c <__register_exitproc>:
 80a1a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1a40:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a1b00 <__register_exitproc+0xc4>
 80a1a44:	4606      	mov	r6, r0
 80a1a46:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a4a:	461f      	mov	r7, r3
 80a1a4c:	460d      	mov	r5, r1
 80a1a4e:	4691      	mov	r9, r2
 80a1a50:	f000 f858 	bl	80a1b04 <__retarget_lock_acquire_recursive>
 80a1a54:	4b26      	ldr	r3, [pc, #152]	; (80a1af0 <__register_exitproc+0xb4>)
 80a1a56:	681c      	ldr	r4, [r3, #0]
 80a1a58:	b934      	cbnz	r4, 80a1a68 <__register_exitproc+0x2c>
 80a1a5a:	4c26      	ldr	r4, [pc, #152]	; (80a1af4 <__register_exitproc+0xb8>)
 80a1a5c:	601c      	str	r4, [r3, #0]
 80a1a5e:	4b26      	ldr	r3, [pc, #152]	; (80a1af8 <__register_exitproc+0xbc>)
 80a1a60:	b113      	cbz	r3, 80a1a68 <__register_exitproc+0x2c>
 80a1a62:	681b      	ldr	r3, [r3, #0]
 80a1a64:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1a68:	6863      	ldr	r3, [r4, #4]
 80a1a6a:	2b1f      	cmp	r3, #31
 80a1a6c:	dd07      	ble.n	80a1a7e <__register_exitproc+0x42>
 80a1a6e:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a72:	f000 f849 	bl	80a1b08 <__retarget_lock_release_recursive>
 80a1a76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1a7e:	b35e      	cbz	r6, 80a1ad8 <__register_exitproc+0x9c>
 80a1a80:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a1a84:	b988      	cbnz	r0, 80a1aaa <__register_exitproc+0x6e>
 80a1a86:	4b1d      	ldr	r3, [pc, #116]	; (80a1afc <__register_exitproc+0xc0>)
 80a1a88:	b923      	cbnz	r3, 80a1a94 <__register_exitproc+0x58>
 80a1a8a:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a8e:	f000 f83a 	bl	80a1b06 <__retarget_lock_release>
 80a1a92:	e7f0      	b.n	80a1a76 <__register_exitproc+0x3a>
 80a1a94:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1a98:	f7ff f9c0 	bl	80a0e1c <malloc>
 80a1a9c:	2800      	cmp	r0, #0
 80a1a9e:	d0f4      	beq.n	80a1a8a <__register_exitproc+0x4e>
 80a1aa0:	2300      	movs	r3, #0
 80a1aa2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a1aa6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a1aaa:	2201      	movs	r2, #1
 80a1aac:	6863      	ldr	r3, [r4, #4]
 80a1aae:	2e02      	cmp	r6, #2
 80a1ab0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a1ab4:	fa02 f203 	lsl.w	r2, r2, r3
 80a1ab8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1abc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1ac0:	ea43 0302 	orr.w	r3, r3, r2
 80a1ac4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1ac8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1acc:	bf02      	ittt	eq
 80a1ace:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a1ad2:	431a      	orreq	r2, r3
 80a1ad4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a1ad8:	6863      	ldr	r3, [r4, #4]
 80a1ada:	f8d8 0000 	ldr.w	r0, [r8]
 80a1ade:	1c5a      	adds	r2, r3, #1
 80a1ae0:	3302      	adds	r3, #2
 80a1ae2:	6062      	str	r2, [r4, #4]
 80a1ae4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a1ae8:	f000 f80e 	bl	80a1b08 <__retarget_lock_release_recursive>
 80a1aec:	2000      	movs	r0, #0
 80a1aee:	e7c4      	b.n	80a1a7a <__register_exitproc+0x3e>
 80a1af0:	20000a74 	.word	0x20000a74
 80a1af4:	200009e8 	.word	0x200009e8
 80a1af8:	00000000 	.word	0x00000000
 80a1afc:	080a0e1d 	.word	0x080a0e1d
 80a1b00:	20000068 	.word	0x20000068

080a1b04 <__retarget_lock_acquire_recursive>:
 80a1b04:	4770      	bx	lr

080a1b06 <__retarget_lock_release>:
 80a1b06:	4770      	bx	lr

080a1b08 <__retarget_lock_release_recursive>:
 80a1b08:	4770      	bx	lr

080a1b0a <link_code_end>:
	...

080a1b0c <dynalib_user>:
 80a1b0c:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a1b1c:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
 80a1b2c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
 80a1b3c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
 80a1b4c:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
 80a1b5c:	4f4d 4544 7525 003e 4453 4320 7261 2064     MODE%u>.SD Card 
 80a1b6c:	7349 4f20 2e4b 5300 2044 6143 6472 4520     Is OK..SD Card E
 80a1b7c:	5252 524f 002e 0000                         RROR....

080a1b84 <_ZTVN8particle11SPISettingsE>:
	...
 80a1b8c:	00ed 080a 00af 080a 00b1 080a               ............

080a1b98 <_ZTV7TwoWire>:
	...
 80a1ba0:	0e63 080a 0ead 080a 0e85 080a 0e65 080a     c...........e...
 80a1bb0:	0e8d 080a 0e95 080a 0e9d 080a 0ea5 080a     ................

080a1bc0 <_ZTV9IPAddress>:
	...
 80a1bc8:	0ef1 080a 0ee1 080a 0ee3 080a 7061 0070     ............app.

080a1bd8 <_ZTVN5spark12NetworkClassE>:
	...
 80a1be0:	0fb9 080a 0fc3 080a 0fcd 080a 0fd7 080a     ................
 80a1bf0:	0fe1 080a 0fed 080a 0ff9 080a 1001 080a     ................
 80a1c00:	1009 080a 1015 080a 101d 080a 1027 080a     ............'...
 80a1c10:	1031 080a                                   1...

080a1c14 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a1c14:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 80a1c24:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a1c34:	6d69 0065                                   ime.

080a1c38 <_ZTV11USARTSerial>:
	...
 80a1c40:	138d 080a 13f7 080a 13d3 080a 1095 080a     ................
 80a1c50:	13a3 080a 13bf 080a 13b1 080a 13cd 080a     ................
 80a1c60:	138f 080a 1395 080a                         ........

080a1c68 <_ZTV9USBSerial>:
	...
 80a1c70:	147f 080a 14e5 080a 14bd 080a 1095 080a     ................
 80a1c80:	14af 080a 1481 080a 1491 080a 14df 080a     ................
 80a1c90:	14a1 080a 1479 080a                         ....y...

080a1c98 <_ZTVN5spark9WiFiClassE>:
	...
 80a1ca0:	16a7 080a 169d 080a 1693 080a 1605 080a     ................
 80a1cb0:	1687 080a 167b 080a 0ff9 080a 1001 080a     ....{...........
 80a1cc0:	166f 080a 1667 080a 165d 080a 1653 080a     o...g...]...S...
 80a1cd0:	160f 080a                                   ....

080a1cd4 <_ZSt7nothrow>:
	...

080a1cd5 <link_const_variable_data_end>:
 80a1cd5:	00          	.byte	0x00
	...

080a1cd8 <link_constructors_location>:
 80a1cd8:	080a02b9 	.word	0x080a02b9
 80a1cdc:	080a0fa9 	.word	0x080a0fa9
 80a1ce0:	080a1081 	.word	0x080a1081
 80a1ce4:	080a11c9 	.word	0x080a11c9
 80a1ce8:	080a1355 	.word	0x080a1355
 80a1cec:	080a1379 	.word	0x080a1379
 80a1cf0:	080a16b1 	.word	0x080a16b1
 80a1cf4:	080a1989 	.word	0x080a1989

080a1cf8 <link_constructors_end>:
	...
