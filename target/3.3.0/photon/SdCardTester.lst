
/Users/hillelvidal/Library/Coding/ScanIn_Photons/SdCardTester/target/3.3.0/photon/SdCardTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002de4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2e00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a2e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000630  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2e74  080a2e74  00022e74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2e9c  080a2e9c  00022e9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f7d9e  00000000  00000000  00022ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000140e9  00000000  00000000  0011ac3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001c495  00000000  00000000  0012ed27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000021d8  00000000  00000000  0014b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005480  00000000  00000000  0014d394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030463  00000000  00000000  00152814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00039df9  00000000  00000000  00182c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b8bfb  00000000  00000000  001bca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000564c  00000000  00000000  0027566c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fca9 	bl	80a2984 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fcb1 	bl	80a29a0 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2e04 	.word	0x080a2e04
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	2000069d 	.word	0x2000069d
 80a0058:	2000069d 	.word	0x2000069d

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fb49 	bl	80a26f4 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a2ddc 	.word	0x080a2ddc
 80a0080:	080a2dfc 	.word	0x080a2dfc

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b8de 	b.w	80a0244 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f97b 	bl	80a0384 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 bae7 	b.w	80a2664 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f001 be89 	b.w	80a1dac <malloc>

080a009a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009a:	f001 be8f 	b.w	80a1dbc <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 80a00ae:	4770      	bx	lr

080a00b0 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 80a00b2:	b510      	push	{r4, lr}
 80a00b4:	4604      	mov	r4, r0
  }
 80a00b6:	2110      	movs	r1, #16
 80a00b8:	f7ff ffef 	bl	80a009a <_ZdlPvj>
 80a00bc:	4620      	mov	r0, r4
 80a00be:	bd10      	pop	{r4, pc}

080a00c0 <_ZN6SdFileD0Ev>:
 80a00c0:	b510      	push	{r4, lr}
 80a00c2:	4604      	mov	r4, r0
 80a00c4:	212c      	movs	r1, #44	; 0x2c
 80a00c6:	f7ff ffe8 	bl	80a009a <_ZdlPvj>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
	...

080a00d0 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a00d0:	4b02      	ldr	r3, [pc, #8]	; (80a00dc <__tcf_0+0xc>)
 80a00d2:	6898      	ldr	r0, [r3, #8]
 80a00d4:	b108      	cbz	r0, 80a00da <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a00d6:	f001 bc6b 	b.w	80a19b0 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a00da:	4770      	bx	lr
 80a00dc:	20000074 	.word	0x20000074

080a00e0 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 80a00e0:	3008      	adds	r0, #8
 80a00e2:	f000 bc07 	b.w	80a08f4 <_ZN7FatFile5writeEPKvj>

080a00e6 <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
 80a00e6:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 80a00e8:	2201      	movs	r2, #1
 80a00ea:	f88d 1007 	strb.w	r1, [sp, #7]
 80a00ee:	3008      	adds	r0, #8
 80a00f0:	f10d 0107 	add.w	r1, sp, #7
 80a00f4:	f000 fbfe 	bl	80a08f4 <_ZN7FatFile5writeEPKvj>
  }
 80a00f8:	b003      	add	sp, #12
 80a00fa:	f85d fb04 	ldr.w	pc, [sp], #4

080a00fe <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a00fe:	b40e      	push	{r1, r2, r3}
 80a0100:	b503      	push	{r0, r1, lr}
 80a0102:	ab03      	add	r3, sp, #12
 80a0104:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80a0108:	2100      	movs	r1, #0
        va_start(args, format);
 80a010a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a010c:	f001 ffe2 	bl	80a20d4 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a0110:	b002      	add	sp, #8
 80a0112:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0116:	b003      	add	sp, #12
 80a0118:	4770      	bx	lr
	...

080a011c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a011c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a011e:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 80a0120:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 80a0122:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 80a0124:	68a3      	ldr	r3, [r4, #8]
 80a0126:	b132      	cbz	r2, 80a0136 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 80a0128:	b9a3      	cbnz	r3, 80a0154 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 80a012a:	490b      	ldr	r1, [pc, #44]	; (80a0158 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 80a012c:	b002      	add	sp, #8
 80a012e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 80a0132:	f001 bf95 	b.w	80a2060 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0136:	4a09      	ldr	r2, [pc, #36]	; (80a015c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 80a0138:	7b26      	ldrb	r6, [r4, #12]
 80a013a:	4d09      	ldr	r5, [pc, #36]	; (80a0160 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 80a013c:	4909      	ldr	r1, [pc, #36]	; (80a0164 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 80a013e:	7b64      	ldrb	r4, [r4, #13]
 80a0140:	2e01      	cmp	r6, #1
 80a0142:	bf18      	it	ne
 80a0144:	4629      	movne	r1, r5
 80a0146:	e9cd 1400 	strd	r1, r4, [sp]
 80a014a:	4907      	ldr	r1, [pc, #28]	; (80a0168 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 80a014c:	f7ff ffd7 	bl	80a00fe <_ZN5Print6printfEPKcz>
  }
 80a0150:	b002      	add	sp, #8
 80a0152:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0154:	4a05      	ldr	r2, [pc, #20]	; (80a016c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 80a0156:	e7ef      	b.n	80a0138 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 80a0158:	080a2b11 	.word	0x080a2b11
 80a015c:	080a2b08 	.word	0x080a2b08
 80a0160:	080a2b0d 	.word	0x080a2b0d
 80a0164:	080a2b09 	.word	0x080a2b09
 80a0168:	080a2b27 	.word	0x080a2b27
 80a016c:	080a2b00 	.word	0x080a2b00

080a0170 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0170:	b40e      	push	{r1, r2, r3}
 80a0172:	b503      	push	{r0, r1, lr}
 80a0174:	ab03      	add	r3, sp, #12
 80a0176:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80a017a:	2101      	movs	r1, #1
        va_start(args, format);
 80a017c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80a017e:	f001 ffa9 	bl	80a20d4 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a0182:	b002      	add	sp, #8
 80a0184:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0188:	b003      	add	sp, #12
 80a018a:	4770      	bx	lr

080a018c <_ZN5SdFatC1Ev>:
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80a018c:	2264      	movs	r2, #100	; 0x64
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
 public:
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  SdFat() {
 80a018e:	b570      	push	{r4, r5, r6, lr}
 80a0190:	f880 2460 	strb.w	r2, [r0, #1120]	; 0x460
  {
 80a0194:	4a15      	ldr	r2, [pc, #84]	; (80a01ec <_ZN5SdFatC1Ev+0x60>)
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80a0196:	2300      	movs	r3, #0
 80a0198:	f8c0 2470 	str.w	r2, [r0, #1136]	; 0x470
 80a019c:	2201      	movs	r2, #1
 80a019e:	4e14      	ldr	r6, [pc, #80]	; (80a01f0 <_ZN5SdFatC1Ev+0x64>)
 80a01a0:	71c3      	strb	r3, [r0, #7]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a01a2:	f8a0 343c 	strh.w	r3, [r0, #1084]	; 0x43c
 80a01a6:	f880 346a 	strb.w	r3, [r0, #1130]	; 0x46a
 80a01aa:	f880 2474 	strb.w	r2, [r0, #1140]	; 0x474
 80a01ae:	f8c0 3478 	str.w	r3, [r0, #1144]	; 0x478
 80a01b2:	f8a0 347c 	strh.w	r3, [r0, #1148]	; 0x47c
 80a01b6:	7831      	ldrb	r1, [r6, #0]
 80a01b8:	4604      	mov	r4, r0
 80a01ba:	ea11 0502 	ands.w	r5, r1, r2
 80a01be:	f3bf 8f5b 	dmb	ish
 80a01c2:	d10d      	bne.n	80a01e0 <_ZN5SdFatC1Ev+0x54>
 80a01c4:	4630      	mov	r0, r6
 80a01c6:	f7ff ff6a 	bl	80a009e <__cxa_guard_acquire>
 80a01ca:	b148      	cbz	r0, 80a01e0 <_ZN5SdFatC1Ev+0x54>
 80a01cc:	4629      	mov	r1, r5
 80a01ce:	4809      	ldr	r0, [pc, #36]	; (80a01f4 <_ZN5SdFatC1Ev+0x68>)
 80a01d0:	f001 ffde 	bl	80a2190 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a01d4:	4630      	mov	r0, r6
 80a01d6:	f7ff ff67 	bl	80a00a8 <__cxa_guard_release>
 80a01da:	4807      	ldr	r0, [pc, #28]	; (80a01f8 <_ZN5SdFatC1Ev+0x6c>)
 80a01dc:	f002 fbbc 	bl	80a2958 <atexit>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 80a01e0:	4b04      	ldr	r3, [pc, #16]	; (80a01f4 <_ZN5SdFatC1Ev+0x68>)
    m_spi.setPort(nullptr);
  }
 80a01e2:	4620      	mov	r0, r4
 80a01e4:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
 80a01e8:	bd70      	pop	{r4, r5, r6, pc}
 80a01ea:	bf00      	nop
 80a01ec:	080a2c08 	.word	0x080a2c08
 80a01f0:	20000070 	.word	0x20000070
 80a01f4:	20000074 	.word	0x20000074
 80a01f8:	080a00d1 	.word	0x080a00d1

080a01fc <_Z2onv>:
SdFile file;
bool IsOk;
int iSD_CARD_RELAY_PIN = WKP;

void on()
{
 80a01fc:	b508      	push	{r3, lr}
  Serial.println("SD Relay ON");
 80a01fe:	f002 f94b 	bl	80a2498 <_Z16_fetch_usbserialv>
 80a0202:	4905      	ldr	r1, [pc, #20]	; (80a0218 <_Z2onv+0x1c>)
 80a0204:	f001 ff3f 	bl	80a2086 <_ZN5Print7printlnEPKc>
  digitalWrite(iSD_CARD_RELAY_PIN, HIGH);
 80a0208:	4b04      	ldr	r3, [pc, #16]	; (80a021c <_Z2onv+0x20>)
 80a020a:	2101      	movs	r1, #1
 80a020c:	8818      	ldrh	r0, [r3, #0]
}
 80a020e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(iSD_CARD_RELAY_PIN, HIGH);
 80a0212:	f002 bafc 	b.w	80a280e <digitalWrite>
 80a0216:	bf00      	nop
 80a0218:	080a2b44 	.word	0x080a2b44
 80a021c:	20000000 	.word	0x20000000

080a0220 <_Z3offv>:

void off()
{
 80a0220:	b508      	push	{r3, lr}
  Serial.println("SD Relay OFF");
 80a0222:	f002 f939 	bl	80a2498 <_Z16_fetch_usbserialv>
 80a0226:	4905      	ldr	r1, [pc, #20]	; (80a023c <_Z3offv+0x1c>)
 80a0228:	f001 ff2d 	bl	80a2086 <_ZN5Print7printlnEPKc>
  digitalWrite(iSD_CARD_RELAY_PIN, LOW);
 80a022c:	4b04      	ldr	r3, [pc, #16]	; (80a0240 <_Z3offv+0x20>)
 80a022e:	2100      	movs	r1, #0
 80a0230:	8818      	ldrh	r0, [r3, #0]
}
 80a0232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(iSD_CARD_RELAY_PIN, LOW);
 80a0236:	f002 baea 	b.w	80a280e <digitalWrite>
 80a023a:	bf00      	nop
 80a023c:	080a2b50 	.word	0x080a2b50
 80a0240:	20000000 	.word	0x20000000

080a0244 <setup>:

// setup() runs once, when the device is first turned on.
void setup()
{
 80a0244:	b508      	push	{r3, lr}
  pinMode(iSD_CARD_RELAY_PIN, OUTPUT);
 80a0246:	4b05      	ldr	r3, [pc, #20]	; (80a025c <setup+0x18>)
 80a0248:	2101      	movs	r1, #1
 80a024a:	8818      	ldrh	r0, [r3, #0]
 80a024c:	f002 face 	bl	80a27ec <pinMode>
  RGB.control(true);
}
 80a0250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RGB.control(true);
 80a0254:	2001      	movs	r0, #1
 80a0256:	f001 bf6e 	b.w	80a2136 <_ZN8RGBClass7controlEb>
 80a025a:	bf00      	nop
 80a025c:	20000000 	.word	0x20000000

080a0260 <_Z5checkv>:

bool check()
{
 80a0260:	b5f0      	push	{r4, r5, r6, r7, lr}
class SPISettings : public Printable {
 80a0262:	4b35      	ldr	r3, [pc, #212]	; (80a0338 <_Z5checkv+0xd8>)
 80a0264:	b085      	sub	sp, #20
 80a0266:	9300      	str	r3, [sp, #0]
 80a0268:	2300      	movs	r3, #0
 80a026a:	2601      	movs	r6, #1
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80a026c:	4c33      	ldr	r4, [pc, #204]	; (80a033c <_Z5checkv+0xdc>)
 80a026e:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0272:	4b33      	ldr	r3, [pc, #204]	; (80a0340 <_Z5checkv+0xe0>)
 80a0274:	f504 678c 	add.w	r7, r4, #1120	; 0x460
 80a0278:	9302      	str	r3, [sp, #8]
 80a027a:	220c      	movs	r2, #12
 80a027c:	466b      	mov	r3, sp
 80a027e:	4638      	mov	r0, r7
 80a0280:	f204 416c 	addw	r1, r4, #1132	; 0x46c
 80a0284:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a0288:	f001 f976 	bl	80a1578 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
 80a028c:	4d2d      	ldr	r5, [pc, #180]	; (80a0344 <_Z5checkv+0xe4>)
 80a028e:	b378      	cbz	r0, 80a02f0 <_Z5checkv+0x90>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 80a0290:	6027      	str	r7, [r4, #0]
    vwd()->close();
 80a0292:	f204 403c 	addw	r0, r4, #1084	; 0x43c
 80a0296:	f000 fad9 	bl	80a084c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 80a029a:	4631      	mov	r1, r6
 80a029c:	4620      	mov	r0, r4
 80a029e:	f001 f816 	bl	80a12ce <_ZN9FatVolume4initEh>
 80a02a2:	f204 463c 	addw	r6, r4, #1084	; 0x43c
 80a02a6:	4601      	mov	r1, r0
 80a02a8:	b1e8      	cbz	r0, 80a02e6 <_Z5checkv+0x86>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 80a02aa:	4924      	ldr	r1, [pc, #144]	; (80a033c <_Z5checkv+0xdc>)
 80a02ac:	f201 403c 	addw	r0, r1, #1084	; 0x43c
 80a02b0:	f000 f915 	bl	80a04de <_ZN7FatFile8openRootEP9FatVolume>
 80a02b4:	b1e0      	cbz	r0, 80a02f0 <_Z5checkv+0x90>
    if (!dir->isDir()) {
 80a02b6:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 80a02ba:	f013 0f70 	tst.w	r3, #112	; 0x70
 80a02be:	d017      	beq.n	80a02f0 <_Z5checkv+0x90>
    m_cwd = dir;
 80a02c0:	4b21      	ldr	r3, [pc, #132]	; (80a0348 <_Z5checkv+0xe8>)
    return open(m_cwd, path, oflag);
 80a02c2:	4a22      	ldr	r2, [pc, #136]	; (80a034c <_Z5checkv+0xec>)
    m_cwd = dir;
 80a02c4:	601e      	str	r6, [r3, #0]
  IsOk = sd.begin(A2, SPI_SPEED);
 80a02c6:	2301      	movs	r3, #1
    return open(m_cwd, path, oflag);
 80a02c8:	4921      	ldr	r1, [pc, #132]	; (80a0350 <_Z5checkv+0xf0>)
 80a02ca:	702b      	strb	r3, [r5, #0]
 80a02cc:	4821      	ldr	r0, [pc, #132]	; (80a0354 <_Z5checkv+0xf4>)
 80a02ce:	f240 2309 	movw	r3, #521	; 0x209
 80a02d2:	f000 fac2 	bl	80a085a <_ZN7FatFile4openEPS_PKci>
  {
    Serial.printlnf("SD Card ERROR: Begin Failed");
    return false;
  }

  if (!file.open("check.txt", O_CREAT | O_WRITE | O_APPEND))
 80a02d6:	4604      	mov	r4, r0
 80a02d8:	b9a0      	cbnz	r0, 80a0304 <_Z5checkv+0xa4>
  {
    Serial.println("Sd Card ERROR: Error openning file");
 80a02da:	f002 f8dd 	bl	80a2498 <_Z16_fetch_usbserialv>
 80a02de:	491e      	ldr	r1, [pc, #120]	; (80a0358 <_Z5checkv+0xf8>)
  // close file
  if (file.close())
    Serial.println("Log file closed.");
  else
  {
    Serial.println("Sd Card ERROR: file failed to be closed.");
 80a02e0:	f001 fed1 	bl	80a2086 <_ZN5Print7printlnEPKc>
    return false;
 80a02e4:	e00b      	b.n	80a02fe <_Z5checkv+0x9e>
    return (part ? init(part) : init(1) || init(0))
 80a02e6:	4620      	mov	r0, r4
 80a02e8:	f000 fff1 	bl	80a12ce <_ZN9FatVolume4initEh>
 80a02ec:	2800      	cmp	r0, #0
 80a02ee:	d1dc      	bne.n	80a02aa <_Z5checkv+0x4a>
  IsOk = sd.begin(A2, SPI_SPEED);
 80a02f0:	2400      	movs	r4, #0
 80a02f2:	702c      	strb	r4, [r5, #0]
    Serial.printlnf("SD Card ERROR: Begin Failed");
 80a02f4:	f002 f8d0 	bl	80a2498 <_Z16_fetch_usbserialv>
 80a02f8:	4918      	ldr	r1, [pc, #96]	; (80a035c <_Z5checkv+0xfc>)
 80a02fa:	f7ff ff39 	bl	80a0170 <_ZN5Print8printlnfEPKcz>
  }

  Serial.printlnf("SD Card Is OK.");
  return IsOk;
}
 80a02fe:	4620      	mov	r0, r4
 80a0300:	b005      	add	sp, #20
 80a0302:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Serial.println("Log file opened!");
 80a0304:	f002 f8c8 	bl	80a2498 <_Z16_fetch_usbserialv>
 80a0308:	4915      	ldr	r1, [pc, #84]	; (80a0360 <_Z5checkv+0x100>)
 80a030a:	f001 febc 	bl	80a2086 <_ZN5Print7printlnEPKc>
  if (file.close())
 80a030e:	4811      	ldr	r0, [pc, #68]	; (80a0354 <_Z5checkv+0xf4>)
 80a0310:	f000 fa9c 	bl	80a084c <_ZN7FatFile5closeEv>
 80a0314:	4604      	mov	r4, r0
 80a0316:	b158      	cbz	r0, 80a0330 <_Z5checkv+0xd0>
    Serial.println("Log file closed.");
 80a0318:	f002 f8be 	bl	80a2498 <_Z16_fetch_usbserialv>
 80a031c:	4911      	ldr	r1, [pc, #68]	; (80a0364 <_Z5checkv+0x104>)
 80a031e:	f001 feb2 	bl	80a2086 <_ZN5Print7printlnEPKc>
  Serial.printlnf("SD Card Is OK.");
 80a0322:	f002 f8b9 	bl	80a2498 <_Z16_fetch_usbserialv>
 80a0326:	4910      	ldr	r1, [pc, #64]	; (80a0368 <_Z5checkv+0x108>)
 80a0328:	f7ff ff22 	bl	80a0170 <_ZN5Print8printlnfEPKcz>
  return IsOk;
 80a032c:	782c      	ldrb	r4, [r5, #0]
 80a032e:	e7e6      	b.n	80a02fe <_Z5checkv+0x9e>
    Serial.println("Sd Card ERROR: file failed to be closed.");
 80a0330:	f002 f8b2 	bl	80a2498 <_Z16_fetch_usbserialv>
 80a0334:	490d      	ldr	r1, [pc, #52]	; (80a036c <_Z5checkv+0x10c>)
 80a0336:	e7d3      	b.n	80a02e0 <_Z5checkv+0x80>
 80a0338:	080a2c08 	.word	0x080a2c08
 80a033c:	200000bc 	.word	0x200000bc
 80a0340:	003d0900 	.word	0x003d0900
 80a0344:	20000080 	.word	0x20000080
 80a0348:	20000544 	.word	0x20000544
 80a034c:	080a2b5d 	.word	0x080a2b5d
 80a0350:	200004f8 	.word	0x200004f8
 80a0354:	20000098 	.word	0x20000098
 80a0358:	080a2b83 	.word	0x080a2b83
 80a035c:	080a2b67 	.word	0x080a2b67
 80a0360:	080a2ba6 	.word	0x080a2ba6
 80a0364:	080a2bb7 	.word	0x080a2bb7
 80a0368:	080a2bc8 	.word	0x080a2bc8
 80a036c:	080a2bd7 	.word	0x080a2bd7

080a0370 <_Z8indicateb>:
  delay(500);
}

void indicate(bool ok)
{
  if (ok)
 80a0370:	4602      	mov	r2, r0
 80a0372:	b120      	cbz	r0, 80a037e <_Z8indicateb+0xe>
    RGB.color(0, 255, 0);
 80a0374:	2200      	movs	r2, #0
 80a0376:	21ff      	movs	r1, #255	; 0xff
 80a0378:	4610      	mov	r0, r2
  else
    RGB.color(255, 0, 0);
 80a037a:	f001 beec 	b.w	80a2156 <_ZN8RGBClass5colorEiii>
 80a037e:	4601      	mov	r1, r0
 80a0380:	20ff      	movs	r0, #255	; 0xff
 80a0382:	e7fa      	b.n	80a037a <_Z8indicateb+0xa>

080a0384 <loop>:
{
 80a0384:	b508      	push	{r3, lr}
  on();
 80a0386:	f7ff ff39 	bl	80a01fc <_Z2onv>
  indicate(check());
 80a038a:	f7ff ff69 	bl	80a0260 <_Z5checkv>
 80a038e:	f7ff ffef 	bl	80a0370 <_Z8indicateb>
  off();
 80a0392:	f7ff ff45 	bl	80a0220 <_Z3offv>
}
 80a0396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(500);
 80a039a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a039e:	f001 bd2d 	b.w	80a1dfc <delay>
	...

080a03a4 <_GLOBAL__sub_I_SystemMode>:
 80a03a4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a03a6:	2400      	movs	r4, #0
SYSTEM_THREAD(ENABLED);
 80a03a8:	2100      	movs	r1, #0
 80a03aa:	2001      	movs	r0, #1
 80a03ac:	f001 fc72 	bl	80a1c94 <system_thread_set_state>
 80a03b0:	4b08      	ldr	r3, [pc, #32]	; (80a03d4 <_GLOBAL__sub_I_SystemMode+0x30>)
    SleepResult() {}
 80a03b2:	4a09      	ldr	r2, [pc, #36]	; (80a03d8 <_GLOBAL__sub_I_SystemMode+0x34>)
              error_(SYSTEM_ERROR_NONE) {
 80a03b4:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 80a03b8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a03ba:	2002      	movs	r0, #2
 80a03bc:	f001 fc5a 	bl	80a1c74 <set_system_mode>
SdFat sd;
 80a03c0:	4806      	ldr	r0, [pc, #24]	; (80a03dc <_GLOBAL__sub_I_SystemMode+0x38>)
 80a03c2:	f7ff fee3 	bl	80a018c <_ZN5SdFatC1Ev>
    Print() : write_error(0) {}
 80a03c6:	4b06      	ldr	r3, [pc, #24]	; (80a03e0 <_GLOBAL__sub_I_SystemMode+0x3c>)
  SdFile() {}
 80a03c8:	4a06      	ldr	r2, [pc, #24]	; (80a03e4 <_GLOBAL__sub_I_SystemMode+0x40>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a03ca:	e9c3 4401 	strd	r4, r4, [r3, #4]
 80a03ce:	601a      	str	r2, [r3, #0]
 80a03d0:	bd10      	pop	{r4, pc}
 80a03d2:	bf00      	nop
 80a03d4:	20000084 	.word	0x20000084
 80a03d8:	ffff0000 	.word	0xffff0000
 80a03dc:	200000bc 	.word	0x200000bc
 80a03e0:	20000090 	.word	0x20000090
 80a03e4:	080a2c1c 	.word	0x080a2c1c

080a03e8 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80a03e8:	b538      	push	{r3, r4, r5, lr}
 80a03ea:	460d      	mov	r5, r1
 80a03ec:	4604      	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 80a03ee:	2224      	movs	r2, #36	; 0x24
 80a03f0:	2100      	movs	r1, #0
 80a03f2:	f002 fad5 	bl	80a29a0 <memset>

  m_vol = vol;
 80a03f6:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
 80a03f8:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
 80a03fa:	2b10      	cmp	r3, #16
 80a03fc:	d003      	beq.n	80a0406 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
 80a03fe:	2b20      	cmp	r3, #32
 80a0400:	d006      	beq.n	80a0410 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
 80a0402:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
 80a0404:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
 80a0406:	2320      	movs	r3, #32
  m_flags = F_READ;
 80a0408:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
 80a040a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
 80a040c:	70a0      	strb	r0, [r4, #2]
  return true;
 80a040e:	e7f9      	b.n	80a0404 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
 80a0410:	2340      	movs	r3, #64	; 0x40
 80a0412:	e7f9      	b.n	80a0408 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

080a0414 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80a0414:	b510      	push	{r4, lr}
 80a0416:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 80a0418:	3024      	adds	r0, #36	; 0x24
 80a041a:	f000 fe4b 	bl	80a10b4 <_ZN8FatCache4syncEv>
 80a041e:	b128      	cbz	r0, 80a042c <_ZN9FatVolume9cacheSyncEv+0x18>
 80a0420:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 80a0424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 80a0428:	f000 be44 	b.w	80a10b4 <_ZN8FatCache4syncEv>
  }
 80a042c:	bd10      	pop	{r4, pc}

080a042e <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
 80a042e:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80a0430:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 80a0432:	f043 0304 	orr.w	r3, r3, #4
 80a0436:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80a0438:	f100 0210 	add.w	r2, r0, #16
 80a043c:	6880      	ldr	r0, [r0, #8]
 80a043e:	f000 beee 	b.w	80a121e <_ZN9FatVolume15allocateClusterEmPm>
	...

080a0444 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
 80a0444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
 80a0448:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 80a044a:	4604      	mov	r4, r0
  if (isRootFixed()) {
 80a044c:	f011 0520 	ands.w	r5, r1, #32
 80a0450:	d003      	beq.n	80a045a <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
 80a0452:	2600      	movs	r6, #0
}
 80a0454:	4630      	mov	r0, r6
 80a0456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 80a045a:	6942      	ldr	r2, [r0, #20]
 80a045c:	4b17      	ldr	r3, [pc, #92]	; (80a04bc <_ZN7FatFile13addDirClusterEv+0x78>)
 80a045e:	429a      	cmp	r2, r3
 80a0460:	d2f7      	bcs.n	80a0452 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 80a0462:	f7ff ffe4 	bl	80a042e <_ZN7FatFile10addClusterEv>
 80a0466:	4606      	mov	r6, r0
 80a0468:	2800      	cmp	r0, #0
 80a046a:	d0f2      	beq.n	80a0452 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
 80a046c:	6921      	ldr	r1, [r4, #16]
 80a046e:	68a0      	ldr	r0, [r4, #8]
 80a0470:	f000 fe6a 	bl	80a1148 <_ZNK9FatVolume17clusterFirstBlockEm>
 80a0474:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a0476:	68a0      	ldr	r0, [r4, #8]
 80a0478:	2205      	movs	r2, #5
 80a047a:	4639      	mov	r1, r7
 80a047c:	3024      	adds	r0, #36	; 0x24
 80a047e:	f000 fe40 	bl	80a1102 <_ZN8FatCache4readEmh>
  if (!pc) {
 80a0482:	4680      	mov	r8, r0
 80a0484:	2800      	cmp	r0, #0
 80a0486:	d0e4      	beq.n	80a0452 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 80a0488:	4629      	mov	r1, r5
 80a048a:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a048e:	f002 fa87 	bl	80a29a0 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80a0492:	2501      	movs	r5, #1
 80a0494:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
 80a0496:	791a      	ldrb	r2, [r3, #4]
 80a0498:	42aa      	cmp	r2, r5
 80a049a:	d909      	bls.n	80a04b0 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
 80a049c:	4642      	mov	r2, r8
 80a049e:	6818      	ldr	r0, [r3, #0]
 80a04a0:	19e9      	adds	r1, r5, r7
 80a04a2:	f001 f99c 	bl	80a17de <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80a04a6:	2800      	cmp	r0, #0
 80a04a8:	d0d3      	beq.n	80a0452 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80a04aa:	3501      	adds	r5, #1
 80a04ac:	b2ed      	uxtb	r5, r5
 80a04ae:	e7f1      	b.n	80a0494 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80a04b0:	6963      	ldr	r3, [r4, #20]
 80a04b2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80a04b6:	6163      	str	r3, [r4, #20]
  return true;
 80a04b8:	e7cc      	b.n	80a0454 <_ZN7FatFile13addDirClusterEv+0x10>
 80a04ba:	bf00      	nop
 80a04bc:	001ffe00 	.word	0x001ffe00

080a04c0 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 80a04c0:	b510      	push	{r4, lr}
 80a04c2:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
 80a04c4:	6880      	ldr	r0, [r0, #8]
 80a04c6:	460a      	mov	r2, r1
 80a04c8:	3024      	adds	r0, #36	; 0x24
 80a04ca:	69a1      	ldr	r1, [r4, #24]
 80a04cc:	f000 fe19 	bl	80a1102 <_ZN8FatCache4readEmh>
  if (!pc) {
 80a04d0:	b120      	cbz	r0, 80a04dc <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
 80a04d2:	88a3      	ldrh	r3, [r4, #4]
 80a04d4:	f003 030f 	and.w	r3, r3, #15
 80a04d8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
 80a04dc:	bd10      	pop	{r4, pc}

080a04de <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
 80a04de:	7803      	ldrb	r3, [r0, #0]
 80a04e0:	b90b      	cbnz	r3, 80a04e6 <_ZN7FatFile8openRootEP9FatVolume+0x8>
 80a04e2:	f7ff bf81 	b.w	80a03e8 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
 80a04e6:	2000      	movs	r0, #0
 80a04e8:	4770      	bx	lr

080a04ea <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 80a04ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
 80a04ee:	7803      	ldrb	r3, [r0, #0]
 80a04f0:	4604      	mov	r4, r0
 80a04f2:	4688      	mov	r8, r1
 80a04f4:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 80a04f6:	2b00      	cmp	r3, #0
 80a04f8:	d05d      	beq.n	80a05b6 <_ZN7FatFile4readEPvj+0xcc>
 80a04fa:	7882      	ldrb	r2, [r0, #2]
 80a04fc:	07d1      	lsls	r1, r2, #31
 80a04fe:	d55a      	bpl.n	80a05b6 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80a0500:	071a      	lsls	r2, r3, #28
 80a0502:	d52d      	bpl.n	80a0560 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80a0504:	69c3      	ldr	r3, [r0, #28]
 80a0506:	6942      	ldr	r2, [r0, #20]
 80a0508:	1a9b      	subs	r3, r3, r2
 80a050a:	429d      	cmp	r5, r3
 80a050c:	bf28      	it	cs
 80a050e:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80a0510:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 80a0512:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80a0516:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 80a051a:	2e00      	cmp	r6, #0
 80a051c:	f000 808f 	beq.w	80a063e <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
 80a0520:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 80a0522:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 80a0524:	0697      	lsls	r7, r2, #26
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80a0526:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 80a0528:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80a052c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80a0530:	d51f      	bpl.n	80a0572 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80a0532:	6a00      	ldr	r0, [r0, #32]
 80a0534:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 80a0536:	68a0      	ldr	r0, [r4, #8]
 80a0538:	f1ba 0f00 	cmp.w	sl, #0
 80a053c:	d142      	bne.n	80a05c4 <_ZN7FatFile4readEPvj+0xda>
 80a053e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a0542:	d33f      	bcc.n	80a05c4 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
 80a0544:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80a0546:	4299      	cmp	r1, r3
 80a0548:	d03c      	beq.n	80a05c4 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80a054a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a054e:	d252      	bcs.n	80a05f6 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
 80a0550:	4642      	mov	r2, r8
 80a0552:	6800      	ldr	r0, [r0, #0]
 80a0554:	f001 f8ba 	bl	80a16cc <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80a0558:	b368      	cbz	r0, 80a05b6 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 80a055a:	f44f 7700 	mov.w	r7, #512	; 0x200
 80a055e:	e044      	b.n	80a05ea <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 80a0560:	069b      	lsls	r3, r3, #26
 80a0562:	d5d5      	bpl.n	80a0510 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80a0564:	6883      	ldr	r3, [r0, #8]
 80a0566:	891a      	ldrh	r2, [r3, #8]
 80a0568:	6943      	ldr	r3, [r0, #20]
 80a056a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 80a056e:	b29b      	uxth	r3, r3
 80a0570:	e7cb      	b.n	80a050a <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80a0572:	f890 9005 	ldrb.w	r9, [r0, #5]
 80a0576:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 80a057a:	f1ba 0f00 	cmp.w	sl, #0
 80a057e:	d108      	bne.n	80a0592 <_ZN7FatFile4readEPvj+0xa8>
 80a0580:	f1b9 0f00 	cmp.w	r9, #0
 80a0584:	d105      	bne.n	80a0592 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 80a0586:	b95b      	cbnz	r3, 80a05a0 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80a0588:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
 80a058a:	bf4c      	ite	mi
 80a058c:	6a03      	ldrmi	r3, [r0, #32]
 80a058e:	6a23      	ldrpl	r3, [r4, #32]
 80a0590:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80a0592:	6921      	ldr	r1, [r4, #16]
 80a0594:	68a0      	ldr	r0, [r4, #8]
 80a0596:	f000 fdd7 	bl	80a1148 <_ZNK9FatVolume17clusterFirstBlockEm>
 80a059a:	eb09 0100 	add.w	r1, r9, r0
 80a059e:	e7ca      	b.n	80a0536 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80a05a0:	465a      	mov	r2, fp
 80a05a2:	6921      	ldr	r1, [r4, #16]
 80a05a4:	f000 fdd6 	bl	80a1154 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80a05a8:	2800      	cmp	r0, #0
 80a05aa:	db04      	blt.n	80a05b6 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 80a05ac:	d1f1      	bne.n	80a0592 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 80a05ae:	7823      	ldrb	r3, [r4, #0]
 80a05b0:	f013 0f70 	tst.w	r3, #112	; 0x70
 80a05b4:	d143      	bne.n	80a063e <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80a05b6:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80a05b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
 80a05bc:	f043 0302 	orr.w	r3, r3, #2
 80a05c0:	7063      	strb	r3, [r4, #1]
  return -1;
 80a05c2:	e03d      	b.n	80a0640 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
 80a05c4:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 80a05c8:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 80a05ca:	f04f 0200 	mov.w	r2, #0
 80a05ce:	f100 0024 	add.w	r0, r0, #36	; 0x24
 80a05d2:	bf28      	it	cs
 80a05d4:	4637      	movcs	r7, r6
 80a05d6:	f000 fd94 	bl	80a1102 <_ZN8FatCache4readEmh>
      if (!pc) {
 80a05da:	2800      	cmp	r0, #0
 80a05dc:	d0eb      	beq.n	80a05b6 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 80a05de:	eb00 010a 	add.w	r1, r0, sl
 80a05e2:	463a      	mov	r2, r7
 80a05e4:	4640      	mov	r0, r8
 80a05e6:	f002 f9cd 	bl	80a2984 <memcpy>
    m_curPosition += n;
 80a05ea:	6963      	ldr	r3, [r4, #20]
    dst += n;
 80a05ec:	44b8      	add	r8, r7
    m_curPosition += n;
 80a05ee:	443b      	add	r3, r7
 80a05f0:	6163      	str	r3, [r4, #20]
    toRead -= n;
 80a05f2:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 80a05f4:	e791      	b.n	80a051a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 80a05f6:	7822      	ldrb	r2, [r4, #0]
      size_t nb = toRead >> 9;
 80a05f8:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 80a05fc:	0692      	lsls	r2, r2, #26
 80a05fe:	d406      	bmi.n	80a060e <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 80a0600:	7902      	ldrb	r2, [r0, #4]
 80a0602:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
 80a0606:	b2d2      	uxtb	r2, r2
 80a0608:	4592      	cmp	sl, r2
 80a060a:	bf28      	it	cs
 80a060c:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a060e:	4299      	cmp	r1, r3
      n = 512*nb;
 80a0610:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a0614:	d208      	bcs.n	80a0628 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
 80a0616:	68a0      	ldr	r0, [r4, #8]
 80a0618:	4653      	mov	r3, sl
 80a061a:	4642      	mov	r2, r8
 80a061c:	6800      	ldr	r0, [r0, #0]
 80a061e:	f001 f89d 	bl	80a175c <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
 80a0622:	2800      	cmp	r0, #0
 80a0624:	d1e1      	bne.n	80a05ea <_ZN7FatFile4readEPvj+0x100>
 80a0626:	e7c6      	b.n	80a05b6 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a0628:	4453      	add	r3, sl
 80a062a:	428b      	cmp	r3, r1
 80a062c:	d9f3      	bls.n	80a0616 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
 80a062e:	3024      	adds	r0, #36	; 0x24
 80a0630:	9101      	str	r1, [sp, #4]
 80a0632:	f000 fd3f 	bl	80a10b4 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
 80a0636:	9901      	ldr	r1, [sp, #4]
 80a0638:	2800      	cmp	r0, #0
 80a063a:	d1ec      	bne.n	80a0616 <_ZN7FatFile4readEPvj+0x12c>
 80a063c:	e7bb      	b.n	80a05b6 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 80a063e:	1ba8      	subs	r0, r5, r6
}
 80a0640:	b003      	add	sp, #12
 80a0642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0646 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80a0646:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80a0648:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80a064a:	4604      	mov	r4, r0

  if (i == 0 || !skipReadOk) {
 80a064c:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80a0650:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 80a0654:	d000      	beq.n	80a0658 <_ZN7FatFile12readDirCacheEb+0x12>
 80a0656:	b999      	cbnz	r1, 80a0680 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 80a0658:	2201      	movs	r2, #1
 80a065a:	4620      	mov	r0, r4
 80a065c:	f10d 0107 	add.w	r1, sp, #7
 80a0660:	f7ff ff43 	bl	80a04ea <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 80a0664:	b240      	sxtb	r0, r0
 80a0666:	2801      	cmp	r0, #1
 80a0668:	d002      	beq.n	80a0670 <_ZN7FatFile12readDirCacheEb+0x2a>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80a066a:	2000      	movs	r0, #0
}
 80a066c:	b003      	add	sp, #12
 80a066e:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 80a0670:	6963      	ldr	r3, [r4, #20]
 80a0672:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 80a0674:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 80a0676:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 80a0678:	3030      	adds	r0, #48	; 0x30
 80a067a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 80a067e:	e7f5      	b.n	80a066c <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 80a0680:	3320      	adds	r3, #32
 80a0682:	e7f7      	b.n	80a0674 <_ZN7FatFile12readDirCacheEb+0x2e>

080a0684 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80a0684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
 80a0688:	7802      	ldrb	r2, [r0, #0]
 80a068a:	4604      	mov	r4, r0
 80a068c:	460d      	mov	r5, r1
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80a068e:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80a0690:	b162      	cbz	r2, 80a06ac <_ZN7FatFile7seekSetEm+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80a0692:	6940      	ldr	r0, [r0, #20]
 80a0694:	4288      	cmp	r0, r1
 80a0696:	d002      	beq.n	80a069e <_ZN7FatFile7seekSetEm+0x1a>
    return true;
  }
  if (pos == 0) {
 80a0698:	b919      	cbnz	r1, 80a06a2 <_ZN7FatFile7seekSetEm+0x1e>
    // set position to start of file
    m_curCluster = 0;
 80a069a:	6121      	str	r1, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 80a069c:	6165      	str	r5, [r4, #20]
    return true;
 80a069e:	2001      	movs	r0, #1
 80a06a0:	e006      	b.n	80a06b0 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 80a06a2:	0716      	lsls	r6, r2, #28
 80a06a4:	d506      	bpl.n	80a06b4 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 80a06a6:	69e3      	ldr	r3, [r4, #28]
 80a06a8:	428b      	cmp	r3, r1
 80a06aa:	d20b      	bcs.n	80a06c4 <_ZN7FatFile7seekSetEm+0x40>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 80a06ac:	2000      	movs	r0, #0
  m_curCluster = tmp;
 80a06ae:	6127      	str	r7, [r4, #16]
}
 80a06b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 80a06b4:	0691      	lsls	r1, r2, #26
 80a06b6:	d505      	bpl.n	80a06c4 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
 80a06b8:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 80a06ba:	891b      	ldrh	r3, [r3, #8]
 80a06bc:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 80a06c0:	d9ec      	bls.n	80a069c <_ZN7FatFile7seekSetEm+0x18>
 80a06c2:	e7f3      	b.n	80a06ac <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80a06c4:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80a06c8:	1e43      	subs	r3, r0, #1
 80a06ca:	f89c 6006 	ldrb.w	r6, [ip, #6]
 80a06ce:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80a06d2:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80a06d4:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80a06d6:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 80a06d8:	42b3      	cmp	r3, r6
 80a06da:	d800      	bhi.n	80a06de <_ZN7FatFile7seekSetEm+0x5a>
 80a06dc:	b998      	cbnz	r0, 80a0706 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80a06de:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
 80a06e0:	bf4c      	ite	mi
 80a06e2:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 80a06e6:	6a23      	ldrpl	r3, [r4, #32]
 80a06e8:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80a06ea:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 80a06ee:	2e00      	cmp	r6, #0
 80a06f0:	d0d4      	beq.n	80a069c <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80a06f2:	4642      	mov	r2, r8
 80a06f4:	6921      	ldr	r1, [r4, #16]
 80a06f6:	68a0      	ldr	r0, [r4, #8]
 80a06f8:	f000 fd2c 	bl	80a1154 <_ZN9FatVolume6fatGetEmPm>
 80a06fc:	2800      	cmp	r0, #0
 80a06fe:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80a0702:	dcf4      	bgt.n	80a06ee <_ZN7FatFile7seekSetEm+0x6a>
 80a0704:	e7d2      	b.n	80a06ac <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 80a0706:	1af6      	subs	r6, r6, r3
 80a0708:	e7ef      	b.n	80a06ea <_ZN7FatFile7seekSetEm+0x66>

080a070a <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
 80a070a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a070c:	460f      	mov	r7, r1
 80a070e:	4604      	mov	r4, r0
 80a0710:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
 80a0712:	2100      	movs	r1, #0
 80a0714:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
 80a0716:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
 80a0718:	f002 f942 	bl	80a29a0 <memset>
  m_vol = dirFile->m_vol;
 80a071c:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80a071e:	80a5      	strh	r5, [r4, #4]
  m_vol = dirFile->m_vol;
 80a0720:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 80a0722:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80a0724:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
 80a0728:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
 80a072a:	016a      	lsls	r2, r5, #5
 80a072c:	eb00 1545 	add.w	r5, r0, r5, lsl #5
 80a0730:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80a0734:	071f      	lsls	r7, r3, #28
 80a0736:	d444      	bmi.n	80a07c2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80a0738:	f003 0317 	and.w	r3, r3, #23
 80a073c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80a073e:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
 80a0742:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 80a0746:	bf04      	itt	eq
 80a0748:	f043 0308 	orreq.w	r3, r3, #8
 80a074c:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
 80a074e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80a0752:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
 80a0754:	f006 0303 	and.w	r3, r6, #3
 80a0758:	2b01      	cmp	r3, #1
 80a075a:	d02c      	beq.n	80a07b6 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
 80a075c:	2b02      	cmp	r3, #2
 80a075e:	d028      	beq.n	80a07b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
 80a0760:	bb7b      	cbnz	r3, 80a07c2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
 80a0762:	0571      	lsls	r1, r6, #21
 80a0764:	d42d      	bmi.n	80a07c2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
 80a0766:	2301      	movs	r3, #1
      m_flags = F_WRITE;
 80a0768:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
 80a076a:	78a1      	ldrb	r1, [r4, #2]
 80a076c:	078b      	lsls	r3, r1, #30
 80a076e:	d504      	bpl.n	80a077a <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
 80a0770:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
 80a0772:	06df      	lsls	r7, r3, #27
 80a0774:	d425      	bmi.n	80a07c2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
 80a0776:	07dd      	lsls	r5, r3, #31
 80a0778:	d423      	bmi.n	80a07c2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 80a077a:	11b3      	asrs	r3, r6, #6
 80a077c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80a0780:	f006 0508 	and.w	r5, r6, #8
 80a0784:	432b      	orrs	r3, r5
 80a0786:	430b      	orrs	r3, r1
 80a0788:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
 80a078a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
 80a078c:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80a078e:	1883      	adds	r3, r0, r2
 80a0790:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
 80a0794:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80a0798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 80a079c:	0572      	lsls	r2, r6, #21
 80a079e:	d513      	bpl.n	80a07c8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80a07a0:	b959      	cbnz	r1, 80a07ba <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
 80a07a2:	78a3      	ldrb	r3, [r4, #2]
 80a07a4:	f043 0304 	orr.w	r3, r3, #4
 80a07a8:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80a07aa:	0473      	lsls	r3, r6, #17
 80a07ac:	d410      	bmi.n	80a07d0 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
 80a07ae:	2001      	movs	r0, #1
}
 80a07b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
 80a07b2:	2303      	movs	r3, #3
 80a07b4:	e7d8      	b.n	80a0768 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
 80a07b6:	2302      	movs	r3, #2
 80a07b8:	e7d6      	b.n	80a0768 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80a07ba:	f000 fd6b 	bl	80a1294 <_ZN9FatVolume9freeChainEm>
 80a07be:	2800      	cmp	r0, #0
 80a07c0:	d1ef      	bne.n	80a07a2 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
 80a07c2:	2000      	movs	r0, #0
 80a07c4:	7020      	strb	r0, [r4, #0]
  return false;
 80a07c6:	e7f3      	b.n	80a07b0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
 80a07c8:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80a07ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a07cc:	61e3      	str	r3, [r4, #28]
 80a07ce:	e7ec      	b.n	80a07aa <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80a07d0:	4620      	mov	r0, r4
 80a07d2:	69e1      	ldr	r1, [r4, #28]
 80a07d4:	f7ff ff56 	bl	80a0684 <_ZN7FatFile7seekSetEm>
 80a07d8:	2800      	cmp	r0, #0
 80a07da:	d1e8      	bne.n	80a07ae <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
 80a07dc:	e7f1      	b.n	80a07c2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
	...

080a07e0 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80a07e0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80a07e2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 80a07e4:	4604      	mov	r4, r0
  if (!isOpen()) {
 80a07e6:	b90b      	cbnz	r3, 80a07ec <_ZN7FatFile4syncEv+0xc>
    return true;
 80a07e8:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 80a07ea:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 80a07ec:	7883      	ldrb	r3, [r0, #2]
 80a07ee:	075a      	lsls	r2, r3, #29
 80a07f0:	d523      	bpl.n	80a083a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80a07f2:	2101      	movs	r1, #1
 80a07f4:	f7ff fe64 	bl	80a04c0 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80a07f8:	4605      	mov	r5, r0
 80a07fa:	b928      	cbnz	r0, 80a0808 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
 80a07fc:	7863      	ldrb	r3, [r4, #1]
  return false;
 80a07fe:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 80a0800:	f043 0301 	orr.w	r3, r3, #1
 80a0804:	7063      	strb	r3, [r4, #1]
  return false;
 80a0806:	e7f0      	b.n	80a07ea <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80a0808:	7803      	ldrb	r3, [r0, #0]
 80a080a:	2be5      	cmp	r3, #229	; 0xe5
 80a080c:	d0f6      	beq.n	80a07fc <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
 80a080e:	7823      	ldrb	r3, [r4, #0]
 80a0810:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80a0812:	bf44      	itt	mi
 80a0814:	69e3      	ldrmi	r3, [r4, #28]
 80a0816:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 80a0818:	6a23      	ldr	r3, [r4, #32]
 80a081a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 80a081c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80a081e:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 80a0820:	4b09      	ldr	r3, [pc, #36]	; (80a0848 <_ZN7FatFile4syncEv+0x68>)
 80a0822:	681b      	ldr	r3, [r3, #0]
 80a0824:	b12b      	cbz	r3, 80a0832 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80a0826:	f100 0116 	add.w	r1, r0, #22
 80a082a:	3018      	adds	r0, #24
 80a082c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80a082e:	8b2b      	ldrh	r3, [r5, #24]
 80a0830:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 80a0832:	78a3      	ldrb	r3, [r4, #2]
 80a0834:	f023 0304 	bic.w	r3, r3, #4
 80a0838:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 80a083a:	68a0      	ldr	r0, [r4, #8]
 80a083c:	f7ff fdea 	bl	80a0414 <_ZN9FatVolume9cacheSyncEv>
 80a0840:	2800      	cmp	r0, #0
 80a0842:	d0db      	beq.n	80a07fc <_ZN7FatFile4syncEv+0x1c>
 80a0844:	e7d0      	b.n	80a07e8 <_ZN7FatFile4syncEv+0x8>
 80a0846:	bf00      	nop
 80a0848:	20000540 	.word	0x20000540

080a084c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 80a084c:	b510      	push	{r4, lr}
 80a084e:	4604      	mov	r4, r0
  bool rtn = sync();
 80a0850:	f7ff ffc6 	bl	80a07e0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80a0854:	2300      	movs	r3, #0
 80a0856:	7023      	strb	r3, [r4, #0]
}
 80a0858:	bd10      	pop	{r4, pc}

080a085a <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80a085a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a085c:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a085e:	2300      	movs	r3, #0
 80a0860:	b093      	sub	sp, #76	; 0x4c
 80a0862:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 80a0864:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80a0866:	4606      	mov	r6, r0
 80a0868:	460c      	mov	r4, r1
 80a086a:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 80a086c:	b113      	cbz	r3, 80a0874 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
 80a086e:	2000      	movs	r0, #0
}
 80a0870:	b013      	add	sp, #76	; 0x4c
 80a0872:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 80a0874:	780b      	ldrb	r3, [r1, #0]
 80a0876:	f013 0f70 	tst.w	r3, #112	; 0x70
 80a087a:	d0f8      	beq.n	80a086e <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
 80a087c:	7813      	ldrb	r3, [r2, #0]
 80a087e:	2b2f      	cmp	r3, #47	; 0x2f
 80a0880:	d112      	bne.n	80a08a8 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
 80a0882:	9a01      	ldr	r2, [sp, #4]
 80a0884:	7813      	ldrb	r3, [r2, #0]
 80a0886:	2b2f      	cmp	r3, #47	; 0x2f
 80a0888:	d102      	bne.n	80a0890 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
 80a088a:	3201      	adds	r2, #1
 80a088c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 80a088e:	e7f8      	b.n	80a0882 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
 80a0890:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
 80a0892:	b91b      	cbnz	r3, 80a089c <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
 80a0894:	4630      	mov	r0, r6
 80a0896:	f7ff fe22 	bl	80a04de <_ZN7FatFile8openRootEP9FatVolume>
 80a089a:	e7e9      	b.n	80a0870 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
 80a089c:	a809      	add	r0, sp, #36	; 0x24
 80a089e:	f7ff fda3 	bl	80a03e8 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 80a08a2:	2800      	cmp	r0, #0
 80a08a4:	d0e3      	beq.n	80a086e <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
 80a08a6:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 80a08a8:	9801      	ldr	r0, [sp, #4]
 80a08aa:	aa01      	add	r2, sp, #4
 80a08ac:	a903      	add	r1, sp, #12
 80a08ae:	f000 f90b 	bl	80a0ac8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80a08b2:	2800      	cmp	r0, #0
 80a08b4:	d0db      	beq.n	80a086e <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
 80a08b6:	9b01      	ldr	r3, [sp, #4]
 80a08b8:	781b      	ldrb	r3, [r3, #0]
 80a08ba:	b19b      	cbz	r3, 80a08e4 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
 80a08bc:	2300      	movs	r3, #0
 80a08be:	4621      	mov	r1, r4
 80a08c0:	4630      	mov	r0, r6
 80a08c2:	aa03      	add	r2, sp, #12
 80a08c4:	f000 fa32 	bl	80a0d2c <_ZN7FatFile4openEPS_P7fname_ti>
 80a08c8:	2800      	cmp	r0, #0
 80a08ca:	d0d0      	beq.n	80a086e <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
 80a08cc:	4635      	mov	r5, r6
 80a08ce:	ac09      	add	r4, sp, #36	; 0x24
 80a08d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a08d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a08d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a08d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a08d8:	682b      	ldr	r3, [r5, #0]
    close();
 80a08da:	4630      	mov	r0, r6
    tmpDir = *this;
 80a08dc:	6023      	str	r3, [r4, #0]
    close();
 80a08de:	f7ff ffb5 	bl	80a084c <_ZN7FatFile5closeEv>
  while (1) {
 80a08e2:	e7e0      	b.n	80a08a6 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
 80a08e4:	463b      	mov	r3, r7
 80a08e6:	4621      	mov	r1, r4
 80a08e8:	4630      	mov	r0, r6
 80a08ea:	aa03      	add	r2, sp, #12
 80a08ec:	f000 fa1e 	bl	80a0d2c <_ZN7FatFile4openEPS_P7fname_ti>
 80a08f0:	e7be      	b.n	80a0870 <_ZN7FatFile4openEPS_PKci+0x16>
	...

080a08f4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80a08f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a08f8:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 80a08fa:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a08fc:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 80a08fe:	4604      	mov	r4, r0
 80a0900:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a0902:	d55b      	bpl.n	80a09bc <_ZN7FatFile5writeEPKvj+0xc8>
 80a0904:	7883      	ldrb	r3, [r0, #2]
 80a0906:	079a      	lsls	r2, r3, #30
 80a0908:	d558      	bpl.n	80a09bc <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 80a090a:	071b      	lsls	r3, r3, #28
 80a090c:	d451      	bmi.n	80a09b2 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80a090e:	6963      	ldr	r3, [r4, #20]
 80a0910:	43db      	mvns	r3, r3
 80a0912:	42bb      	cmp	r3, r7
 80a0914:	d352      	bcc.n	80a09bc <_ZN7FatFile5writeEPKvj+0xc8>
 80a0916:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80a0918:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 80a091c:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
 80a091e:	f1b8 0f00 	cmp.w	r8, #0
 80a0922:	f000 8091 	beq.w	80a0a48 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 80a0926:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 80a0928:	f3c6 0508 	ubfx	r5, r6, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 80a092c:	7943      	ldrb	r3, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 80a092e:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
 80a0932:	d10e      	bne.n	80a0952 <_ZN7FatFile5writeEPKvj+0x5e>
 80a0934:	b96d      	cbnz	r5, 80a0952 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
 80a0936:	6921      	ldr	r1, [r4, #16]
 80a0938:	2900      	cmp	r1, #0
 80a093a:	d046      	beq.n	80a09ca <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80a093c:	4652      	mov	r2, sl
 80a093e:	f000 fc09 	bl	80a1154 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80a0942:	2800      	cmp	r0, #0
 80a0944:	db3a      	blt.n	80a09bc <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80a0946:	d104      	bne.n	80a0952 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 80a0948:	4620      	mov	r0, r4
 80a094a:	f7ff fd70 	bl	80a042e <_ZN7FatFile10addClusterEv>
 80a094e:	2800      	cmp	r0, #0
 80a0950:	d034      	beq.n	80a09bc <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80a0952:	6921      	ldr	r1, [r4, #16]
 80a0954:	68a0      	ldr	r0, [r4, #8]
 80a0956:	f000 fbf7 	bl	80a1148 <_ZNK9FatVolume17clusterFirstBlockEm>
 80a095a:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 80a095c:	68a0      	ldr	r0, [r4, #8]
 80a095e:	b915      	cbnz	r5, 80a0966 <_ZN7FatFile5writeEPKvj+0x72>
 80a0960:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 80a0964:	d23f      	bcs.n	80a09e6 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 80a0966:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 80a096a:	4546      	cmp	r6, r8
 80a096c:	bf28      	it	cs
 80a096e:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 80a0970:	2d00      	cmp	r5, #0
 80a0972:	d136      	bne.n	80a09e2 <_ZN7FatFile5writeEPKvj+0xee>
 80a0974:	6962      	ldr	r2, [r4, #20]
 80a0976:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 80a0978:	429a      	cmp	r2, r3
 80a097a:	bf34      	ite	cc
 80a097c:	2201      	movcc	r2, #1
 80a097e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 80a0980:	3024      	adds	r0, #36	; 0x24
 80a0982:	f000 fbbe 	bl	80a1102 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 80a0986:	b1c8      	cbz	r0, 80a09bc <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80a0988:	4428      	add	r0, r5
 80a098a:	4632      	mov	r2, r6
 80a098c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 80a098e:	4435      	add	r5, r6
      memcpy(dst, src, n);
 80a0990:	f001 fff8 	bl	80a2984 <memcpy>
      if (512 == (n + blockOffset)) {
 80a0994:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80a0998:	d104      	bne.n	80a09a4 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 80a099a:	68a0      	ldr	r0, [r4, #8]
 80a099c:	3024      	adds	r0, #36	; 0x24
 80a099e:	f000 fb89 	bl	80a10b4 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 80a09a2:	b158      	cbz	r0, 80a09bc <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80a09a4:	6963      	ldr	r3, [r4, #20]
    src += n;
 80a09a6:	44b1      	add	r9, r6
    m_curPosition += n;
 80a09a8:	4433      	add	r3, r6
 80a09aa:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 80a09ac:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 80a09b0:	e7b4      	b.n	80a091c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 80a09b2:	69c1      	ldr	r1, [r0, #28]
 80a09b4:	f7ff fe66 	bl	80a0684 <_ZN7FatFile7seekSetEm>
 80a09b8:	2800      	cmp	r0, #0
 80a09ba:	d1a8      	bne.n	80a090e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80a09bc:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80a09be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= WRITE_ERROR;
 80a09c2:	f043 0301 	orr.w	r3, r3, #1
 80a09c6:	7063      	strb	r3, [r4, #1]
  return -1;
 80a09c8:	e050      	b.n	80a0a6c <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
 80a09ca:	6a23      	ldr	r3, [r4, #32]
 80a09cc:	b93b      	cbnz	r3, 80a09de <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 80a09ce:	4620      	mov	r0, r4
 80a09d0:	f7ff fd2d 	bl	80a042e <_ZN7FatFile10addClusterEv>
 80a09d4:	2800      	cmp	r0, #0
 80a09d6:	d0f1      	beq.n	80a09bc <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 80a09d8:	6923      	ldr	r3, [r4, #16]
 80a09da:	6223      	str	r3, [r4, #32]
 80a09dc:	e7b9      	b.n	80a0952 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 80a09de:	6123      	str	r3, [r4, #16]
 80a09e0:	e7b7      	b.n	80a0952 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80a09e2:	2201      	movs	r2, #1
 80a09e4:	e7cc      	b.n	80a0980 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 80a09e6:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
 80a09ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80a09ec:	d31b      	bcc.n	80a0a26 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80a09ee:	f890 c004 	ldrb.w	ip, [r0, #4]
      size_t nb = nToWrite >> 9;
 80a09f2:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80a09f6:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
 80a09fa:	b2f3      	uxtb	r3, r6
 80a09fc:	4573      	cmp	r3, lr
 80a09fe:	bf28      	it	cs
 80a0a00:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a0a02:	4291      	cmp	r1, r2
      n = 512*nb;
 80a0a04:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a0a08:	d307      	bcc.n	80a0a1a <_ZN7FatFile5writeEPKvj+0x126>
 80a0a0a:	441a      	add	r2, r3
 80a0a0c:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 80a0a0e:	bf82      	ittt	hi
 80a0a10:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
 80a0a14:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80a0a18:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
 80a0a1a:	68a5      	ldr	r5, [r4, #8]
 80a0a1c:	464a      	mov	r2, r9
 80a0a1e:	6828      	ldr	r0, [r5, #0]
 80a0a20:	f000 ff52 	bl	80a18c8 <_ZN9SdSpiCard11writeBlocksEmPKhj>
 80a0a24:	e7bd      	b.n	80a09a2 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 80a0a26:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
 80a0a28:	bf02      	ittt	eq
 80a0a2a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
 80a0a2e:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80a0a32:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
 80a0a34:	68a3      	ldr	r3, [r4, #8]
 80a0a36:	464a      	mov	r2, r9
 80a0a38:	6818      	ldr	r0, [r3, #0]
 80a0a3a:	f000 fed0 	bl	80a17de <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
 80a0a3e:	2800      	cmp	r0, #0
 80a0a40:	d0bc      	beq.n	80a09bc <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 80a0a42:	f44f 7600 	mov.w	r6, #512	; 0x200
 80a0a46:	e7ad      	b.n	80a09a4 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 80a0a48:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 80a0a4a:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
 80a0a4c:	42b2      	cmp	r2, r6
 80a0a4e:	d204      	bcs.n	80a0a5a <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
 80a0a50:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 80a0a52:	f043 0304 	orr.w	r3, r3, #4
 80a0a56:	70a3      	strb	r3, [r4, #2]
 80a0a58:	e003      	b.n	80a0a62 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
 80a0a5a:	4a08      	ldr	r2, [pc, #32]	; (80a0a7c <_ZN7FatFile5writeEPKvj+0x188>)
 80a0a5c:	6812      	ldr	r2, [r2, #0]
 80a0a5e:	2a00      	cmp	r2, #0
 80a0a60:	d1f7      	bne.n	80a0a52 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
 80a0a62:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80a0a66:	2b00      	cmp	r3, #0
 80a0a68:	db02      	blt.n	80a0a70 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
 80a0a6a:	4638      	mov	r0, r7
}
 80a0a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 80a0a70:	4620      	mov	r0, r4
 80a0a72:	f7ff feb5 	bl	80a07e0 <_ZN7FatFile4syncEv>
 80a0a76:	2800      	cmp	r0, #0
 80a0a78:	d1f7      	bne.n	80a0a6a <_ZN7FatFile5writeEPKvj+0x176>
 80a0a7a:	e79f      	b.n	80a09bc <_ZN7FatFile5writeEPKvj+0xc8>
 80a0a7c:	20000540 	.word	0x20000540

080a0a80 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 80a0a80:	2904      	cmp	r1, #4
 80a0a82:	d804      	bhi.n	80a0a8e <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
 80a0a84:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80a0a88:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 80a0a8c:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80a0a8e:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 80a0a90:	bf9b      	ittet	ls
 80a0a92:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
 80a0a96:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80a0a9a:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 80a0a9c:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80a0a9e:	bf84      	itt	hi
 80a0aa0:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80a0aa4:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
 80a0aa6:	4770      	bx	lr

080a0aa8 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
 80a0aa8:	1e41      	subs	r1, r0, #1
 80a0aaa:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 80a0aae:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80a0ab0:	0842      	lsrs	r2, r0, #1
 80a0ab2:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 80a0ab6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a0aba:	4410      	add	r0, r2
  for (uint8_t i = 0; i < 11; i++) {
 80a0abc:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80a0abe:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  for (uint8_t i = 0; i < 11; i++) {
 80a0ac2:	d1f5      	bne.n	80a0ab0 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
 80a0ac4:	4770      	bx	lr
	...

080a0ac8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80a0ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0acc:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80a0ace:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a0ad2:	2b20      	cmp	r3, #32
 80a0ad4:	d0fa      	beq.n	80a0acc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 80a0ad6:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80a0ad8:	4d69      	ldr	r5, [pc, #420]	; (80a0c80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
  fname->lfn = path;
 80a0ada:	608e      	str	r6, [r1, #8]
    c = path[len];
 80a0adc:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 80a0ade:	b1c3      	cbz	r3, 80a0b12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 80a0ae0:	2b2f      	cmp	r3, #47	; 0x2f
 80a0ae2:	d016      	beq.n	80a0b12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80a0ae4:	2b5c      	cmp	r3, #92	; 0x5c
 80a0ae6:	d102      	bne.n	80a0aee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80a0ae8:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 80a0aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80a0aee:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 80a0af2:	b2c0      	uxtb	r0, r0
 80a0af4:	281d      	cmp	r0, #29
 80a0af6:	d803      	bhi.n	80a0b00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 80a0af8:	fa25 f000 	lsr.w	r0, r5, r0
 80a0afc:	07c0      	lsls	r0, r0, #31
 80a0afe:	d4f3      	bmi.n	80a0ae8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80a0b00:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 80a0b04:	283c      	cmp	r0, #60	; 0x3c
 80a0b06:	d0ef      	beq.n	80a0ae8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 80a0b08:	3b20      	subs	r3, #32
 80a0b0a:	2b5e      	cmp	r3, #94	; 0x5e
 80a0b0c:	d8ec      	bhi.n	80a0ae8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 80a0b0e:	3401      	adds	r4, #1
    c = path[len];
 80a0b10:	e7e4      	b.n	80a0adc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 80a0b12:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 80a0b14:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80a0b16:	4607      	mov	r7, r0
 80a0b18:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a0b1c:	2d20      	cmp	r5, #32
 80a0b1e:	d0fa      	beq.n	80a0b16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 80a0b20:	2d2f      	cmp	r5, #47	; 0x2f
 80a0b22:	d0f8      	beq.n	80a0b16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 80a0b24:	6017      	str	r7, [r2, #0]
  while (len) {
 80a0b26:	b14c      	cbz	r4, 80a0b3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 80a0b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80a0b2c:	2a2e      	cmp	r2, #46	; 0x2e
 80a0b2e:	d001      	beq.n	80a0b34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 80a0b30:	2a20      	cmp	r2, #32
 80a0b32:	d101      	bne.n	80a0b38 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 80a0b34:	3c01      	subs	r4, #1
  while (len) {
 80a0b36:	e7f6      	b.n	80a0b26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 80a0b38:	2cff      	cmp	r4, #255	; 0xff
 80a0b3a:	dcd5      	bgt.n	80a0ae8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 80a0b3c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80a0b40:	f04f 0800 	mov.w	r8, #0
    fname->sfn[k] = ' ';
 80a0b44:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
 80a0b48:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
 80a0b4a:	f8c1 300d 	str.w	r3, [r1, #13]
 80a0b4e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80a0b50:	f816 3008 	ldrb.w	r3, [r6, r8]
 80a0b54:	2b2e      	cmp	r3, #46	; 0x2e
 80a0b56:	d001      	beq.n	80a0b5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
 80a0b58:	2b20      	cmp	r3, #32
 80a0b5a:	d102      	bne.n	80a0b62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
 80a0b5c:	f108 0801 	add.w	r8, r8, #1
 80a0b60:	e7f6      	b.n	80a0b50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
 80a0b62:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80a0b66:	1e65      	subs	r5, r4, #1
  is83 = !si;
 80a0b68:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80a0b6a:	1c6b      	adds	r3, r5, #1
 80a0b6c:	d002      	beq.n	80a0b74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
 80a0b6e:	5d73      	ldrb	r3, [r6, r5]
 80a0b70:	2b2e      	cmp	r3, #46	; 0x2e
 80a0b72:	d114      	bne.n	80a0b9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80a0b74:	f04f 0900 	mov.w	r9, #0
 80a0b78:	2707      	movs	r7, #7
 80a0b7a:	464a      	mov	r2, r9
 80a0b7c:	46ca      	mov	sl, r9
 80a0b7e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 80a0b82:	45a0      	cmp	r8, r4
 80a0b84:	da68      	bge.n	80a0c58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
 80a0b86:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 80a0b8a:	2b20      	cmp	r3, #32
 80a0b8c:	d003      	beq.n	80a0b96 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
 80a0b8e:	2b2e      	cmp	r3, #46	; 0x2e
 80a0b90:	d107      	bne.n	80a0ba2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
 80a0b92:	45a8      	cmp	r8, r5
 80a0b94:	d012      	beq.n	80a0bbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
 80a0b96:	2000      	movs	r0, #0
  for (; si < len; si++) {
 80a0b98:	f108 0801 	add.w	r8, r8, #1
 80a0b9c:	e7f1      	b.n	80a0b82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80a0b9e:	3d01      	subs	r5, #1
 80a0ba0:	e7e3      	b.n	80a0b6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
 80a0ba2:	2b22      	cmp	r3, #34	; 0x22
 80a0ba4:	d008      	beq.n	80a0bb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 80a0ba6:	2b7c      	cmp	r3, #124	; 0x7c
 80a0ba8:	d006      	beq.n	80a0bb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80a0baa:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80a0bae:	f1bc 0f05 	cmp.w	ip, #5
 80a0bb2:	d80a      	bhi.n	80a0bca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
 80a0bb4:	2b2d      	cmp	r3, #45	; 0x2d
 80a0bb6:	d012      	beq.n	80a0bde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
 80a0bb8:	45a8      	cmp	r8, r5
 80a0bba:	d15b      	bne.n	80a0c74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
 80a0bbc:	2f0a      	cmp	r7, #10
 80a0bbe:	d04a      	beq.n	80a0c56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
 80a0bc0:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 80a0bc2:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80a0bc4:	f04f 0e10 	mov.w	lr, #16
 80a0bc8:	e7e6      	b.n	80a0b98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
 80a0bca:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80a0bce:	f1bc 0f05 	cmp.w	ip, #5
 80a0bd2:	d9f1      	bls.n	80a0bb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
 80a0bd4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80a0bd8:	f1bc 0f02 	cmp.w	ip, #2
 80a0bdc:	d9ec      	bls.n	80a0bb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
 80a0bde:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80a0be2:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80a0be6:	d8e7      	bhi.n	80a0bb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
 80a0be8:	45a8      	cmp	r8, r5
 80a0bea:	d0e7      	beq.n	80a0bbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 80a0bec:	42ba      	cmp	r2, r7
 80a0bee:	d830      	bhi.n	80a0c52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
 80a0bf0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80a0bf4:	f1bc 0f19 	cmp.w	ip, #25
 80a0bf8:	d81a      	bhi.n	80a0c30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
 80a0bfa:	3b20      	subs	r3, #32
        lc |= bit;
 80a0bfc:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 80a0c00:	b2db      	uxtb	r3, r3
        lc |= bit;
 80a0c02:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 80a0c06:	f102 0c01 	add.w	ip, r2, #1
 80a0c0a:	fa5f fc8c 	uxtb.w	ip, ip
 80a0c0e:	440a      	add	r2, r1
      if (i < 7) {
 80a0c10:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 80a0c14:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 80a0c16:	d801      	bhi.n	80a0c1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
 80a0c18:	f881 c00c 	strb.w	ip, [r1, #12]
 80a0c1c:	4662      	mov	r2, ip
 80a0c1e:	e7bb      	b.n	80a0b98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
 80a0c20:	45a8      	cmp	r8, r5
 80a0c22:	dc18      	bgt.n	80a0c56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
 80a0c24:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 80a0c26:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 80a0c28:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80a0c2a:	f04f 0e10 	mov.w	lr, #16
 80a0c2e:	e7b2      	b.n	80a0b96 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
 80a0c30:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80a0c34:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80a0c38:	bf98      	it	ls
 80a0c3a:	ea4e 0a0a 	orrls.w	sl, lr, sl
 80a0c3e:	e7e2      	b.n	80a0c06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80a0c40:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 80a0c42:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80a0c44:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80a0c46:	4419      	add	r1, r3
 80a0c48:	237e      	movs	r3, #126	; 0x7e
 80a0c4a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 80a0c4c:	2331      	movs	r3, #49	; 0x31
 80a0c4e:	738b      	strb	r3, [r1, #14]
 80a0c50:	e74b      	b.n	80a0aea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 80a0c52:	2f0a      	cmp	r7, #10
 80a0c54:	d1e4      	bne.n	80a0c20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
 80a0c56:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 80a0c58:	7b4b      	ldrb	r3, [r1, #13]
 80a0c5a:	2b20      	cmp	r3, #32
 80a0c5c:	f43f af44 	beq.w	80a0ae8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 80a0c60:	2800      	cmp	r0, #0
 80a0c62:	d0ed      	beq.n	80a0c40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80a0c64:	ea1a 0f09 	tst.w	sl, r9
 80a0c68:	bf18      	it	ne
 80a0c6a:	f04f 0902 	movne.w	r9, #2
 80a0c6e:	f881 9000 	strb.w	r9, [r1]
 80a0c72:	e73a      	b.n	80a0aea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 80a0c74:	42ba      	cmp	r2, r7
 80a0c76:	d8ec      	bhi.n	80a0c52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
 80a0c78:	2000      	movs	r0, #0
      c = '_';
 80a0c7a:	235f      	movs	r3, #95	; 0x5f
 80a0c7c:	e7c3      	b.n	80a0c06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
 80a0c7e:	bf00      	nop
 80a0c80:	31000101 	.word	0x31000101

080a0c84 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 80a0c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0c88:	4606      	mov	r6, r0
 80a0c8a:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 80a0c8c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80a0c8e:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 80a0c90:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80a0c94:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 80a0c98:	6861      	ldr	r1, [r4, #4]
 80a0c9a:	68a2      	ldr	r2, [r4, #8]
 80a0c9c:	186b      	adds	r3, r5, r1
 80a0c9e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 80a0ca0:	4411      	add	r1, r2
 80a0ca2:	4291      	cmp	r1, r2
 80a0ca4:	d006      	beq.n	80a0cb4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 80a0ca6:	f812 0b01 	ldrb.w	r0, [r2], #1
 80a0caa:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80a0cae:	4043      	eors	r3, r0
 80a0cb0:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 80a0cb2:	e7f6      	b.n	80a0ca2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 80a0cb4:	f1b9 0f03 	cmp.w	r9, #3
 80a0cb8:	bf28      	it	cs
 80a0cba:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a0cbe:	f109 0204 	add.w	r2, r9, #4
 80a0cc2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80a0cc4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a0cc8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a0cca:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a0ccc:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a0cce:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a0cd0:	bf94      	ite	ls
 80a0cd2:	3130      	addls	r1, #48	; 0x30
 80a0cd4:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a0cd6:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a0cd8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80a0cda:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a0cde:	d1f1      	bne.n	80a0cc4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 80a0ce0:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 80a0ce4:	2100      	movs	r1, #0
 80a0ce6:	4630      	mov	r0, r6
 80a0ce8:	735f      	strb	r7, [r3, #13]
 80a0cea:	f7ff fccb 	bl	80a0684 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 80a0cee:	2101      	movs	r1, #1
 80a0cf0:	4630      	mov	r0, r6
 80a0cf2:	f7ff fca8 	bl	80a0646 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80a0cf6:	4601      	mov	r1, r0
 80a0cf8:	b928      	cbnz	r0, 80a0d06 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80a0cfa:	7870      	ldrb	r0, [r6, #1]
 80a0cfc:	fab0 f080 	clz	r0, r0
 80a0d00:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 80a0d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 80a0d06:	7803      	ldrb	r3, [r0, #0]
 80a0d08:	b16b      	cbz	r3, 80a0d26 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80a0d0a:	7ac3      	ldrb	r3, [r0, #11]
 80a0d0c:	071b      	lsls	r3, r3, #28
 80a0d0e:	d4ee      	bmi.n	80a0cee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80a0d10:	220b      	movs	r2, #11
 80a0d12:	4640      	mov	r0, r8
 80a0d14:	f001 fe26 	bl	80a2964 <memcmp>
 80a0d18:	2800      	cmp	r0, #0
 80a0d1a:	d1e8      	bne.n	80a0cee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 80a0d1c:	3501      	adds	r5, #1
 80a0d1e:	b2ad      	uxth	r5, r5
 80a0d20:	2d64      	cmp	r5, #100	; 0x64
 80a0d22:	d1b9      	bne.n	80a0c98 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 80a0d24:	e7ed      	b.n	80a0d02 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 80a0d26:	2001      	movs	r0, #1
 80a0d28:	e7eb      	b.n	80a0d02 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

080a0d2c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80a0d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0d30:	b08b      	sub	sp, #44	; 0x2c
 80a0d32:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
 80a0d34:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80a0d36:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 80a0d38:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80a0d3c:	4617      	mov	r7, r2
 80a0d3e:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
 80a0d40:	d103      	bne.n	80a0d4a <_ZN7FatFile4openEPS_P7fname_ti+0x1e>
  return false;
 80a0d42:	2000      	movs	r0, #0
}
 80a0d44:	b00b      	add	sp, #44	; 0x2c
 80a0d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
 80a0d4a:	9b06      	ldr	r3, [sp, #24]
 80a0d4c:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
 80a0d4e:	2b00      	cmp	r3, #0
 80a0d50:	d1f7      	bne.n	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  size_t len = fname->len;
 80a0d52:	6853      	ldr	r3, [r2, #4]
  }
 80a0d54:	f04f 0b00 	mov.w	fp, #0
 80a0d58:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80a0d5a:	7813      	ldrb	r3, [r2, #0]
 80a0d5c:	46da      	mov	sl, fp
 80a0d5e:	079c      	lsls	r4, r3, #30
 80a0d60:	bf1b      	ittet	ne
 80a0d62:	220d      	movne	r2, #13
 80a0d64:	9b04      	ldrne	r3, [sp, #16]
 80a0d66:	2301      	moveq	r3, #1
 80a0d68:	330c      	addne	r3, #12
 80a0d6a:	bf18      	it	ne
 80a0d6c:	fbb3 f3f2 	udivne	r3, r3, r2
 80a0d70:	465c      	mov	r4, fp
 80a0d72:	465e      	mov	r6, fp
 80a0d74:	46d9      	mov	r9, fp
 80a0d76:	bf1c      	itt	ne
 80a0d78:	3301      	addne	r3, #1
 80a0d7a:	b2db      	uxtbne	r3, r3
    seekSet(0);
 80a0d7c:	2100      	movs	r1, #0
 80a0d7e:	4628      	mov	r0, r5
 80a0d80:	9302      	str	r3, [sp, #8]
 80a0d82:	f7ff fc7f 	bl	80a0684 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80a0d86:	f107 030d 	add.w	r3, r7, #13
  }
 80a0d8a:	f8cd b00c 	str.w	fp, [sp, #12]
 80a0d8e:	9309      	str	r3, [sp, #36]	; 0x24
    curIndex = dirFile->m_curPosition/32;
 80a0d90:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
 80a0d92:	2101      	movs	r1, #1
 80a0d94:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
 80a0d96:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
 80a0d9a:	f7ff fc54 	bl	80a0646 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80a0d9e:	4603      	mov	r3, r0
 80a0da0:	2800      	cmp	r0, #0
 80a0da2:	d172      	bne.n	80a0e8a <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
      if (dirFile->getError()) {
 80a0da4:	786b      	ldrb	r3, [r5, #1]
 80a0da6:	2b00      	cmp	r3, #0
 80a0da8:	d1cb      	bne.n	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 80a0daa:	9b05      	ldr	r3, [sp, #20]
 80a0dac:	059a      	lsls	r2, r3, #22
 80a0dae:	d5c8      	bpl.n	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
 80a0db0:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
 80a0db4:	3b01      	subs	r3, #1
 80a0db6:	2b01      	cmp	r3, #1
 80a0db8:	d8c3      	bhi.n	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  if (freeFound == 0) {
 80a0dba:	9b03      	ldr	r3, [sp, #12]
 80a0dbc:	2c00      	cmp	r4, #0
 80a0dbe:	bf08      	it	eq
 80a0dc0:	4643      	moveq	r3, r8
 80a0dc2:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
 80a0dc4:	9b02      	ldr	r3, [sp, #8]
 80a0dc6:	429c      	cmp	r4, r3
 80a0dc8:	f0c0 80f1 	bcc.w	80a0fae <_ZN7FatFile4openEPS_P7fname_ti+0x282>
  if (fnameFound) {
 80a0dcc:	f1b9 0f00 	cmp.w	r9, #0
 80a0dd0:	f040 810a 	bne.w	80a0fe8 <_ZN7FatFile4openEPS_P7fname_ti+0x2bc>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 80a0dd4:	9b03      	ldr	r3, [sp, #12]
 80a0dd6:	4628      	mov	r0, r5
 80a0dd8:	0159      	lsls	r1, r3, #5
 80a0dda:	f7ff fc53 	bl	80a0684 <_ZN7FatFile7seekSetEm>
 80a0dde:	2800      	cmp	r0, #0
 80a0de0:	d0af      	beq.n	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  lfnOrd = freeNeed - 1;
 80a0de2:	9b02      	ldr	r3, [sp, #8]
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80a0de4:	f04f 0a00 	mov.w	sl, #0
  lfnOrd = freeNeed - 1;
 80a0de8:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 80a0dec:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80a0df0:	464e      	mov	r6, r9
    ldir->attr = DIR_ATT_LONG_NAME;
 80a0df2:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80a0df6:	2e00      	cmp	r6, #0
 80a0df8:	f000 810d 	beq.w	80a1016 <_ZN7FatFile4openEPS_P7fname_ti+0x2ea>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80a0dfc:	2100      	movs	r1, #0
 80a0dfe:	4628      	mov	r0, r5
 80a0e00:	f7ff fc21 	bl	80a0646 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 80a0e04:	4604      	mov	r4, r0
 80a0e06:	2800      	cmp	r0, #0
 80a0e08:	d09b      	beq.n	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80a0e0a:	454e      	cmp	r6, r9
 80a0e0c:	bf18      	it	ne
 80a0e0e:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 80a0e10:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80a0e12:	bf08      	it	eq
 80a0e14:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
    m_status |= CACHE_STATUS_DIRTY;
 80a0e18:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80a0e1c:	f043 0301 	orr.w	r3, r3, #1
 80a0e20:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80a0e24:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 80a0e28:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 80a0e2c:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 80a0e30:	f107 000d 	add.w	r0, r7, #13
 80a0e34:	f7ff fe38 	bl	80a0aa8 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80a0e38:	220d      	movs	r2, #13
 80a0e3a:	f00b 031f 	and.w	r3, fp, #31
 80a0e3e:	3b01      	subs	r3, #1
 80a0e40:	4353      	muls	r3, r2
 80a0e42:	2200      	movs	r2, #0
    ldir->chksum = lfnChecksum(fname->sfn);
 80a0e44:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 80a0e46:	f884 a01a 	strb.w	sl, [r4, #26]
 80a0e4a:	f884 a01b 	strb.w	sl, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 80a0e4e:	f8d7 c008 	ldr.w	ip, [r7, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80a0e52:	9904      	ldr	r1, [sp, #16]
 80a0e54:	4299      	cmp	r1, r3
 80a0e56:	f240 80cf 	bls.w	80a0ff8 <_ZN7FatFile4openEPS_P7fname_ti+0x2cc>
 80a0e5a:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
 80a0e5e:	2a04      	cmp	r2, #4
 80a0e60:	fa5f fe82 	uxtb.w	lr, r2
 80a0e64:	f102 0001 	add.w	r0, r2, #1
 80a0e68:	f200 80cc 	bhi.w	80a1004 <_ZN7FatFile4openEPS_P7fname_ti+0x2d8>
    ldir->name1[i] = c;
 80a0e6c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80a0e70:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 80a0e74:	280d      	cmp	r0, #13
 80a0e76:	4602      	mov	r2, r0
 80a0e78:	f103 0301 	add.w	r3, r3, #1
 80a0e7c:	d1e9      	bne.n	80a0e52 <_ZN7FatFile4openEPS_P7fname_ti+0x126>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80a0e7e:	3e01      	subs	r6, #1
 80a0e80:	b2f6      	uxtb	r6, r6
 80a0e82:	e7b8      	b.n	80a0df6 <_ZN7FatFile4openEPS_P7fname_ti+0xca>
        fnameFound = true;
 80a0e84:	f04f 0901 	mov.w	r9, #1
 80a0e88:	e782      	b.n	80a0d90 <_ZN7FatFile4openEPS_P7fname_ti+0x64>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 80a0e8a:	7802      	ldrb	r2, [r0, #0]
 80a0e8c:	2ae5      	cmp	r2, #229	; 0xe5
 80a0e8e:	d000      	beq.n	80a0e92 <_ZN7FatFile4openEPS_P7fname_ti+0x166>
 80a0e90:	b982      	cbnz	r2, 80a0eb4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
 80a0e92:	9903      	ldr	r1, [sp, #12]
 80a0e94:	2c00      	cmp	r4, #0
 80a0e96:	bf08      	it	eq
 80a0e98:	4641      	moveq	r1, r8
 80a0e9a:	9103      	str	r1, [sp, #12]
      if (freeFound < freeNeed) {
 80a0e9c:	9902      	ldr	r1, [sp, #8]
 80a0e9e:	428c      	cmp	r4, r1
        freeFound++;
 80a0ea0:	bf3c      	itt	cc
 80a0ea2:	3401      	addcc	r4, #1
 80a0ea4:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 80a0ea6:	2a00      	cmp	r2, #0
 80a0ea8:	f43f af7f 	beq.w	80a0daa <_ZN7FatFile4openEPS_P7fname_ti+0x7e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80a0eac:	2ae5      	cmp	r2, #229	; 0xe5
 80a0eae:	d105      	bne.n	80a0ebc <_ZN7FatFile4openEPS_P7fname_ti+0x190>
      lfnOrd = 0;
 80a0eb0:	2600      	movs	r6, #0
 80a0eb2:	e76d      	b.n	80a0d90 <_ZN7FatFile4openEPS_P7fname_ti+0x64>
        freeFound = 0;
 80a0eb4:	9902      	ldr	r1, [sp, #8]
 80a0eb6:	428c      	cmp	r4, r1
 80a0eb8:	bf38      	it	cc
 80a0eba:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80a0ebc:	2a2e      	cmp	r2, #46	; 0x2e
 80a0ebe:	d0f7      	beq.n	80a0eb0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
 80a0ec0:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
 80a0ec2:	290f      	cmp	r1, #15
 80a0ec4:	d149      	bne.n	80a0f5a <_ZN7FatFile4openEPS_P7fname_ti+0x22e>
      if (!lfnOrd) {
 80a0ec6:	bb16      	cbnz	r6, 80a0f0e <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80a0ec8:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 80a0ecc:	f43f af60 	beq.w	80a0d90 <_ZN7FatFile4openEPS_P7fname_ti+0x64>
        lfnOrd = ord = ldir->ord & 0X1F;
 80a0ed0:	f002 061f 	and.w	r6, r2, #31
 80a0ed4:	46b2      	mov	sl, r6
        chksum = ldir->chksum;
 80a0ed6:	f893 b00d 	ldrb.w	fp, [r3, #13]
      size_t k = 13*(ord - 1);
 80a0eda:	220d      	movs	r2, #13
 80a0edc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80a0ee0:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
 80a0ee4:	9a04      	ldr	r2, [sp, #16]
 80a0ee6:	4542      	cmp	r2, r8
 80a0ee8:	d9e2      	bls.n	80a0eb0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
 80a0eea:	eba2 0208 	sub.w	r2, r2, r8
 80a0eee:	9207      	str	r2, [sp, #28]
 80a0ef0:	2200      	movs	r2, #0
 80a0ef2:	eb02 0108 	add.w	r1, r2, r8
 80a0ef6:	9108      	str	r1, [sp, #32]
        uint16_t u = lfnGetChar(ldir, i);
 80a0ef8:	4618      	mov	r0, r3
 80a0efa:	b2d1      	uxtb	r1, r2
 80a0efc:	f7ff fdc0 	bl	80a0a80 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
 80a0f00:	9907      	ldr	r1, [sp, #28]
 80a0f02:	428a      	cmp	r2, r1
 80a0f04:	d10d      	bne.n	80a0f22 <_ZN7FatFile4openEPS_P7fname_ti+0x1f6>
            lfnOrd = 0;
 80a0f06:	2800      	cmp	r0, #0
 80a0f08:	bf18      	it	ne
 80a0f0a:	2600      	movne	r6, #0
 80a0f0c:	e740      	b.n	80a0d90 <_ZN7FatFile4openEPS_P7fname_ti+0x64>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80a0f0e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80a0f12:	fa5f fa8a 	uxtb.w	sl, sl
 80a0f16:	4552      	cmp	r2, sl
 80a0f18:	d1ca      	bne.n	80a0eb0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
 80a0f1a:	7b5a      	ldrb	r2, [r3, #13]
 80a0f1c:	455a      	cmp	r2, fp
 80a0f1e:	d0dc      	beq.n	80a0eda <_ZN7FatFile4openEPS_P7fname_ti+0x1ae>
 80a0f20:	e7c6      	b.n	80a0eb0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a0f22:	28ff      	cmp	r0, #255	; 0xff
 80a0f24:	d8c4      	bhi.n	80a0eb0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
 80a0f26:	b2c0      	uxtb	r0, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80a0f28:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80a0f2c:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a0f2e:	f8dd c020 	ldr.w	ip, [sp, #32]
 80a0f32:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80a0f34:	bf98      	it	ls
 80a0f36:	3020      	addls	r0, #32
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a0f38:	f811 100c 	ldrb.w	r1, [r1, ip]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80a0f3c:	bf98      	it	ls
 80a0f3e:	b2c0      	uxtbls	r0, r0
 80a0f40:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 80a0f44:	f1bc 0f19 	cmp.w	ip, #25
 80a0f48:	bf9c      	itt	ls
 80a0f4a:	3120      	addls	r1, #32
 80a0f4c:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a0f4e:	4281      	cmp	r1, r0
 80a0f50:	d1ae      	bne.n	80a0eb0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
 80a0f52:	3201      	adds	r2, #1
 80a0f54:	2a0d      	cmp	r2, #13
 80a0f56:	d1cc      	bne.n	80a0ef2 <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
 80a0f58:	e71a      	b.n	80a0d90 <_ZN7FatFile4openEPS_P7fname_ti+0x64>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 80a0f5a:	0708      	lsls	r0, r1, #28
 80a0f5c:	d4a8      	bmi.n	80a0eb0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
 80a0f5e:	b15e      	cbz	r6, 80a0f78 <_ZN7FatFile4openEPS_P7fname_ti+0x24c>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 80a0f60:	f1ba 0f01 	cmp.w	sl, #1
 80a0f64:	f47f aeed 	bne.w	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 80a0f68:	4618      	mov	r0, r3
 80a0f6a:	f7ff fd9d 	bl	80a0aa8 <_ZN7FatFile11lfnChecksumEPh>
 80a0f6e:	4558      	cmp	r0, fp
 80a0f70:	f47f aee7 	bne.w	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 80a0f74:	46b1      	mov	r9, r6
 80a0f76:	e00d      	b.n	80a0f94 <_ZN7FatFile4openEPS_P7fname_ti+0x268>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80a0f78:	220b      	movs	r2, #11
 80a0f7a:	4618      	mov	r0, r3
 80a0f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0f7e:	f001 fcf1 	bl	80a2964 <memcmp>
 80a0f82:	2800      	cmp	r0, #0
 80a0f84:	f47f af04 	bne.w	80a0d90 <_ZN7FatFile4openEPS_P7fname_ti+0x64>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 80a0f88:	f897 9000 	ldrb.w	r9, [r7]
 80a0f8c:	f019 0901 	ands.w	r9, r9, #1
 80a0f90:	f47f af78 	bne.w	80a0e84 <_ZN7FatFile4openEPS_P7fname_ti+0x158>
  if (oflag & O_EXCL) {
 80a0f94:	9b05      	ldr	r3, [sp, #20]
 80a0f96:	0519      	lsls	r1, r3, #20
 80a0f98:	f53f aed3 	bmi.w	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 80a0f9c:	4642      	mov	r2, r8
 80a0f9e:	4629      	mov	r1, r5
 80a0fa0:	9b05      	ldr	r3, [sp, #20]
 80a0fa2:	9806      	ldr	r0, [sp, #24]
 80a0fa4:	f8cd 9000 	str.w	r9, [sp]
 80a0fa8:	f7ff fbaf 	bl	80a070a <_ZN7FatFile15openCachedEntryEPS_tih>
 80a0fac:	e6ca      	b.n	80a0d44 <_ZN7FatFile4openEPS_P7fname_ti+0x18>
    dir = dirFile->readDirCache();
 80a0fae:	2100      	movs	r1, #0
 80a0fb0:	4628      	mov	r0, r5
 80a0fb2:	f7ff fb48 	bl	80a0646 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80a0fb6:	b9a0      	cbnz	r0, 80a0fe2 <_ZN7FatFile4openEPS_P7fname_ti+0x2b6>
      if (dirFile->getError()) {
 80a0fb8:	786b      	ldrb	r3, [r5, #1]
 80a0fba:	2b00      	cmp	r3, #0
 80a0fbc:	f47f aec1 	bne.w	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    if (!dirFile->addDirCluster()) {
 80a0fc0:	4628      	mov	r0, r5
 80a0fc2:	f7ff fa3f 	bl	80a0444 <_ZN7FatFile13addDirClusterEv>
 80a0fc6:	2800      	cmp	r0, #0
 80a0fc8:	f43f aebb 	beq.w	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    return m_blocksPerCluster;
 80a0fcc:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 80a0fce:	791b      	ldrb	r3, [r3, #4]
 80a0fd0:	2b01      	cmp	r3, #1
 80a0fd2:	f63f aefb 	bhi.w	80a0dcc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
  while (freeFound < freeNeed) {
 80a0fd6:	9b02      	ldr	r3, [sp, #8]
    freeFound += 16;
 80a0fd8:	3410      	adds	r4, #16
 80a0fda:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 80a0fdc:	42a3      	cmp	r3, r4
 80a0fde:	d8ef      	bhi.n	80a0fc0 <_ZN7FatFile4openEPS_P7fname_ti+0x294>
 80a0fe0:	e6f4      	b.n	80a0dcc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    freeFound++;
 80a0fe2:	3401      	adds	r4, #1
 80a0fe4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 80a0fe6:	e6ed      	b.n	80a0dc4 <_ZN7FatFile4openEPS_P7fname_ti+0x98>
    if (!dirFile->lfnUniqueSfn(fname)) {
 80a0fe8:	4639      	mov	r1, r7
 80a0fea:	4628      	mov	r0, r5
 80a0fec:	f7ff fe4a 	bl	80a0c84 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 80a0ff0:	2800      	cmp	r0, #0
 80a0ff2:	f47f aeef 	bne.w	80a0dd4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
 80a0ff6:	e6a4      	b.n	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80a0ff8:	bf14      	ite	ne
 80a0ffa:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80a0ffe:	2100      	moveq	r1, #0
 80a1000:	b289      	uxth	r1, r1
 80a1002:	e72c      	b.n	80a0e5e <_ZN7FatFile4openEPS_P7fname_ti+0x132>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80a1004:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 80a1008:	bf94      	ite	ls
 80a100a:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 80a100e:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
 80a1012:	8091      	strh	r1, [r2, #4]
 80a1014:	e72e      	b.n	80a0e74 <_ZN7FatFile4openEPS_P7fname_ti+0x148>
  dir = dirFile->readDirCache();
 80a1016:	4631      	mov	r1, r6
 80a1018:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 80a101a:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
 80a101e:	f7ff fb12 	bl	80a0646 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80a1022:	4604      	mov	r4, r0
 80a1024:	2800      	cmp	r0, #0
 80a1026:	f43f ae8c 	beq.w	80a0d42 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  memset(dir, 0, sizeof(dir_t));
 80a102a:	2220      	movs	r2, #32
 80a102c:	4631      	mov	r1, r6
 80a102e:	f001 fcb7 	bl	80a29a0 <memset>
  memcpy(dir->name, fname->sfn, 11);
 80a1032:	f8d7 300d 	ldr.w	r3, [r7, #13]
 80a1036:	6023      	str	r3, [r4, #0]
 80a1038:	f8d7 3011 	ldr.w	r3, [r7, #17]
 80a103c:	6063      	str	r3, [r4, #4]
 80a103e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80a1042:	8123      	strh	r3, [r4, #8]
 80a1044:	7dfb      	ldrb	r3, [r7, #23]
 80a1046:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 80a1048:	783b      	ldrb	r3, [r7, #0]
 80a104a:	f003 0318 	and.w	r3, r3, #24
 80a104e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 80a1050:	4b0f      	ldr	r3, [pc, #60]	; (80a1090 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 80a1052:	681b      	ldr	r3, [r3, #0]
 80a1054:	b19b      	cbz	r3, 80a107e <_ZN7FatFile4openEPS_P7fname_ti+0x352>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 80a1056:	f104 010e 	add.w	r1, r4, #14
 80a105a:	f104 0010 	add.w	r0, r4, #16
 80a105e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 80a1060:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 80a1062:	f3c8 184f 	ubfx	r8, r8, #5, #16
  dir->lastAccessDate = dir->creationDate;
 80a1066:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 80a1068:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 80a106a:	89e3      	ldrh	r3, [r4, #14]
 80a106c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 80a106e:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
 80a1070:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80a1074:	f043 0301 	orr.w	r3, r3, #1
 80a1078:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
 80a107c:	e78e      	b.n	80a0f9c <_ZN7FatFile4openEPS_P7fname_ti+0x270>
    dir->creationDate = FAT_DEFAULT_DATE;
 80a107e:	2321      	movs	r3, #33	; 0x21
 80a1080:	7423      	strb	r3, [r4, #16]
 80a1082:	2328      	movs	r3, #40	; 0x28
 80a1084:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 80a1086:	2308      	movs	r3, #8
 80a1088:	73a6      	strb	r6, [r4, #14]
 80a108a:	73e3      	strb	r3, [r4, #15]
 80a108c:	e7e8      	b.n	80a1060 <_ZN7FatFile4openEPS_P7fname_ti+0x334>
 80a108e:	bf00      	nop
 80a1090:	20000540 	.word	0x20000540

080a1094 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1094:	b570      	push	{r4, r5, r6, lr}
 80a1096:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1098:	460c      	mov	r4, r1
    }
 80a109a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a109c:	b149      	cbz	r1, 80a10b2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a109e:	f001 fcb5 	bl	80a2a0c <strlen>
 80a10a2:	682b      	ldr	r3, [r5, #0]
 80a10a4:	4602      	mov	r2, r0
 80a10a6:	4621      	mov	r1, r4
 80a10a8:	4628      	mov	r0, r5
    }
 80a10aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a10ae:	68db      	ldr	r3, [r3, #12]
 80a10b0:	4718      	bx	r3
    }
 80a10b2:	bd70      	pop	{r4, r5, r6, pc}

080a10b4 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80a10b4:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 80a10b6:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 80a10b8:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 80a10ba:	07da      	lsls	r2, r3, #31
 80a10bc:	d51f      	bpl.n	80a10fe <_ZN8FatCache4syncEv+0x4a>
    return m_blockDev->writeBlock(block, src);
 80a10be:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 80a10c0:	f100 060c 	add.w	r6, r0, #12
 80a10c4:	6881      	ldr	r1, [r0, #8]
 80a10c6:	4632      	mov	r2, r6
 80a10c8:	6818      	ldr	r0, [r3, #0]
 80a10ca:	f000 fb88 	bl	80a17de <_ZN9SdSpiCard10writeBlockEmPKh>
 80a10ce:	4605      	mov	r5, r0
 80a10d0:	b910      	cbnz	r0, 80a10d8 <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 80a10d2:	2500      	movs	r5, #0
}
 80a10d4:	4628      	mov	r0, r5
 80a10d6:	bd70      	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 80a10d8:	7823      	ldrb	r3, [r4, #0]
 80a10da:	079b      	lsls	r3, r3, #30
 80a10dc:	d404      	bmi.n	80a10e8 <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 80a10de:	7823      	ldrb	r3, [r4, #0]
 80a10e0:	f023 0301 	bic.w	r3, r3, #1
 80a10e4:	7023      	strb	r3, [r4, #0]
 80a10e6:	e7f5      	b.n	80a10d4 <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80a10e8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80a10ec:	6919      	ldr	r1, [r3, #16]
 80a10ee:	4632      	mov	r2, r6
 80a10f0:	4401      	add	r1, r0
 80a10f2:	6818      	ldr	r0, [r3, #0]
 80a10f4:	f000 fb73 	bl	80a17de <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80a10f8:	2800      	cmp	r0, #0
 80a10fa:	d1f0      	bne.n	80a10de <_ZN8FatCache4syncEv+0x2a>
 80a10fc:	e7e9      	b.n	80a10d2 <_ZN8FatCache4syncEv+0x1e>
  return true;
 80a10fe:	2501      	movs	r5, #1
 80a1100:	e7e8      	b.n	80a10d4 <_ZN8FatCache4syncEv+0x20>

080a1102 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a1102:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 80a1104:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a1106:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 80a1108:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a110a:	460e      	mov	r6, r1
 80a110c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80a110e:	d009      	beq.n	80a1124 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 80a1110:	f7ff ffd0 	bl	80a10b4 <_ZN8FatCache4syncEv>
 80a1114:	b908      	cbnz	r0, 80a111a <_ZN8FatCache4readEmh+0x18>
  return 0;
 80a1116:	2000      	movs	r0, #0
}
 80a1118:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 80a111a:	076b      	lsls	r3, r5, #29
 80a111c:	d50a      	bpl.n	80a1134 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 80a111e:	2300      	movs	r3, #0
    m_lbn = lbn;
 80a1120:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 80a1122:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 80a1124:	4620      	mov	r0, r4
 80a1126:	7822      	ldrb	r2, [r4, #0]
 80a1128:	f005 0503 	and.w	r5, r5, #3
 80a112c:	4315      	orrs	r5, r2
 80a112e:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 80a1132:	e7f1      	b.n	80a1118 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
 80a1134:	6863      	ldr	r3, [r4, #4]
 80a1136:	4631      	mov	r1, r6
 80a1138:	6818      	ldr	r0, [r3, #0]
 80a113a:	f104 020c 	add.w	r2, r4, #12
 80a113e:	f000 fac5 	bl	80a16cc <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80a1142:	2800      	cmp	r0, #0
 80a1144:	d1eb      	bne.n	80a111e <_ZN8FatCache4readEmh+0x1c>
 80a1146:	e7e6      	b.n	80a1116 <_ZN8FatCache4readEmh+0x14>

080a1148 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80a1148:	7983      	ldrb	r3, [r0, #6]
 80a114a:	3902      	subs	r1, #2
 80a114c:	6940      	ldr	r0, [r0, #20]
 80a114e:	4099      	lsls	r1, r3
}
 80a1150:	4408      	add	r0, r1
 80a1152:	4770      	bx	lr

080a1154 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a1154:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80a1156:	b570      	push	{r4, r5, r6, lr}
 80a1158:	4605      	mov	r5, r0
 80a115a:	460c      	mov	r4, r1
 80a115c:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 80a115e:	d802      	bhi.n	80a1166 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80a1160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1164:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 80a1166:	69c3      	ldr	r3, [r0, #28]
 80a1168:	428b      	cmp	r3, r1
 80a116a:	d3f9      	bcc.n	80a1160 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
 80a116c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 80a116e:	2b20      	cmp	r3, #32
 80a1170:	d116      	bne.n	80a11a0 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
 80a1172:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 80a1174:	2202      	movs	r2, #2
 80a1176:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80a117a:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a117e:	f7ff ffc0 	bl	80a1102 <_ZN8FatCache4readEmh>
    if (!pc) {
 80a1182:	2800      	cmp	r0, #0
 80a1184:	d0ec      	beq.n	80a1160 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 80a1186:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80a118a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80a118e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 80a1192:	69ea      	ldr	r2, [r5, #28]
 80a1194:	429a      	cmp	r2, r3
  return 1;
 80a1196:	bf2a      	itet	cs
 80a1198:	2001      	movcs	r0, #1
    return 0;
 80a119a:	2000      	movcc	r0, #0
  *value = next;
 80a119c:	6033      	strcs	r3, [r6, #0]
  return 1;
 80a119e:	e7e1      	b.n	80a1164 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
 80a11a0:	2b10      	cmp	r3, #16
 80a11a2:	d1dd      	bne.n	80a1160 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 80a11a4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80a11a8:	6981      	ldr	r1, [r0, #24]
 80a11aa:	2202      	movs	r2, #2
 80a11ac:	4419      	add	r1, r3
 80a11ae:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a11b2:	f7ff ffa6 	bl	80a1102 <_ZN8FatCache4readEmh>
    if (!pc) {
 80a11b6:	2800      	cmp	r0, #0
 80a11b8:	d0d2      	beq.n	80a1160 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
 80a11ba:	b2e4      	uxtb	r4, r4
 80a11bc:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 80a11c0:	e7e7      	b.n	80a1192 <_ZN9FatVolume6fatGetEmPm+0x3e>

080a11c2 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a11c2:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80a11c4:	b538      	push	{r3, r4, r5, lr}
 80a11c6:	460c      	mov	r4, r1
 80a11c8:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 80a11ca:	d801      	bhi.n	80a11d0 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 80a11cc:	2000      	movs	r0, #0
}
 80a11ce:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 80a11d0:	69c3      	ldr	r3, [r0, #28]
 80a11d2:	428b      	cmp	r3, r1
 80a11d4:	d3fa      	bcc.n	80a11cc <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
 80a11d6:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 80a11d8:	2b20      	cmp	r3, #32
 80a11da:	d10f      	bne.n	80a11fc <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
 80a11dc:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 80a11de:	2203      	movs	r2, #3
 80a11e0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80a11e4:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a11e8:	f7ff ff8b 	bl	80a1102 <_ZN8FatCache4readEmh>
    if (!pc) {
 80a11ec:	2800      	cmp	r0, #0
 80a11ee:	d0ed      	beq.n	80a11cc <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
 80a11f0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80a11f4:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 80a11f8:	2001      	movs	r0, #1
 80a11fa:	e7e8      	b.n	80a11ce <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
 80a11fc:	2b10      	cmp	r3, #16
 80a11fe:	d1e5      	bne.n	80a11cc <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 80a1200:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80a1204:	6981      	ldr	r1, [r0, #24]
 80a1206:	2203      	movs	r2, #3
 80a1208:	4419      	add	r1, r3
 80a120a:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a120e:	f7ff ff78 	bl	80a1102 <_ZN8FatCache4readEmh>
    if (!pc) {
 80a1212:	2800      	cmp	r0, #0
 80a1214:	d0da      	beq.n	80a11cc <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
 80a1216:	b2e4      	uxtb	r4, r4
 80a1218:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 80a121c:	e7ec      	b.n	80a11f8 <_ZN9FatVolume6fatPutEmm+0x36>

080a121e <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80a121e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
 80a1222:	68c4      	ldr	r4, [r0, #12]
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80a1224:	4605      	mov	r5, r0
  if (m_allocSearchStart < current) {
 80a1226:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80a1228:	460e      	mov	r6, r1
 80a122a:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
 80a122c:	d301      	bcc.n	80a1232 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
 80a122e:	2701      	movs	r7, #1
 80a1230:	e001      	b.n	80a1236 <_ZN9FatVolume15allocateClusterEmPm+0x18>
 80a1232:	460c      	mov	r4, r1
    setStart = false;
 80a1234:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
 80a1236:	69eb      	ldr	r3, [r5, #28]
    find++;
 80a1238:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 80a123a:	42a3      	cmp	r3, r4
 80a123c:	d202      	bcs.n	80a1244 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
 80a123e:	b9c7      	cbnz	r7, 80a1272 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
 80a1240:	68ec      	ldr	r4, [r5, #12]
 80a1242:	e7f4      	b.n	80a122e <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
 80a1244:	42a6      	cmp	r6, r4
 80a1246:	d014      	beq.n	80a1272 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
 80a1248:	4621      	mov	r1, r4
 80a124a:	4628      	mov	r0, r5
 80a124c:	aa01      	add	r2, sp, #4
 80a124e:	f7ff ff81 	bl	80a1154 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80a1252:	2800      	cmp	r0, #0
 80a1254:	db0d      	blt.n	80a1272 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
 80a1256:	d0ee      	beq.n	80a1236 <_ZN9FatVolume15allocateClusterEmPm+0x18>
 80a1258:	9b01      	ldr	r3, [sp, #4]
 80a125a:	2b00      	cmp	r3, #0
 80a125c:	d1eb      	bne.n	80a1236 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
 80a125e:	b107      	cbz	r7, 80a1262 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
 80a1260:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 80a1262:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80a1266:	4621      	mov	r1, r4
 80a1268:	4628      	mov	r0, r5
 80a126a:	f7ff ffaa 	bl	80a11c2 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 80a126e:	4607      	mov	r7, r0
 80a1270:	b920      	cbnz	r0, 80a127c <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
 80a1272:	2700      	movs	r7, #0
}
 80a1274:	4638      	mov	r0, r7
 80a1276:	b002      	add	sp, #8
 80a1278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
 80a127c:	b916      	cbnz	r6, 80a1284 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
 80a127e:	f8c8 4000 	str.w	r4, [r8]
  return true;
 80a1282:	e7f7      	b.n	80a1274 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
 80a1284:	4622      	mov	r2, r4
 80a1286:	4631      	mov	r1, r6
 80a1288:	4628      	mov	r0, r5
 80a128a:	f7ff ff9a 	bl	80a11c2 <_ZN9FatVolume6fatPutEmm>
 80a128e:	2800      	cmp	r0, #0
 80a1290:	d1f5      	bne.n	80a127e <_ZN9FatVolume15allocateClusterEmPm+0x60>
 80a1292:	e7ee      	b.n	80a1272 <_ZN9FatVolume15allocateClusterEmPm+0x54>

080a1294 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 80a1294:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1296:	4605      	mov	r5, r0
 80a1298:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 80a129a:	4621      	mov	r1, r4
 80a129c:	4628      	mov	r0, r5
 80a129e:	aa01      	add	r2, sp, #4
 80a12a0:	f7ff ff58 	bl	80a1154 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80a12a4:	1e06      	subs	r6, r0, #0
 80a12a6:	db10      	blt.n	80a12ca <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 80a12a8:	2200      	movs	r2, #0
 80a12aa:	4621      	mov	r1, r4
 80a12ac:	4628      	mov	r0, r5
 80a12ae:	f7ff ff88 	bl	80a11c2 <_ZN9FatVolume6fatPutEmm>
 80a12b2:	b150      	cbz	r0, 80a12ca <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 80a12b4:	68eb      	ldr	r3, [r5, #12]
 80a12b6:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
 80a12b8:	bf24      	itt	cs
 80a12ba:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
 80a12be:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
 80a12c0:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
 80a12c2:	2e00      	cmp	r6, #0
 80a12c4:	d1e9      	bne.n	80a129a <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 80a12c6:	b002      	add	sp, #8
 80a12c8:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 80a12ca:	2000      	movs	r0, #0
 80a12cc:	e7fb      	b.n	80a12c6 <_ZN9FatVolume9freeChainEm+0x32>

080a12ce <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 80a12ce:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 80a12d0:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 80a12d2:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 80a12d4:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 80a12d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
 80a12da:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80a12dc:	460d      	mov	r5, r1
  m_fatType = 0;
 80a12de:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 80a12e0:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
 80a12e4:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
 80a12e6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80a12ea:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
 80a12ec:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
 80a12f0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 80a12f4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
  if (part) {
 80a12f8:	b1b9      	cbz	r1, 80a132a <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 80a12fa:	2904      	cmp	r1, #4
 80a12fc:	d901      	bls.n	80a1302 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 80a12fe:	2000      	movs	r0, #0
}
 80a1300:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 80a1302:	4611      	mov	r1, r2
 80a1304:	4630      	mov	r0, r6
 80a1306:	f7ff fefc 	bl	80a1102 <_ZN8FatCache4readEmh>
    if (!pc) {
 80a130a:	2800      	cmp	r0, #0
 80a130c:	d0f7      	beq.n	80a12fe <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 80a130e:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 80a1312:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 80a1316:	065b      	lsls	r3, r3, #25
 80a1318:	d1f1      	bne.n	80a12fe <_ZN9FatVolume4initEh+0x30>
 80a131a:	f105 011b 	add.w	r1, r5, #27
 80a131e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80a1322:	f8d0 5006 	ldr.w	r5, [r0, #6]
 80a1326:	2d00      	cmp	r5, #0
 80a1328:	d0e9      	beq.n	80a12fe <_ZN9FatVolume4initEh+0x30>
 80a132a:	2200      	movs	r2, #0
 80a132c:	4629      	mov	r1, r5
 80a132e:	4630      	mov	r0, r6
 80a1330:	f7ff fee7 	bl	80a1102 <_ZN8FatCache4readEmh>
  if (!pc) {
 80a1334:	2800      	cmp	r0, #0
 80a1336:	d0e2      	beq.n	80a12fe <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 80a1338:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 80a133c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80a1340:	d1dd      	bne.n	80a12fe <_ZN9FatVolume4initEh+0x30>
 80a1342:	7c03      	ldrb	r3, [r0, #16]
 80a1344:	2b02      	cmp	r3, #2
 80a1346:	d1da      	bne.n	80a12fe <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 80a1348:	89c3      	ldrh	r3, [r0, #14]
 80a134a:	2b00      	cmp	r3, #0
 80a134c:	d0d7      	beq.n	80a12fe <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80a134e:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 80a1350:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 80a1352:	1e4b      	subs	r3, r1, #1
 80a1354:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 80a1356:	2300      	movs	r3, #0
 80a1358:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80a135a:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80a135c:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80a135e:	4299      	cmp	r1, r3
 80a1360:	d007      	beq.n	80a1372 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 80a1362:	3e01      	subs	r6, #1
 80a1364:	d0cb      	beq.n	80a12fe <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80a1366:	79a2      	ldrb	r2, [r4, #6]
 80a1368:	005b      	lsls	r3, r3, #1
 80a136a:	3201      	adds	r2, #1
 80a136c:	b2db      	uxtb	r3, r3
 80a136e:	71a2      	strb	r2, [r4, #6]
 80a1370:	e7f5      	b.n	80a135e <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 80a1372:	8ac1      	ldrh	r1, [r0, #22]
 80a1374:	b901      	cbnz	r1, 80a1378 <_ZN9FatVolume4initEh+0xaa>
 80a1376:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80a1378:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 80a137a:	89c3      	ldrh	r3, [r0, #14]
 80a137c:	442b      	add	r3, r5
 80a137e:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80a1380:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80a1384:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80a1388:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80a138a:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 80a138c:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 80a1390:	0149      	lsls	r1, r1, #5
 80a1392:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 80a1396:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 80a139a:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 80a139c:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 80a13a0:	b902      	cbnz	r2, 80a13a4 <_ZN9FatVolume4initEh+0xd6>
 80a13a2:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 80a13a4:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 80a13a6:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 80a13a8:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 80a13aa:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 80a13ac:	1c4b      	adds	r3, r1, #1
 80a13ae:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
 80a13b0:	f640 73f4 	movw	r3, #4084	; 0xff4
 80a13b4:	4299      	cmp	r1, r3
 80a13b6:	d802      	bhi.n	80a13be <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
 80a13b8:	230c      	movs	r3, #12
 80a13ba:	71e3      	strb	r3, [r4, #7]
 80a13bc:	e79f      	b.n	80a12fe <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 80a13be:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80a13c2:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 80a13c4:	bf89      	itett	hi
 80a13c6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 80a13c8:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 80a13ca:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 80a13cc:	2320      	movhi	r3, #32
  return true;
 80a13ce:	2001      	movs	r0, #1
    m_fatType = 32;
 80a13d0:	71e3      	strb	r3, [r4, #7]
 80a13d2:	e795      	b.n	80a1300 <_ZN9FatVolume4initEh+0x32>

080a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a13d4:	f000 bacc 	b.w	80a1970 <_ZN14SdSpiAltDriver4sendEh>

080a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
 80a13d8:	f000 baaf 	b.w	80a193a <_ZN14SdSpiAltDriver7receiveEv>

080a13dc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 80a13dc:	b570      	push	{r4, r5, r6, lr}
 80a13de:	460d      	mov	r5, r1
 80a13e0:	4614      	mov	r4, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a13e2:	f000 fb05 	bl	80a19f0 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 80a13e6:	4e0c      	ldr	r6, [pc, #48]	; (80a1418 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 80a13e8:	6833      	ldr	r3, [r6, #0]
 80a13ea:	1ac0      	subs	r0, r0, r3
 80a13ec:	4b0b      	ldr	r3, [pc, #44]	; (80a141c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 80a13ee:	4298      	cmp	r0, r3
 80a13f0:	d908      	bls.n	80a1404 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a13f2:	f000 fb05 	bl	80a1a00 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a13f6:	4b0a      	ldr	r3, [pc, #40]	; (80a1420 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 80a13f8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a13fa:	f000 fc67 	bl	80a1ccc <spark_process>
 80a13fe:	f000 faf7 	bl	80a19f0 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 80a1402:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1404:	f000 fafc 	bl	80a1a00 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 80a1408:	b280      	uxth	r0, r0
 80a140a:	1b40      	subs	r0, r0, r5
}
 80a140c:	42a0      	cmp	r0, r4
 80a140e:	bfd4      	ite	le
 80a1410:	2000      	movle	r0, #0
 80a1412:	2001      	movgt	r0, #1
 80a1414:	bd70      	pop	{r4, r5, r6, pc}
 80a1416:	bf00      	nop
 80a1418:	20000548 	.word	0x20000548
 80a141c:	000186a0 	.word	0x000186a0
 80a1420:	200005c0 	.word	0x200005c0

080a1424 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80a1424:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 80a1426:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
 80a1428:	4604      	mov	r4, r0
  if (!m_spiActive) {
 80a142a:	b94d      	cbnz	r5, 80a1440 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
 80a142c:	6840      	ldr	r0, [r0, #4]
 80a142e:	f000 fa6d 	bl	80a190c <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
 80a1432:	6863      	ldr	r3, [r4, #4]
 80a1434:	4629      	mov	r1, r5
 80a1436:	7d18      	ldrb	r0, [r3, #20]
 80a1438:	f001 f9e9 	bl	80a280e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 80a143c:	2301      	movs	r3, #1
 80a143e:	7223      	strb	r3, [r4, #8]
  }
}
 80a1440:	bd38      	pop	{r3, r4, r5, pc}

080a1442 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80a1442:	b510      	push	{r4, lr}
  if (m_spiActive) {
 80a1444:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
 80a1446:	4604      	mov	r4, r0
  if (m_spiActive) {
 80a1448:	b16b      	cbz	r3, 80a1466 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
 80a144a:	6843      	ldr	r3, [r0, #4]
 80a144c:	2101      	movs	r1, #1
 80a144e:	7d18      	ldrb	r0, [r3, #20]
 80a1450:	f001 f9dd 	bl	80a280e <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
 80a1454:	21ff      	movs	r1, #255	; 0xff
 80a1456:	6860      	ldr	r0, [r4, #4]
 80a1458:	f7ff ffbc 	bl	80a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
 80a145c:	6860      	ldr	r0, [r4, #4]
 80a145e:	f000 fa69 	bl	80a1934 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
 80a1462:	2300      	movs	r3, #0
 80a1464:	7223      	strb	r3, [r4, #8]
  }
}
 80a1466:	bd10      	pop	{r4, pc}

080a1468 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80a1468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a146a:	4604      	mov	r4, r0
 80a146c:	460d      	mov	r5, r1
 80a146e:	4616      	mov	r6, r2
 80a1470:	f000 fac6 	bl	80a1a00 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 80a1474:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
 80a1476:	6860      	ldr	r0, [r4, #4]
 80a1478:	f7ff ffae 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80a147c:	28ff      	cmp	r0, #255	; 0xff
 80a147e:	7260      	strb	r0, [r4, #9]
 80a1480:	d10e      	bne.n	80a14a0 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 80a1482:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1486:	4639      	mov	r1, r7
 80a1488:	4620      	mov	r0, r4
 80a148a:	f7ff ffa7 	bl	80a13dc <_ZN9SdSpiCard10isTimedOutEtt>
 80a148e:	2800      	cmp	r0, #0
 80a1490:	d0f1      	beq.n	80a1476 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 80a1492:	2355      	movs	r3, #85	; 0x55
  spiStop();
 80a1494:	4620      	mov	r0, r4
 80a1496:	7023      	strb	r3, [r4, #0]
 80a1498:	f7ff ffd3 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a149c:	2000      	movs	r0, #0
}
 80a149e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 80a14a0:	28fe      	cmp	r0, #254	; 0xfe
 80a14a2:	d001      	beq.n	80a14a8 <_ZN9SdSpiCard8readDataEPhj+0x40>
 80a14a4:	2350      	movs	r3, #80	; 0x50
 80a14a6:	e7f5      	b.n	80a1494 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
 80a14a8:	4632      	mov	r2, r6
 80a14aa:	4629      	mov	r1, r5
 80a14ac:	6860      	ldr	r0, [r4, #4]
 80a14ae:	f000 fa49 	bl	80a1944 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
 80a14b2:	7260      	strb	r0, [r4, #9]
 80a14b4:	b108      	cbz	r0, 80a14ba <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
 80a14b6:	2360      	movs	r3, #96	; 0x60
 80a14b8:	e7ec      	b.n	80a1494 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
 80a14ba:	6860      	ldr	r0, [r4, #4]
 80a14bc:	f7ff ff8c 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
 80a14c0:	6860      	ldr	r0, [r4, #4]
 80a14c2:	f7ff ff89 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
 80a14c6:	2001      	movs	r0, #1
 80a14c8:	e7e9      	b.n	80a149e <_ZN9SdSpiCard8readDataEPhj+0x36>

080a14ca <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 80a14ca:	b570      	push	{r4, r5, r6, lr}
 80a14cc:	4604      	mov	r4, r0
 80a14ce:	460e      	mov	r6, r1
 80a14d0:	f000 fa96 	bl	80a1a00 <HAL_Timer_Get_Milli_Seconds>
 80a14d4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 80a14d6:	4632      	mov	r2, r6
 80a14d8:	4629      	mov	r1, r5
 80a14da:	4620      	mov	r0, r4
 80a14dc:	f7ff ff7e 	bl	80a13dc <_ZN9SdSpiCard10isTimedOutEtt>
 80a14e0:	b930      	cbnz	r0, 80a14f0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
 80a14e2:	6860      	ldr	r0, [r4, #4]
 80a14e4:	f7ff ff78 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80a14e8:	28ff      	cmp	r0, #255	; 0xff
 80a14ea:	d1f4      	bne.n	80a14d6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 80a14ec:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 80a14ee:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 80a14f0:	2000      	movs	r0, #0
 80a14f2:	e7fc      	b.n	80a14ee <_ZN9SdSpiCard11waitNotBusyEt+0x24>

080a14f4 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80a14f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
 80a14f6:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80a14f8:	4604      	mov	r4, r0
 80a14fa:	460d      	mov	r5, r1
 80a14fc:	9201      	str	r2, [sp, #4]
  if (!m_spiActive) {
 80a14fe:	b90b      	cbnz	r3, 80a1504 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 80a1500:	f7ff ff90 	bl	80a1424 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
 80a1504:	b125      	cbz	r5, 80a1510 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
 80a1506:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a150a:	4620      	mov	r0, r4
 80a150c:	f7ff ffdd 	bl	80a14ca <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
 80a1510:	6860      	ldr	r0, [r4, #4]
 80a1512:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80a1516:	f7ff ff5d 	bl	80a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>
 80a151a:	2603      	movs	r6, #3
    spiSend(pa[i]);
 80a151c:	af01      	add	r7, sp, #4
 80a151e:	5db9      	ldrb	r1, [r7, r6]
 80a1520:	6860      	ldr	r0, [r4, #4]
 80a1522:	f7ff ff57 	bl	80a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
 80a1526:	3e01      	subs	r6, #1
 80a1528:	d2f9      	bcs.n	80a151e <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80a152a:	2d00      	cmp	r5, #0
 80a152c:	bf0c      	ite	eq
 80a152e:	2195      	moveq	r1, #149	; 0x95
 80a1530:	2187      	movne	r1, #135	; 0x87
 80a1532:	6860      	ldr	r0, [r4, #4]
 80a1534:	f7ff ff4e 	bl	80a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
 80a1538:	6860      	ldr	r0, [r4, #4]
 80a153a:	f7ff ff4d 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80a153e:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 80a1540:	6860      	ldr	r0, [r4, #4]
 80a1542:	f7ff ff49 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80a1546:	0603      	lsls	r3, r0, #24
 80a1548:	7260      	strb	r0, [r4, #9]
 80a154a:	d503      	bpl.n	80a1554 <_ZN9SdSpiCard11cardCommandEhm+0x60>
 80a154c:	3d01      	subs	r5, #1
 80a154e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a1552:	d1f5      	bne.n	80a1540 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
 80a1554:	b003      	add	sp, #12
 80a1556:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1558 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 80a1558:	b570      	push	{r4, r5, r6, lr}
 80a155a:	4604      	mov	r4, r0
 80a155c:	460d      	mov	r5, r1
 80a155e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 80a1560:	2137      	movs	r1, #55	; 0x37
 80a1562:	2200      	movs	r2, #0
 80a1564:	f7ff ffc6 	bl	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80a1568:	4632      	mov	r2, r6
 80a156a:	4629      	mov	r1, r5
 80a156c:	4620      	mov	r0, r4
  }
 80a156e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
 80a1572:	f7ff bfbf 	b.w	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
	...

080a1578 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80a1578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 80a157c:	2500      	movs	r5, #0
  m_spiDriver = spi;
 80a157e:	6041      	str	r1, [r0, #4]
  m_spiActive = false;
 80a1580:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 80a1582:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 80a1584:	7285      	strb	r5, [r0, #10]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80a1586:	4604      	mov	r4, r0
 80a1588:	4690      	mov	r8, r2
 80a158a:	461e      	mov	r6, r3
 80a158c:	f000 fa38 	bl	80a1a00 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
 80a1590:	4641      	mov	r1, r8
 80a1592:	4607      	mov	r7, r0
 80a1594:	6860      	ldr	r0, [r4, #4]
 80a1596:	f000 f9bd 	bl	80a1914 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 80a159a:	6863      	ldr	r3, [r4, #4]
 80a159c:	4a4a      	ldr	r2, [pc, #296]	; (80a16c8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x150>)
 80a159e:	721d      	strb	r5, [r3, #8]
 80a15a0:	2501      	movs	r5, #1
 80a15a2:	60da      	str	r2, [r3, #12]
 80a15a4:	821d      	strh	r5, [r3, #16]
  spiStart();
 80a15a6:	4620      	mov	r0, r4
 80a15a8:	f7ff ff3c 	bl	80a1424 <_ZN9SdSpiCard8spiStartEv>
 80a15ac:	6863      	ldr	r3, [r4, #4]
 80a15ae:	4629      	mov	r1, r5
 80a15b0:	7d18      	ldrb	r0, [r3, #20]
 80a15b2:	f001 f92c 	bl	80a280e <digitalWrite>
 80a15b6:	250a      	movs	r5, #10
    spiSend(0XFF);
 80a15b8:	21ff      	movs	r1, #255	; 0xff
 80a15ba:	6860      	ldr	r0, [r4, #4]
  for (uint8_t i = 0; i < 10; i++) {
 80a15bc:	3d01      	subs	r5, #1
    spiSend(0XFF);
 80a15be:	f7ff ff09 	bl	80a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
 80a15c2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a15c6:	d1f7      	bne.n	80a15b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
 80a15c8:	6863      	ldr	r3, [r4, #4]
 80a15ca:	4629      	mov	r1, r5
 80a15cc:	7d18      	ldrb	r0, [r3, #20]
 80a15ce:	f001 f91e 	bl	80a280e <digitalWrite>
  }
 80a15d2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 80a15d4:	2200      	movs	r2, #0
 80a15d6:	4620      	mov	r0, r4
 80a15d8:	4611      	mov	r1, r2
 80a15da:	f7ff ff8b 	bl	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
 80a15de:	2801      	cmp	r0, #1
 80a15e0:	4680      	mov	r8, r0
 80a15e2:	d018      	beq.n	80a1616 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
 80a15e4:	3d01      	subs	r5, #1
 80a15e6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a15ea:	d107      	bne.n	80a15fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
 80a15ec:	2320      	movs	r3, #32
  spiStop();
 80a15ee:	4620      	mov	r0, r4
 80a15f0:	7023      	strb	r3, [r4, #0]
 80a15f2:	f7ff ff26 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a15f6:	2000      	movs	r0, #0
}
 80a15f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
 80a15fc:	21fd      	movs	r1, #253	; 0xfd
 80a15fe:	6860      	ldr	r0, [r4, #4]
 80a1600:	f7ff fee8 	bl	80a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>
 80a1604:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
 80a1608:	6860      	ldr	r0, [r4, #4]
 80a160a:	f7ff fee5 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
 80a160e:	f1b8 0801 	subs.w	r8, r8, #1
 80a1612:	d1f9      	bne.n	80a1608 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
 80a1614:	e7de      	b.n	80a15d4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80a1616:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80a161a:	2108      	movs	r1, #8
 80a161c:	4620      	mov	r0, r4
 80a161e:	f7ff ff69 	bl	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
 80a1622:	2805      	cmp	r0, #5
 80a1624:	d114      	bne.n	80a1650 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80a1626:	2500      	movs	r5, #0
    m_type = value;
 80a1628:	f884 800a 	strb.w	r8, [r4, #10]
 80a162c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 80a162e:	462a      	mov	r2, r5
 80a1630:	2129      	movs	r1, #41	; 0x29
 80a1632:	4620      	mov	r0, r4
 80a1634:	f7ff ff90 	bl	80a1558 <_ZN9SdSpiCard8cardAcmdEhm>
 80a1638:	4602      	mov	r2, r0
 80a163a:	b1d8      	cbz	r0, 80a1674 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 80a163c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80a1640:	4639      	mov	r1, r7
 80a1642:	4620      	mov	r0, r4
 80a1644:	f7ff feca 	bl	80a13dc <_ZN9SdSpiCard10isTimedOutEtt>
 80a1648:	2800      	cmp	r0, #0
 80a164a:	d0f0      	beq.n	80a162e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
 80a164c:	2343      	movs	r3, #67	; 0x43
 80a164e:	e7ce      	b.n	80a15ee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
 80a1650:	2504      	movs	r5, #4
      m_status = spiReceive();
 80a1652:	6860      	ldr	r0, [r4, #4]
 80a1654:	f7ff fec0 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
 80a1658:	3d01      	subs	r5, #1
 80a165a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80a165e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
 80a1660:	d1f7      	bne.n	80a1652 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
 80a1662:	28aa      	cmp	r0, #170	; 0xaa
 80a1664:	d104      	bne.n	80a1670 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
 80a1666:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80a1668:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80a166c:	72a3      	strb	r3, [r4, #10]
    return m_type;
 80a166e:	e7dd      	b.n	80a162c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
 80a1670:	2325      	movs	r3, #37	; 0x25
 80a1672:	e7bc      	b.n	80a15ee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
 80a1674:	7aa3      	ldrb	r3, [r4, #10]
 80a1676:	2b02      	cmp	r3, #2
 80a1678:	d119      	bne.n	80a16ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x136>
    if (cardCommand(CMD58, 0)) {
 80a167a:	213a      	movs	r1, #58	; 0x3a
 80a167c:	4620      	mov	r0, r4
 80a167e:	f7ff ff39 	bl	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
 80a1682:	b108      	cbz	r0, 80a1688 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
 80a1684:	2337      	movs	r3, #55	; 0x37
 80a1686:	e7b2      	b.n	80a15ee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
 80a1688:	6860      	ldr	r0, [r4, #4]
 80a168a:	f7ff fea5 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80a168e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80a1692:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 80a1694:	bf08      	it	eq
 80a1696:	2303      	moveq	r3, #3
      spiReceive();
 80a1698:	6860      	ldr	r0, [r4, #4]
 80a169a:	bf08      	it	eq
 80a169c:	72a3      	strbeq	r3, [r4, #10]
 80a169e:	f7ff fe9b 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80a16a2:	6860      	ldr	r0, [r4, #4]
 80a16a4:	f7ff fe98 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80a16a8:	6860      	ldr	r0, [r4, #4]
 80a16aa:	f7ff fe95 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
 80a16ae:	4620      	mov	r0, r4
 80a16b0:	f7ff fec7 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
 80a16b4:	7930      	ldrb	r0, [r6, #4]
  m_spiDriver->setSpiSettings(settings);
 80a16b6:	6863      	ldr	r3, [r4, #4]
 80a16b8:	68b1      	ldr	r1, [r6, #8]
 80a16ba:	89b2      	ldrh	r2, [r6, #12]
 80a16bc:	7218      	strb	r0, [r3, #8]
 80a16be:	60d9      	str	r1, [r3, #12]
  return true;
 80a16c0:	2001      	movs	r0, #1
 80a16c2:	821a      	strh	r2, [r3, #16]
 80a16c4:	e798      	b.n	80a15f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
 80a16c6:	bf00      	nop
 80a16c8:	0003d090 	.word	0x0003d090

080a16cc <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a16cc:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 80a16ce:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a16d0:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 80a16d2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a16d4:	bf18      	it	ne
 80a16d6:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 80a16d8:	460a      	mov	r2, r1
 80a16da:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a16dc:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 80a16de:	f7ff ff09 	bl	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
 80a16e2:	b130      	cbz	r0, 80a16f2 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 80a16e4:	2330      	movs	r3, #48	; 0x30
 80a16e6:	7023      	strb	r3, [r4, #0]
  spiStop();
 80a16e8:	4620      	mov	r0, r4
 80a16ea:	f7ff feaa 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a16ee:	2500      	movs	r5, #0
 80a16f0:	e00b      	b.n	80a170a <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 80a16f2:	4629      	mov	r1, r5
 80a16f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a16f8:	4620      	mov	r0, r4
 80a16fa:	f7ff feb5 	bl	80a1468 <_ZN9SdSpiCard8readDataEPhj>
 80a16fe:	4605      	mov	r5, r0
 80a1700:	2800      	cmp	r0, #0
 80a1702:	d0f1      	beq.n	80a16e8 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
 80a1704:	4620      	mov	r0, r4
 80a1706:	f7ff fe9c 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
}
 80a170a:	4628      	mov	r0, r5
 80a170c:	bd38      	pop	{r3, r4, r5, pc}

080a170e <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80a170e:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 80a1710:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80a1712:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 80a1714:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a1716:	bf18      	it	ne
 80a1718:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 80a171a:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80a171c:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 80a171e:	f7ff fee9 	bl	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
 80a1722:	b130      	cbz	r0, 80a1732 <_ZN9SdSpiCard9readStartEm+0x24>
 80a1724:	2331      	movs	r3, #49	; 0x31
  spiStop();
 80a1726:	4620      	mov	r0, r4
 80a1728:	7023      	strb	r3, [r4, #0]
 80a172a:	f7ff fe8a 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a172e:	2000      	movs	r0, #0
}
 80a1730:	bd10      	pop	{r4, pc}
  return true;
 80a1732:	2001      	movs	r0, #1
 80a1734:	e7fc      	b.n	80a1730 <_ZN9SdSpiCard9readStartEm+0x22>

080a1736 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 80a1736:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 80a1738:	2200      	movs	r2, #0
 80a173a:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 80a173c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 80a173e:	f7ff fed9 	bl	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
 80a1742:	b130      	cbz	r0, 80a1752 <_ZN9SdSpiCard8readStopEv+0x1c>
 80a1744:	2328      	movs	r3, #40	; 0x28
  spiStop();
 80a1746:	4620      	mov	r0, r4
 80a1748:	7023      	strb	r3, [r4, #0]
 80a174a:	f7ff fe7a 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a174e:	2000      	movs	r0, #0
}
 80a1750:	bd10      	pop	{r4, pc}
  spiStop();
 80a1752:	4620      	mov	r0, r4
 80a1754:	f7ff fe75 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
  return true;
 80a1758:	2001      	movs	r0, #1
 80a175a:	e7f9      	b.n	80a1750 <_ZN9SdSpiCard8readStopEv+0x1a>

080a175c <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 80a175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a175e:	4604      	mov	r4, r0
 80a1760:	4616      	mov	r6, r2
 80a1762:	461f      	mov	r7, r3
  if (!readStart(block)) {
 80a1764:	f7ff ffd3 	bl	80a170e <_ZN9SdSpiCard9readStartEm>
 80a1768:	b168      	cbz	r0, 80a1786 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 80a176a:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 80a176c:	b2ab      	uxth	r3, r5
 80a176e:	429f      	cmp	r7, r3
 80a1770:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 80a1774:	d909      	bls.n	80a178a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 80a1776:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a177a:	4620      	mov	r0, r4
 80a177c:	f7ff fe74 	bl	80a1468 <_ZN9SdSpiCard8readDataEPhj>
 80a1780:	3501      	adds	r5, #1
 80a1782:	2800      	cmp	r0, #0
 80a1784:	d1f2      	bne.n	80a176c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 80a1786:	2000      	movs	r0, #0
 80a1788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 80a178a:	4620      	mov	r0, r4
}
 80a178c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 80a1790:	f7ff bfd1 	b.w	80a1736 <_ZN9SdSpiCard8readStopEv>

080a1794 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 80a1794:	b538      	push	{r3, r4, r5, lr}
 80a1796:	4604      	mov	r4, r0
 80a1798:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 80a179a:	6840      	ldr	r0, [r0, #4]
 80a179c:	f7ff fe1a 	bl	80a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 80a17a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a17a4:	4629      	mov	r1, r5
 80a17a6:	6860      	ldr	r0, [r4, #4]
 80a17a8:	f000 f8e6 	bl	80a1978 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
 80a17ac:	21ff      	movs	r1, #255	; 0xff
 80a17ae:	6860      	ldr	r0, [r4, #4]
 80a17b0:	f7ff fe10 	bl	80a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
 80a17b4:	21ff      	movs	r1, #255	; 0xff
 80a17b6:	6860      	ldr	r0, [r4, #4]
 80a17b8:	f7ff fe0c 	bl	80a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
 80a17bc:	6860      	ldr	r0, [r4, #4]
 80a17be:	f7ff fe0b 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80a17c2:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 80a17c4:	f000 001f 	and.w	r0, r0, #31
 80a17c8:	2805      	cmp	r0, #5
 80a17ca:	d006      	beq.n	80a17da <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
 80a17cc:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 80a17ce:	4620      	mov	r0, r4
 80a17d0:	7023      	strb	r3, [r4, #0]
 80a17d2:	f7ff fe36 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a17d6:	2000      	movs	r0, #0
}
 80a17d8:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 80a17da:	2001      	movs	r0, #1
 80a17dc:	e7fc      	b.n	80a17d8 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

080a17de <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a17de:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 80a17e0:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a17e2:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 80a17e4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a17e6:	bf18      	it	ne
 80a17e8:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 80a17ea:	460a      	mov	r2, r1
 80a17ec:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a17ee:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 80a17f0:	f7ff fe80 	bl	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
 80a17f4:	4606      	mov	r6, r0
 80a17f6:	b130      	cbz	r0, 80a1806 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
 80a17f8:	2332      	movs	r3, #50	; 0x32
 80a17fa:	7023      	strb	r3, [r4, #0]
  spiStop();
 80a17fc:	4620      	mov	r0, r4
 80a17fe:	f7ff fe20 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a1802:	2500      	movs	r5, #0
 80a1804:	e01f      	b.n	80a1846 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
 80a1806:	462a      	mov	r2, r5
 80a1808:	21fe      	movs	r1, #254	; 0xfe
 80a180a:	4620      	mov	r0, r4
 80a180c:	f7ff ffc2 	bl	80a1794 <_ZN9SdSpiCard9writeDataEhPKh>
 80a1810:	2800      	cmp	r0, #0
 80a1812:	d0f3      	beq.n	80a17fc <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a1814:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80a1818:	4620      	mov	r0, r4
 80a181a:	f7ff fe56 	bl	80a14ca <_ZN9SdSpiCard11waitNotBusyEt>
 80a181e:	4605      	mov	r5, r0
 80a1820:	b908      	cbnz	r0, 80a1826 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
 80a1822:	235a      	movs	r3, #90	; 0x5a
 80a1824:	e7e9      	b.n	80a17fa <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
 80a1826:	4632      	mov	r2, r6
 80a1828:	210d      	movs	r1, #13
 80a182a:	4620      	mov	r0, r4
 80a182c:	f7ff fe62 	bl	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
 80a1830:	b108      	cbz	r0, 80a1836 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
 80a1832:	2329      	movs	r3, #41	; 0x29
 80a1834:	e7e1      	b.n	80a17fa <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
 80a1836:	6860      	ldr	r0, [r4, #4]
 80a1838:	f7ff fdce 	bl	80a13d8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80a183c:	2800      	cmp	r0, #0
 80a183e:	d1f8      	bne.n	80a1832 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
 80a1840:	4620      	mov	r0, r4
 80a1842:	f7ff fdfe 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
}
 80a1846:	4628      	mov	r0, r5
 80a1848:	bd70      	pop	{r4, r5, r6, pc}

080a184a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 80a184a:	b538      	push	{r3, r4, r5, lr}
 80a184c:	460d      	mov	r5, r1
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a184e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
 80a1852:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a1854:	f7ff fe39 	bl	80a14ca <_ZN9SdSpiCard11waitNotBusyEt>
 80a1858:	b930      	cbnz	r0, 80a1868 <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 80a185a:	235b      	movs	r3, #91	; 0x5b
 80a185c:	7023      	strb	r3, [r4, #0]
  spiStop();
 80a185e:	4620      	mov	r0, r4
 80a1860:	f7ff fdef 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a1864:	2000      	movs	r0, #0
 80a1866:	e006      	b.n	80a1876 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 80a1868:	462a      	mov	r2, r5
 80a186a:	21fc      	movs	r1, #252	; 0xfc
 80a186c:	4620      	mov	r0, r4
 80a186e:	f7ff ff91 	bl	80a1794 <_ZN9SdSpiCard9writeDataEhPKh>
 80a1872:	2800      	cmp	r0, #0
 80a1874:	d0f3      	beq.n	80a185e <_ZN9SdSpiCard9writeDataEPKh+0x14>
}
 80a1876:	bd38      	pop	{r3, r4, r5, pc}

080a1878 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80a1878:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a187a:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80a187c:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 80a187e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a1880:	bf18      	it	ne
 80a1882:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 80a1884:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80a1886:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
 80a1888:	f7ff fe34 	bl	80a14f4 <_ZN9SdSpiCard11cardCommandEhm>
 80a188c:	b130      	cbz	r0, 80a189c <_ZN9SdSpiCard10writeStartEm+0x24>
 80a188e:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 80a1890:	4620      	mov	r0, r4
 80a1892:	7023      	strb	r3, [r4, #0]
 80a1894:	f7ff fdd5 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a1898:	2000      	movs	r0, #0
}
 80a189a:	bd10      	pop	{r4, pc}
  return true;
 80a189c:	2001      	movs	r0, #1
 80a189e:	e7fc      	b.n	80a189a <_ZN9SdSpiCard10writeStartEm+0x22>

080a18a0 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 80a18a0:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a18a2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
 80a18a6:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a18a8:	f7ff fe0f 	bl	80a14ca <_ZN9SdSpiCard11waitNotBusyEt>
 80a18ac:	4605      	mov	r5, r0
 80a18ae:	b930      	cbnz	r0, 80a18be <_ZN9SdSpiCard9writeStopEv+0x1e>
 80a18b0:	2356      	movs	r3, #86	; 0x56
 80a18b2:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
 80a18b4:	4620      	mov	r0, r4
 80a18b6:	f7ff fdc4 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
 80a18ba:	4628      	mov	r0, r5
 80a18bc:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
 80a18be:	21fd      	movs	r1, #253	; 0xfd
 80a18c0:	6860      	ldr	r0, [r4, #4]
 80a18c2:	f7ff fd87 	bl	80a13d4 <_ZN9SdSpiCard7spiSendEh.isra.0>
 80a18c6:	e7f5      	b.n	80a18b4 <_ZN9SdSpiCard9writeStopEv+0x14>

080a18c8 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80a18c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18ca:	4604      	mov	r4, r0
 80a18cc:	4616      	mov	r6, r2
 80a18ce:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 80a18d0:	f7ff ffd2 	bl	80a1878 <_ZN9SdSpiCard10writeStartEm>
 80a18d4:	b170      	cbz	r0, 80a18f4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
 80a18d6:	2500      	movs	r5, #0
 80a18d8:	42bd      	cmp	r5, r7
  return writeStop();
 80a18da:	4620      	mov	r0, r4
 80a18dc:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 80a18e0:	d004      	beq.n	80a18ec <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 80a18e2:	f7ff ffb2 	bl	80a184a <_ZN9SdSpiCard9writeDataEPKh>
 80a18e6:	b128      	cbz	r0, 80a18f4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
 80a18e8:	3501      	adds	r5, #1
 80a18ea:	e7f5      	b.n	80a18d8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
 80a18ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 80a18f0:	f7ff bfd6 	b.w	80a18a0 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
 80a18f4:	4620      	mov	r0, r4
 80a18f6:	f7ff fda4 	bl	80a1442 <_ZN9SdSpiCard7spiStopEv>
}
 80a18fa:	2000      	movs	r0, #0
 80a18fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1900 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80a1900:	2201      	movs	r2, #1
 80a1902:	4b01      	ldr	r3, [pc, #4]	; (80a1908 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80a1904:	701a      	strb	r2, [r3, #0]
}
 80a1906:	4770      	bx	lr
 80a1908:	2000054c 	.word	0x2000054c

080a190c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 80a190c:	1d01      	adds	r1, r0, #4
 80a190e:	6800      	ldr	r0, [r0, #0]
 80a1910:	f000 bc76 	b.w	80a2200 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

080a1914 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 80a1914:	b510      	push	{r4, lr}
 80a1916:	4604      	mov	r4, r0
  m_csPin = csPin;
 80a1918:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 80a191a:	6800      	ldr	r0, [r0, #0]
 80a191c:	f000 fc47 	bl	80a21ae <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 80a1920:	7d20      	ldrb	r0, [r4, #20]
 80a1922:	2101      	movs	r1, #1
 80a1924:	f000 ff62 	bl	80a27ec <pinMode>
  digitalWrite(m_csPin, HIGH);
 80a1928:	7d20      	ldrb	r0, [r4, #20]
 80a192a:	2101      	movs	r1, #1
}
 80a192c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
 80a1930:	f000 bf6d 	b.w	80a280e <digitalWrite>

080a1934 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 80a1934:	6800      	ldr	r0, [r0, #0]
 80a1936:	f000 bc49 	b.w	80a21cc <_ZN8SPIClass14endTransactionEv>

080a193a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 80a193a:	21ff      	movs	r1, #255	; 0xff
 80a193c:	6800      	ldr	r0, [r0, #0]
 80a193e:	f000 bccb 	b.w	80a22d8 <_ZN8SPIClass8transferEh>
	...

080a1944 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 80a1944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1946:	460d      	mov	r5, r1
  SPI_DMA_TransferCompleted = false;
 80a1948:	2100      	movs	r1, #0
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 80a194a:	4613      	mov	r3, r2
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a194c:	4a06      	ldr	r2, [pc, #24]	; (80a1968 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
  SPI_DMA_TransferCompleted = false;
 80a194e:	4c07      	ldr	r4, [pc, #28]	; (80a196c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a1950:	9200      	str	r2, [sp, #0]
 80a1952:	6800      	ldr	r0, [r0, #0]
 80a1954:	462a      	mov	r2, r5
  SPI_DMA_TransferCompleted = false;
 80a1956:	7021      	strb	r1, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a1958:	f000 fcc4 	bl	80a22e4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 80a195c:	7823      	ldrb	r3, [r4, #0]
 80a195e:	2b00      	cmp	r3, #0
 80a1960:	d0fc      	beq.n	80a195c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 80a1962:	2000      	movs	r0, #0
 80a1964:	b003      	add	sp, #12
 80a1966:	bd30      	pop	{r4, r5, pc}
 80a1968:	080a1901 	.word	0x080a1901
 80a196c:	2000054c 	.word	0x2000054c

080a1970 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 80a1970:	6800      	ldr	r0, [r0, #0]
 80a1972:	f000 bcb1 	b.w	80a22d8 <_ZN8SPIClass8transferEh>
	...

080a1978 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 80a1978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a197a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 80a197c:	2200      	movs	r2, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 80a197e:	4d06      	ldr	r5, [pc, #24]	; (80a1998 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
  SPI_DMA_TransferCompleted = false;
 80a1980:	4c06      	ldr	r4, [pc, #24]	; (80a199c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 80a1982:	9500      	str	r5, [sp, #0]
 80a1984:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
 80a1986:	7022      	strb	r2, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 80a1988:	f000 fcac 	bl	80a22e4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 80a198c:	7823      	ldrb	r3, [r4, #0]
 80a198e:	2b00      	cmp	r3, #0
 80a1990:	d0fc      	beq.n	80a198c <_ZN14SdSpiAltDriver4sendEPKhj+0x14>
}
 80a1992:	b003      	add	sp, #12
 80a1994:	bd30      	pop	{r4, r5, pc}
 80a1996:	bf00      	nop
 80a1998:	080a1901 	.word	0x080a1901
 80a199c:	2000054c 	.word	0x2000054c

080a19a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a19a0:	b508      	push	{r3, lr}
 80a19a2:	4b02      	ldr	r3, [pc, #8]	; (80a19ac <os_mutex_recursive_create+0xc>)
 80a19a4:	681b      	ldr	r3, [r3, #0]
 80a19a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a19a8:	9301      	str	r3, [sp, #4]
 80a19aa:	bd08      	pop	{r3, pc}
 80a19ac:	080601d0 	.word	0x080601d0

080a19b0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a19b0:	b508      	push	{r3, lr}
 80a19b2:	4b02      	ldr	r3, [pc, #8]	; (80a19bc <os_mutex_recursive_destroy+0xc>)
 80a19b4:	681b      	ldr	r3, [r3, #0]
 80a19b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a19b8:	9301      	str	r3, [sp, #4]
 80a19ba:	bd08      	pop	{r3, pc}
 80a19bc:	080601d0 	.word	0x080601d0

080a19c0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a19c0:	b508      	push	{r3, lr}
 80a19c2:	4b02      	ldr	r3, [pc, #8]	; (80a19cc <os_mutex_recursive_lock+0xc>)
 80a19c4:	681b      	ldr	r3, [r3, #0]
 80a19c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a19c8:	9301      	str	r3, [sp, #4]
 80a19ca:	bd08      	pop	{r3, pc}
 80a19cc:	080601d0 	.word	0x080601d0

080a19d0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a19d0:	b508      	push	{r3, lr}
 80a19d2:	4b02      	ldr	r3, [pc, #8]	; (80a19dc <os_mutex_recursive_unlock+0xc>)
 80a19d4:	681b      	ldr	r3, [r3, #0]
 80a19d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a19d8:	9301      	str	r3, [sp, #4]
 80a19da:	bd08      	pop	{r3, pc}
 80a19dc:	080601d0 	.word	0x080601d0

080a19e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a19e0:	b508      	push	{r3, lr}
 80a19e2:	4b02      	ldr	r3, [pc, #8]	; (80a19ec <HAL_RNG_GetRandomNumber+0xc>)
 80a19e4:	681b      	ldr	r3, [r3, #0]
 80a19e6:	685b      	ldr	r3, [r3, #4]
 80a19e8:	9301      	str	r3, [sp, #4]
 80a19ea:	bd08      	pop	{r3, pc}
 80a19ec:	0806019c 	.word	0x0806019c

080a19f0 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a19f0:	b508      	push	{r3, lr}
 80a19f2:	4b02      	ldr	r3, [pc, #8]	; (80a19fc <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a19f4:	681b      	ldr	r3, [r3, #0]
 80a19f6:	691b      	ldr	r3, [r3, #16]
 80a19f8:	9301      	str	r3, [sp, #4]
 80a19fa:	bd08      	pop	{r3, pc}
 80a19fc:	0806019c 	.word	0x0806019c

080a1a00 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1a00:	b508      	push	{r3, lr}
 80a1a02:	4b02      	ldr	r3, [pc, #8]	; (80a1a0c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1a04:	681b      	ldr	r3, [r3, #0]
 80a1a06:	695b      	ldr	r3, [r3, #20]
 80a1a08:	9301      	str	r3, [sp, #4]
 80a1a0a:	bd08      	pop	{r3, pc}
 80a1a0c:	0806019c 	.word	0x0806019c

080a1a10 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1a10:	b508      	push	{r3, lr}
 80a1a12:	4b02      	ldr	r3, [pc, #8]	; (80a1a1c <HAL_Pin_Mode+0xc>)
 80a1a14:	681b      	ldr	r3, [r3, #0]
 80a1a16:	689b      	ldr	r3, [r3, #8]
 80a1a18:	9301      	str	r3, [sp, #4]
 80a1a1a:	bd08      	pop	{r3, pc}
 80a1a1c:	080601b0 	.word	0x080601b0

080a1a20 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1a20:	b508      	push	{r3, lr}
 80a1a22:	4b02      	ldr	r3, [pc, #8]	; (80a1a2c <HAL_Get_Pin_Mode+0xc>)
 80a1a24:	681b      	ldr	r3, [r3, #0]
 80a1a26:	68db      	ldr	r3, [r3, #12]
 80a1a28:	9301      	str	r3, [sp, #4]
 80a1a2a:	bd08      	pop	{r3, pc}
 80a1a2c:	080601b0 	.word	0x080601b0

080a1a30 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1a30:	b508      	push	{r3, lr}
 80a1a32:	4b02      	ldr	r3, [pc, #8]	; (80a1a3c <HAL_GPIO_Write+0xc>)
 80a1a34:	681b      	ldr	r3, [r3, #0]
 80a1a36:	691b      	ldr	r3, [r3, #16]
 80a1a38:	9301      	str	r3, [sp, #4]
 80a1a3a:	bd08      	pop	{r3, pc}
 80a1a3c:	080601b0 	.word	0x080601b0

080a1a40 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1a40:	b508      	push	{r3, lr}
 80a1a42:	4b02      	ldr	r3, [pc, #8]	; (80a1a4c <hal_i2c_write+0xc>)
 80a1a44:	681b      	ldr	r3, [r3, #0]
 80a1a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1a48:	9301      	str	r3, [sp, #4]
 80a1a4a:	bd08      	pop	{r3, pc}
 80a1a4c:	080601ac 	.word	0x080601ac

080a1a50 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1a50:	b508      	push	{r3, lr}
 80a1a52:	4b02      	ldr	r3, [pc, #8]	; (80a1a5c <hal_i2c_available+0xc>)
 80a1a54:	681b      	ldr	r3, [r3, #0]
 80a1a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1a58:	9301      	str	r3, [sp, #4]
 80a1a5a:	bd08      	pop	{r3, pc}
 80a1a5c:	080601ac 	.word	0x080601ac

080a1a60 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1a60:	b508      	push	{r3, lr}
 80a1a62:	4b02      	ldr	r3, [pc, #8]	; (80a1a6c <hal_i2c_read+0xc>)
 80a1a64:	681b      	ldr	r3, [r3, #0]
 80a1a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1a68:	9301      	str	r3, [sp, #4]
 80a1a6a:	bd08      	pop	{r3, pc}
 80a1a6c:	080601ac 	.word	0x080601ac

080a1a70 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1a70:	b508      	push	{r3, lr}
 80a1a72:	4b02      	ldr	r3, [pc, #8]	; (80a1a7c <hal_i2c_peek+0xc>)
 80a1a74:	681b      	ldr	r3, [r3, #0]
 80a1a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1a78:	9301      	str	r3, [sp, #4]
 80a1a7a:	bd08      	pop	{r3, pc}
 80a1a7c:	080601ac 	.word	0x080601ac

080a1a80 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1a80:	b508      	push	{r3, lr}
 80a1a82:	4b02      	ldr	r3, [pc, #8]	; (80a1a8c <hal_i2c_flush+0xc>)
 80a1a84:	681b      	ldr	r3, [r3, #0]
 80a1a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1a88:	9301      	str	r3, [sp, #4]
 80a1a8a:	bd08      	pop	{r3, pc}
 80a1a8c:	080601ac 	.word	0x080601ac

080a1a90 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1a90:	b508      	push	{r3, lr}
 80a1a92:	4b02      	ldr	r3, [pc, #8]	; (80a1a9c <hal_i2c_is_enabled+0xc>)
 80a1a94:	681b      	ldr	r3, [r3, #0]
 80a1a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1a98:	9301      	str	r3, [sp, #4]
 80a1a9a:	bd08      	pop	{r3, pc}
 80a1a9c:	080601ac 	.word	0x080601ac

080a1aa0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1aa0:	b508      	push	{r3, lr}
 80a1aa2:	4b03      	ldr	r3, [pc, #12]	; (80a1ab0 <hal_i2c_init+0x10>)
 80a1aa4:	681b      	ldr	r3, [r3, #0]
 80a1aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1aaa:	9301      	str	r3, [sp, #4]
 80a1aac:	bd08      	pop	{r3, pc}
 80a1aae:	0000      	.short	0x0000
 80a1ab0:	080601ac 	.word	0x080601ac

080a1ab4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a1ab4:	b508      	push	{r3, lr}
 80a1ab6:	4b02      	ldr	r3, [pc, #8]	; (80a1ac0 <hal_spi_begin+0xc>)
 80a1ab8:	681b      	ldr	r3, [r3, #0]
 80a1aba:	681b      	ldr	r3, [r3, #0]
 80a1abc:	9301      	str	r3, [sp, #4]
 80a1abe:	bd08      	pop	{r3, pc}
 80a1ac0:	080601b4 	.word	0x080601b4

080a1ac4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a1ac4:	b508      	push	{r3, lr}
 80a1ac6:	4b02      	ldr	r3, [pc, #8]	; (80a1ad0 <hal_spi_transfer+0xc>)
 80a1ac8:	681b      	ldr	r3, [r3, #0]
 80a1aca:	695b      	ldr	r3, [r3, #20]
 80a1acc:	9301      	str	r3, [sp, #4]
 80a1ace:	bd08      	pop	{r3, pc}
 80a1ad0:	080601b4 	.word	0x080601b4

080a1ad4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1ad4:	b508      	push	{r3, lr}
 80a1ad6:	4b02      	ldr	r3, [pc, #8]	; (80a1ae0 <hal_spi_init+0xc>)
 80a1ad8:	681b      	ldr	r3, [r3, #0]
 80a1ada:	69db      	ldr	r3, [r3, #28]
 80a1adc:	9301      	str	r3, [sp, #4]
 80a1ade:	bd08      	pop	{r3, pc}
 80a1ae0:	080601b4 	.word	0x080601b4

080a1ae4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1ae4:	b508      	push	{r3, lr}
 80a1ae6:	4b02      	ldr	r3, [pc, #8]	; (80a1af0 <hal_spi_is_enabled+0xc>)
 80a1ae8:	681b      	ldr	r3, [r3, #0]
 80a1aea:	6a1b      	ldr	r3, [r3, #32]
 80a1aec:	9301      	str	r3, [sp, #4]
 80a1aee:	bd08      	pop	{r3, pc}
 80a1af0:	080601b4 	.word	0x080601b4

080a1af4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a1af4:	b508      	push	{r3, lr}
 80a1af6:	4b02      	ldr	r3, [pc, #8]	; (80a1b00 <hal_spi_info+0xc>)
 80a1af8:	681b      	ldr	r3, [r3, #0]
 80a1afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1afc:	9301      	str	r3, [sp, #4]
 80a1afe:	bd08      	pop	{r3, pc}
 80a1b00:	080601b4 	.word	0x080601b4

080a1b04 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 80a1b04:	b508      	push	{r3, lr}
 80a1b06:	4b02      	ldr	r3, [pc, #8]	; (80a1b10 <hal_spi_transfer_dma+0xc>)
 80a1b08:	681b      	ldr	r3, [r3, #0]
 80a1b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1b0c:	9301      	str	r3, [sp, #4]
 80a1b0e:	bd08      	pop	{r3, pc}
 80a1b10:	080601b4 	.word	0x080601b4

080a1b14 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 80a1b14:	b508      	push	{r3, lr}
 80a1b16:	4b02      	ldr	r3, [pc, #8]	; (80a1b20 <hal_spi_transfer_dma_status+0xc>)
 80a1b18:	681b      	ldr	r3, [r3, #0]
 80a1b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1b1c:	9301      	str	r3, [sp, #4]
 80a1b1e:	bd08      	pop	{r3, pc}
 80a1b20:	080601b4 	.word	0x080601b4

080a1b24 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a1b24:	b508      	push	{r3, lr}
 80a1b26:	4b02      	ldr	r3, [pc, #8]	; (80a1b30 <hal_spi_set_settings+0xc>)
 80a1b28:	681b      	ldr	r3, [r3, #0]
 80a1b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1b2c:	9301      	str	r3, [sp, #4]
 80a1b2e:	bd08      	pop	{r3, pc}
 80a1b30:	080601b4 	.word	0x080601b4

080a1b34 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1b34:	b508      	push	{r3, lr}
 80a1b36:	4b02      	ldr	r3, [pc, #8]	; (80a1b40 <hal_usart_write+0xc>)
 80a1b38:	681b      	ldr	r3, [r3, #0]
 80a1b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1b3c:	9301      	str	r3, [sp, #4]
 80a1b3e:	bd08      	pop	{r3, pc}
 80a1b40:	080601c4 	.word	0x080601c4

080a1b44 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1b44:	b508      	push	{r3, lr}
 80a1b46:	4b02      	ldr	r3, [pc, #8]	; (80a1b50 <hal_usart_available+0xc>)
 80a1b48:	681b      	ldr	r3, [r3, #0]
 80a1b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1b4c:	9301      	str	r3, [sp, #4]
 80a1b4e:	bd08      	pop	{r3, pc}
 80a1b50:	080601c4 	.word	0x080601c4

080a1b54 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1b54:	b508      	push	{r3, lr}
 80a1b56:	4b02      	ldr	r3, [pc, #8]	; (80a1b60 <hal_usart_read+0xc>)
 80a1b58:	681b      	ldr	r3, [r3, #0]
 80a1b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1b5c:	9301      	str	r3, [sp, #4]
 80a1b5e:	bd08      	pop	{r3, pc}
 80a1b60:	080601c4 	.word	0x080601c4

080a1b64 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1b64:	b508      	push	{r3, lr}
 80a1b66:	4b02      	ldr	r3, [pc, #8]	; (80a1b70 <hal_usart_peek+0xc>)
 80a1b68:	681b      	ldr	r3, [r3, #0]
 80a1b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1b6c:	9301      	str	r3, [sp, #4]
 80a1b6e:	bd08      	pop	{r3, pc}
 80a1b70:	080601c4 	.word	0x080601c4

080a1b74 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1b74:	b508      	push	{r3, lr}
 80a1b76:	4b02      	ldr	r3, [pc, #8]	; (80a1b80 <hal_usart_flush+0xc>)
 80a1b78:	681b      	ldr	r3, [r3, #0]
 80a1b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1b7c:	9301      	str	r3, [sp, #4]
 80a1b7e:	bd08      	pop	{r3, pc}
 80a1b80:	080601c4 	.word	0x080601c4

080a1b84 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1b84:	b508      	push	{r3, lr}
 80a1b86:	4b02      	ldr	r3, [pc, #8]	; (80a1b90 <hal_usart_is_enabled+0xc>)
 80a1b88:	681b      	ldr	r3, [r3, #0]
 80a1b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1b8c:	9301      	str	r3, [sp, #4]
 80a1b8e:	bd08      	pop	{r3, pc}
 80a1b90:	080601c4 	.word	0x080601c4

080a1b94 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1b94:	b508      	push	{r3, lr}
 80a1b96:	4b02      	ldr	r3, [pc, #8]	; (80a1ba0 <hal_usart_available_data_for_write+0xc>)
 80a1b98:	681b      	ldr	r3, [r3, #0]
 80a1b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1b9c:	9301      	str	r3, [sp, #4]
 80a1b9e:	bd08      	pop	{r3, pc}
 80a1ba0:	080601c4 	.word	0x080601c4

080a1ba4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a1ba4:	b508      	push	{r3, lr}
 80a1ba6:	4b02      	ldr	r3, [pc, #8]	; (80a1bb0 <hal_usart_init_ex+0xc>)
 80a1ba8:	681b      	ldr	r3, [r3, #0]
 80a1baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1bac:	9301      	str	r3, [sp, #4]
 80a1bae:	bd08      	pop	{r3, pc}
 80a1bb0:	080601c4 	.word	0x080601c4

080a1bb4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1bb4:	b508      	push	{r3, lr}
 80a1bb6:	4b02      	ldr	r3, [pc, #8]	; (80a1bc0 <HAL_USB_USART_Init+0xc>)
 80a1bb8:	681b      	ldr	r3, [r3, #0]
 80a1bba:	681b      	ldr	r3, [r3, #0]
 80a1bbc:	9301      	str	r3, [sp, #4]
 80a1bbe:	bd08      	pop	{r3, pc}
 80a1bc0:	080601d8 	.word	0x080601d8

080a1bc4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1bc4:	b508      	push	{r3, lr}
 80a1bc6:	4b02      	ldr	r3, [pc, #8]	; (80a1bd0 <HAL_USB_USART_Available_Data+0xc>)
 80a1bc8:	681b      	ldr	r3, [r3, #0]
 80a1bca:	691b      	ldr	r3, [r3, #16]
 80a1bcc:	9301      	str	r3, [sp, #4]
 80a1bce:	bd08      	pop	{r3, pc}
 80a1bd0:	080601d8 	.word	0x080601d8

080a1bd4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1bd4:	b508      	push	{r3, lr}
 80a1bd6:	4b02      	ldr	r3, [pc, #8]	; (80a1be0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1bd8:	681b      	ldr	r3, [r3, #0]
 80a1bda:	695b      	ldr	r3, [r3, #20]
 80a1bdc:	9301      	str	r3, [sp, #4]
 80a1bde:	bd08      	pop	{r3, pc}
 80a1be0:	080601d8 	.word	0x080601d8

080a1be4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1be4:	b508      	push	{r3, lr}
 80a1be6:	4b02      	ldr	r3, [pc, #8]	; (80a1bf0 <HAL_USB_USART_Receive_Data+0xc>)
 80a1be8:	681b      	ldr	r3, [r3, #0]
 80a1bea:	699b      	ldr	r3, [r3, #24]
 80a1bec:	9301      	str	r3, [sp, #4]
 80a1bee:	bd08      	pop	{r3, pc}
 80a1bf0:	080601d8 	.word	0x080601d8

080a1bf4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1bf4:	b508      	push	{r3, lr}
 80a1bf6:	4b02      	ldr	r3, [pc, #8]	; (80a1c00 <HAL_USB_USART_Send_Data+0xc>)
 80a1bf8:	681b      	ldr	r3, [r3, #0]
 80a1bfa:	69db      	ldr	r3, [r3, #28]
 80a1bfc:	9301      	str	r3, [sp, #4]
 80a1bfe:	bd08      	pop	{r3, pc}
 80a1c00:	080601d8 	.word	0x080601d8

080a1c04 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1c04:	b508      	push	{r3, lr}
 80a1c06:	4b02      	ldr	r3, [pc, #8]	; (80a1c10 <HAL_USB_USART_Flush_Data+0xc>)
 80a1c08:	681b      	ldr	r3, [r3, #0]
 80a1c0a:	6a1b      	ldr	r3, [r3, #32]
 80a1c0c:	9301      	str	r3, [sp, #4]
 80a1c0e:	bd08      	pop	{r3, pc}
 80a1c10:	080601d8 	.word	0x080601d8

080a1c14 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1c14:	b508      	push	{r3, lr}
 80a1c16:	4b02      	ldr	r3, [pc, #8]	; (80a1c20 <inet_gethostbyname+0xc>)
 80a1c18:	681b      	ldr	r3, [r3, #0]
 80a1c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1c1c:	9301      	str	r3, [sp, #4]
 80a1c1e:	bd08      	pop	{r3, pc}
 80a1c20:	080601c0 	.word	0x080601c0

080a1c24 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a1c24:	b508      	push	{r3, lr}
 80a1c26:	4b02      	ldr	r3, [pc, #8]	; (80a1c30 <LED_SetSignalingColor+0xc>)
 80a1c28:	681b      	ldr	r3, [r3, #0]
 80a1c2a:	685b      	ldr	r3, [r3, #4]
 80a1c2c:	9301      	str	r3, [sp, #4]
 80a1c2e:	bd08      	pop	{r3, pc}
 80a1c30:	080201a8 	.word	0x080201a8

080a1c34 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a1c34:	b508      	push	{r3, lr}
 80a1c36:	4b02      	ldr	r3, [pc, #8]	; (80a1c40 <LED_Signaling_Start+0xc>)
 80a1c38:	681b      	ldr	r3, [r3, #0]
 80a1c3a:	689b      	ldr	r3, [r3, #8]
 80a1c3c:	9301      	str	r3, [sp, #4]
 80a1c3e:	bd08      	pop	{r3, pc}
 80a1c40:	080201a8 	.word	0x080201a8

080a1c44 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a1c44:	b508      	push	{r3, lr}
 80a1c46:	4b02      	ldr	r3, [pc, #8]	; (80a1c50 <LED_Signaling_Stop+0xc>)
 80a1c48:	681b      	ldr	r3, [r3, #0]
 80a1c4a:	68db      	ldr	r3, [r3, #12]
 80a1c4c:	9301      	str	r3, [sp, #4]
 80a1c4e:	bd08      	pop	{r3, pc}
 80a1c50:	080201a8 	.word	0x080201a8

080a1c54 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a1c54:	b508      	push	{r3, lr}
 80a1c56:	4b02      	ldr	r3, [pc, #8]	; (80a1c60 <LED_RGB_IsOverRidden+0xc>)
 80a1c58:	681b      	ldr	r3, [r3, #0]
 80a1c5a:	699b      	ldr	r3, [r3, #24]
 80a1c5c:	9301      	str	r3, [sp, #4]
 80a1c5e:	bd08      	pop	{r3, pc}
 80a1c60:	080201a8 	.word	0x080201a8

080a1c64 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a1c64:	b508      	push	{r3, lr}
 80a1c66:	4b02      	ldr	r3, [pc, #8]	; (80a1c70 <LED_On+0xc>)
 80a1c68:	681b      	ldr	r3, [r3, #0]
 80a1c6a:	69db      	ldr	r3, [r3, #28]
 80a1c6c:	9301      	str	r3, [sp, #4]
 80a1c6e:	bd08      	pop	{r3, pc}
 80a1c70:	080201a8 	.word	0x080201a8

080a1c74 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1c74:	b508      	push	{r3, lr}
 80a1c76:	4b02      	ldr	r3, [pc, #8]	; (80a1c80 <set_system_mode+0xc>)
 80a1c78:	681b      	ldr	r3, [r3, #0]
 80a1c7a:	685b      	ldr	r3, [r3, #4]
 80a1c7c:	9301      	str	r3, [sp, #4]
 80a1c7e:	bd08      	pop	{r3, pc}
 80a1c80:	080601a4 	.word	0x080601a4

080a1c84 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1c84:	b508      	push	{r3, lr}
 80a1c86:	4b02      	ldr	r3, [pc, #8]	; (80a1c90 <system_delay_ms+0xc>)
 80a1c88:	681b      	ldr	r3, [r3, #0]
 80a1c8a:	695b      	ldr	r3, [r3, #20]
 80a1c8c:	9301      	str	r3, [sp, #4]
 80a1c8e:	bd08      	pop	{r3, pc}
 80a1c90:	080601a4 	.word	0x080601a4

080a1c94 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1c94:	b508      	push	{r3, lr}
 80a1c96:	4b02      	ldr	r3, [pc, #8]	; (80a1ca0 <system_thread_set_state+0xc>)
 80a1c98:	681b      	ldr	r3, [r3, #0]
 80a1c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1c9c:	9301      	str	r3, [sp, #4]
 80a1c9e:	bd08      	pop	{r3, pc}
 80a1ca0:	080601a4 	.word	0x080601a4

080a1ca4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1ca4:	b508      	push	{r3, lr}
 80a1ca6:	4b03      	ldr	r3, [pc, #12]	; (80a1cb4 <system_ctrl_set_app_request_handler+0x10>)
 80a1ca8:	681b      	ldr	r3, [r3, #0]
 80a1caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1cae:	9301      	str	r3, [sp, #4]
 80a1cb0:	bd08      	pop	{r3, pc}
 80a1cb2:	0000      	.short	0x0000
 80a1cb4:	080601a4 	.word	0x080601a4

080a1cb8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1cb8:	b508      	push	{r3, lr}
 80a1cba:	4b03      	ldr	r3, [pc, #12]	; (80a1cc8 <system_ctrl_set_result+0x10>)
 80a1cbc:	681b      	ldr	r3, [r3, #0]
 80a1cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1cc2:	9301      	str	r3, [sp, #4]
 80a1cc4:	bd08      	pop	{r3, pc}
 80a1cc6:	0000      	.short	0x0000
 80a1cc8:	080601a4 	.word	0x080601a4

080a1ccc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1ccc:	b508      	push	{r3, lr}
 80a1cce:	4b02      	ldr	r3, [pc, #8]	; (80a1cd8 <spark_process+0xc>)
 80a1cd0:	681b      	ldr	r3, [r3, #0]
 80a1cd2:	689b      	ldr	r3, [r3, #8]
 80a1cd4:	9301      	str	r3, [sp, #4]
 80a1cd6:	bd08      	pop	{r3, pc}
 80a1cd8:	080601cc 	.word	0x080601cc

080a1cdc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1cdc:	b508      	push	{r3, lr}
 80a1cde:	4b02      	ldr	r3, [pc, #8]	; (80a1ce8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1ce0:	681b      	ldr	r3, [r3, #0]
 80a1ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1ce4:	9301      	str	r3, [sp, #4]
 80a1ce6:	bd08      	pop	{r3, pc}
 80a1ce8:	080601cc 	.word	0x080601cc

080a1cec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1cec:	b508      	push	{r3, lr}
 80a1cee:	4b02      	ldr	r3, [pc, #8]	; (80a1cf8 <network_connect+0xc>)
 80a1cf0:	681b      	ldr	r3, [r3, #0]
 80a1cf2:	685b      	ldr	r3, [r3, #4]
 80a1cf4:	9301      	str	r3, [sp, #4]
 80a1cf6:	bd08      	pop	{r3, pc}
 80a1cf8:	080601c8 	.word	0x080601c8

080a1cfc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1cfc:	b508      	push	{r3, lr}
 80a1cfe:	4b02      	ldr	r3, [pc, #8]	; (80a1d08 <network_connecting+0xc>)
 80a1d00:	681b      	ldr	r3, [r3, #0]
 80a1d02:	689b      	ldr	r3, [r3, #8]
 80a1d04:	9301      	str	r3, [sp, #4]
 80a1d06:	bd08      	pop	{r3, pc}
 80a1d08:	080601c8 	.word	0x080601c8

080a1d0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1d0c:	b508      	push	{r3, lr}
 80a1d0e:	4b02      	ldr	r3, [pc, #8]	; (80a1d18 <network_disconnect+0xc>)
 80a1d10:	681b      	ldr	r3, [r3, #0]
 80a1d12:	68db      	ldr	r3, [r3, #12]
 80a1d14:	9301      	str	r3, [sp, #4]
 80a1d16:	bd08      	pop	{r3, pc}
 80a1d18:	080601c8 	.word	0x080601c8

080a1d1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1d1c:	b508      	push	{r3, lr}
 80a1d1e:	4b02      	ldr	r3, [pc, #8]	; (80a1d28 <network_ready+0xc>)
 80a1d20:	681b      	ldr	r3, [r3, #0]
 80a1d22:	691b      	ldr	r3, [r3, #16]
 80a1d24:	9301      	str	r3, [sp, #4]
 80a1d26:	bd08      	pop	{r3, pc}
 80a1d28:	080601c8 	.word	0x080601c8

080a1d2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1d2c:	b508      	push	{r3, lr}
 80a1d2e:	4b02      	ldr	r3, [pc, #8]	; (80a1d38 <network_on+0xc>)
 80a1d30:	681b      	ldr	r3, [r3, #0]
 80a1d32:	695b      	ldr	r3, [r3, #20]
 80a1d34:	9301      	str	r3, [sp, #4]
 80a1d36:	bd08      	pop	{r3, pc}
 80a1d38:	080601c8 	.word	0x080601c8

080a1d3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1d3c:	b508      	push	{r3, lr}
 80a1d3e:	4b02      	ldr	r3, [pc, #8]	; (80a1d48 <network_off+0xc>)
 80a1d40:	681b      	ldr	r3, [r3, #0]
 80a1d42:	699b      	ldr	r3, [r3, #24]
 80a1d44:	9301      	str	r3, [sp, #4]
 80a1d46:	bd08      	pop	{r3, pc}
 80a1d48:	080601c8 	.word	0x080601c8

080a1d4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1d4c:	b508      	push	{r3, lr}
 80a1d4e:	4b02      	ldr	r3, [pc, #8]	; (80a1d58 <network_listen+0xc>)
 80a1d50:	681b      	ldr	r3, [r3, #0]
 80a1d52:	69db      	ldr	r3, [r3, #28]
 80a1d54:	9301      	str	r3, [sp, #4]
 80a1d56:	bd08      	pop	{r3, pc}
 80a1d58:	080601c8 	.word	0x080601c8

080a1d5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1d5c:	b508      	push	{r3, lr}
 80a1d5e:	4b02      	ldr	r3, [pc, #8]	; (80a1d68 <network_listening+0xc>)
 80a1d60:	681b      	ldr	r3, [r3, #0]
 80a1d62:	6a1b      	ldr	r3, [r3, #32]
 80a1d64:	9301      	str	r3, [sp, #4]
 80a1d66:	bd08      	pop	{r3, pc}
 80a1d68:	080601c8 	.word	0x080601c8

080a1d6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1d6c:	b508      	push	{r3, lr}
 80a1d6e:	4b02      	ldr	r3, [pc, #8]	; (80a1d78 <network_set_listen_timeout+0xc>)
 80a1d70:	681b      	ldr	r3, [r3, #0]
 80a1d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d74:	9301      	str	r3, [sp, #4]
 80a1d76:	bd08      	pop	{r3, pc}
 80a1d78:	080601c8 	.word	0x080601c8

080a1d7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1d7c:	b508      	push	{r3, lr}
 80a1d7e:	4b02      	ldr	r3, [pc, #8]	; (80a1d88 <network_get_listen_timeout+0xc>)
 80a1d80:	681b      	ldr	r3, [r3, #0]
 80a1d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1d84:	9301      	str	r3, [sp, #4]
 80a1d86:	bd08      	pop	{r3, pc}
 80a1d88:	080601c8 	.word	0x080601c8

080a1d8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1d8c:	b508      	push	{r3, lr}
 80a1d8e:	4b02      	ldr	r3, [pc, #8]	; (80a1d98 <network_is_on+0xc>)
 80a1d90:	681b      	ldr	r3, [r3, #0]
 80a1d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1d94:	9301      	str	r3, [sp, #4]
 80a1d96:	bd08      	pop	{r3, pc}
 80a1d98:	080601c8 	.word	0x080601c8

080a1d9c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1d9c:	b508      	push	{r3, lr}
 80a1d9e:	4b02      	ldr	r3, [pc, #8]	; (80a1da8 <network_is_off+0xc>)
 80a1da0:	681b      	ldr	r3, [r3, #0]
 80a1da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1da4:	9301      	str	r3, [sp, #4]
 80a1da6:	bd08      	pop	{r3, pc}
 80a1da8:	080601c8 	.word	0x080601c8

080a1dac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1dac:	b508      	push	{r3, lr}
 80a1dae:	4b02      	ldr	r3, [pc, #8]	; (80a1db8 <malloc+0xc>)
 80a1db0:	681b      	ldr	r3, [r3, #0]
 80a1db2:	681b      	ldr	r3, [r3, #0]
 80a1db4:	9301      	str	r3, [sp, #4]
 80a1db6:	bd08      	pop	{r3, pc}
 80a1db8:	080601a0 	.word	0x080601a0

080a1dbc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1dbc:	b508      	push	{r3, lr}
 80a1dbe:	4b02      	ldr	r3, [pc, #8]	; (80a1dc8 <free+0xc>)
 80a1dc0:	681b      	ldr	r3, [r3, #0]
 80a1dc2:	685b      	ldr	r3, [r3, #4]
 80a1dc4:	9301      	str	r3, [sp, #4]
 80a1dc6:	bd08      	pop	{r3, pc}
 80a1dc8:	080601a0 	.word	0x080601a0

080a1dcc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1dcc:	b508      	push	{r3, lr}
 80a1dce:	4b02      	ldr	r3, [pc, #8]	; (80a1dd8 <vsnprintf+0xc>)
 80a1dd0:	681b      	ldr	r3, [r3, #0]
 80a1dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1dd4:	9301      	str	r3, [sp, #4]
 80a1dd6:	bd08      	pop	{r3, pc}
 80a1dd8:	080601a0 	.word	0x080601a0

080a1ddc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a1ddc:	b508      	push	{r3, lr}
 80a1dde:	4b02      	ldr	r3, [pc, #8]	; (80a1de8 <__assert_func+0xc>)
 80a1de0:	681b      	ldr	r3, [r3, #0]
 80a1de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1de4:	9301      	str	r3, [sp, #4]
 80a1de6:	bd08      	pop	{r3, pc}
 80a1de8:	080601a0 	.word	0x080601a0

080a1dec <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1dec:	b508      	push	{r3, lr}
 80a1dee:	4b02      	ldr	r3, [pc, #8]	; (80a1df8 <newlib_impure_ptr_callback+0xc>)
 80a1df0:	681b      	ldr	r3, [r3, #0]
 80a1df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1df4:	9301      	str	r3, [sp, #4]
 80a1df6:	bd08      	pop	{r3, pc}
 80a1df8:	080601a0 	.word	0x080601a0

080a1dfc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1dfc:	2100      	movs	r1, #0
 80a1dfe:	f7ff bf41 	b.w	80a1c84 <system_delay_ms>

080a1e02 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1e02:	4770      	bx	lr

080a1e04 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e06:	4606      	mov	r6, r0
 80a1e08:	4615      	mov	r5, r2
 80a1e0a:	460c      	mov	r4, r1
 80a1e0c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e0e:	42bc      	cmp	r4, r7
 80a1e10:	d006      	beq.n	80a1e20 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1e12:	6833      	ldr	r3, [r6, #0]
 80a1e14:	4630      	mov	r0, r6
 80a1e16:	689b      	ldr	r3, [r3, #8]
 80a1e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1e1c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1e1e:	e7f6      	b.n	80a1e0e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1e20:	4628      	mov	r0, r5
 80a1e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e24 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1e24:	2200      	movs	r2, #0
 80a1e26:	7c00      	ldrb	r0, [r0, #16]
 80a1e28:	f7ff be0a 	b.w	80a1a40 <hal_i2c_write>

080a1e2c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1e2c:	2100      	movs	r1, #0
 80a1e2e:	7c00      	ldrb	r0, [r0, #16]
 80a1e30:	f7ff be0e 	b.w	80a1a50 <hal_i2c_available>

080a1e34 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1e34:	2100      	movs	r1, #0
 80a1e36:	7c00      	ldrb	r0, [r0, #16]
 80a1e38:	f7ff be12 	b.w	80a1a60 <hal_i2c_read>

080a1e3c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1e3c:	2100      	movs	r1, #0
 80a1e3e:	7c00      	ldrb	r0, [r0, #16]
 80a1e40:	f7ff be16 	b.w	80a1a70 <hal_i2c_peek>

080a1e44 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1e44:	2100      	movs	r1, #0
 80a1e46:	7c00      	ldrb	r0, [r0, #16]
 80a1e48:	f7ff be1a 	b.w	80a1a80 <hal_i2c_flush>

080a1e4c <_ZN7TwoWireD0Ev>:
 80a1e4c:	b510      	push	{r4, lr}
 80a1e4e:	4604      	mov	r4, r0
 80a1e50:	2114      	movs	r1, #20
 80a1e52:	f7fe f922 	bl	80a009a <_ZdlPvj>
 80a1e56:	4620      	mov	r0, r4
 80a1e58:	bd10      	pop	{r4, pc}
	...

080a1e5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1e5c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e62:	4604      	mov	r4, r0
 80a1e64:	4608      	mov	r0, r1
 80a1e66:	2100      	movs	r1, #0
 80a1e68:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1e6c:	4b03      	ldr	r3, [pc, #12]	; (80a1e7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1e6e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1e70:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1e72:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1e74:	f7ff fe14 	bl	80a1aa0 <hal_i2c_init>
}
 80a1e78:	4620      	mov	r0, r4
 80a1e7a:	bd10      	pop	{r4, pc}
 80a1e7c:	080a2c34 	.word	0x080a2c34

080a1e80 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1e80:	4770      	bx	lr

080a1e82 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e84:	460e      	mov	r6, r1
 80a1e86:	2400      	movs	r4, #0
 80a1e88:	f100 0708 	add.w	r7, r0, #8
 80a1e8c:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1e8e:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1e92:	220a      	movs	r2, #10
 80a1e94:	4630      	mov	r0, r6
 80a1e96:	f000 f900 	bl	80a209a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1e9a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1e9c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1e9e:	d101      	bne.n	80a1ea4 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1ea0:	4620      	mov	r0, r4
 80a1ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1ea4:	2c00      	cmp	r4, #0
 80a1ea6:	d0f2      	beq.n	80a1e8e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1ea8:	212e      	movs	r1, #46	; 0x2e
 80a1eaa:	4630      	mov	r0, r6
 80a1eac:	f000 f8dc 	bl	80a2068 <_ZN5Print5printEc>
 80a1eb0:	4404      	add	r4, r0
 80a1eb2:	e7ec      	b.n	80a1e8e <_ZNK9IPAddress7printToER5Print+0xc>

080a1eb4 <_ZN9IPAddressD0Ev>:
 80a1eb4:	b510      	push	{r4, lr}
 80a1eb6:	4604      	mov	r4, r0
 80a1eb8:	2118      	movs	r1, #24
 80a1eba:	f7fe f8ee 	bl	80a009a <_ZdlPvj>
 80a1ebe:	4620      	mov	r0, r4
 80a1ec0:	bd10      	pop	{r4, pc}
	...

080a1ec4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1ec4:	b510      	push	{r4, lr}
 80a1ec6:	4604      	mov	r4, r0
 80a1ec8:	4b04      	ldr	r3, [pc, #16]	; (80a1edc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1eca:	2211      	movs	r2, #17
 80a1ecc:	2100      	movs	r1, #0
 80a1ece:	f840 3b04 	str.w	r3, [r0], #4
 80a1ed2:	f000 fd65 	bl	80a29a0 <memset>
}
 80a1ed6:	4620      	mov	r0, r4
 80a1ed8:	bd10      	pop	{r4, pc}
 80a1eda:	bf00      	nop
 80a1edc:	080a2c5c 	.word	0x080a2c5c

080a1ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1ee0:	4603      	mov	r3, r0
 80a1ee2:	4a07      	ldr	r2, [pc, #28]	; (80a1f00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1ee4:	b510      	push	{r4, lr}
 80a1ee6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1eea:	f101 0210 	add.w	r2, r1, #16
 80a1eee:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1ef2:	4291      	cmp	r1, r2
 80a1ef4:	f843 4b04 	str.w	r4, [r3], #4
 80a1ef8:	d1f9      	bne.n	80a1eee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1efa:	780a      	ldrb	r2, [r1, #0]
 80a1efc:	701a      	strb	r2, [r3, #0]
}
 80a1efe:	bd10      	pop	{r4, pc}
 80a1f00:	080a2c5c 	.word	0x080a2c5c

080a1f04 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a1f04:	4a02      	ldr	r2, [pc, #8]	; (80a1f10 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a1f06:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1f0a:	2204      	movs	r2, #4
 80a1f0c:	7502      	strb	r2, [r0, #20]
}
 80a1f0e:	4770      	bx	lr
 80a1f10:	080a2c5c 	.word	0x080a2c5c

080a1f14 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1f14:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1f16:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1f1a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1f1e:	2304      	movs	r3, #4
 80a1f20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1f24:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1f28:	6044      	str	r4, [r0, #4]
 80a1f2a:	7503      	strb	r3, [r0, #20]
}
 80a1f2c:	bd10      	pop	{r4, pc}
	...

080a1f30 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1f30:	b513      	push	{r0, r1, r4, lr}
 80a1f32:	4c04      	ldr	r4, [pc, #16]	; (80a1f44 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1f34:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1f36:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a1f3a:	9400      	str	r4, [sp, #0]
 80a1f3c:	f7ff ffea 	bl	80a1f14 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1f40:	b002      	add	sp, #8
 80a1f42:	bd10      	pop	{r4, pc}
 80a1f44:	080a2c5c 	.word	0x080a2c5c

080a1f48 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1f48:	4b01      	ldr	r3, [pc, #4]	; (80a1f50 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1f4a:	4a02      	ldr	r2, [pc, #8]	; (80a1f54 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1f4c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1f4e:	4770      	bx	lr
 80a1f50:	20000550 	.word	0x20000550
 80a1f54:	080a2c68 	.word	0x080a2c68

080a1f58 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1f58:	2300      	movs	r3, #0
 80a1f5a:	6840      	ldr	r0, [r0, #4]
 80a1f5c:	461a      	mov	r2, r3
 80a1f5e:	f7ff bec5 	b.w	80a1cec <network_connect>

080a1f62 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1f62:	2200      	movs	r2, #0
 80a1f64:	2102      	movs	r1, #2
 80a1f66:	6840      	ldr	r0, [r0, #4]
 80a1f68:	f7ff bed0 	b.w	80a1d0c <network_disconnect>

080a1f6c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1f6c:	2200      	movs	r2, #0
 80a1f6e:	6840      	ldr	r0, [r0, #4]
 80a1f70:	4611      	mov	r1, r2
 80a1f72:	f7ff bec3 	b.w	80a1cfc <network_connecting>

080a1f76 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1f76:	2200      	movs	r2, #0
 80a1f78:	6840      	ldr	r0, [r0, #4]
 80a1f7a:	4611      	mov	r1, r2
 80a1f7c:	f7ff bece 	b.w	80a1d1c <network_ready>

080a1f80 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1f80:	2300      	movs	r3, #0
 80a1f82:	6840      	ldr	r0, [r0, #4]
 80a1f84:	461a      	mov	r2, r3
 80a1f86:	4619      	mov	r1, r3
 80a1f88:	f7ff bed0 	b.w	80a1d2c <network_on>

080a1f8c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1f8c:	2300      	movs	r3, #0
 80a1f8e:	6840      	ldr	r0, [r0, #4]
 80a1f90:	461a      	mov	r2, r3
 80a1f92:	4619      	mov	r1, r3
 80a1f94:	f7ff bed2 	b.w	80a1d3c <network_off>

080a1f98 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1f98:	2100      	movs	r1, #0
 80a1f9a:	6840      	ldr	r0, [r0, #4]
 80a1f9c:	f7ff bef6 	b.w	80a1d8c <network_is_on>

080a1fa0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1fa0:	2100      	movs	r1, #0
 80a1fa2:	6840      	ldr	r0, [r0, #4]
 80a1fa4:	f7ff befa 	b.w	80a1d9c <network_is_off>

080a1fa8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1fa8:	2200      	movs	r2, #0
 80a1faa:	6840      	ldr	r0, [r0, #4]
 80a1fac:	f081 0101 	eor.w	r1, r1, #1
 80a1fb0:	f7ff becc 	b.w	80a1d4c <network_listen>

080a1fb4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1fb4:	2200      	movs	r2, #0
 80a1fb6:	6840      	ldr	r0, [r0, #4]
 80a1fb8:	f7ff bed8 	b.w	80a1d6c <network_set_listen_timeout>

080a1fbc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1fbc:	2200      	movs	r2, #0
 80a1fbe:	6840      	ldr	r0, [r0, #4]
 80a1fc0:	4611      	mov	r1, r2
 80a1fc2:	f7ff bedb 	b.w	80a1d7c <network_get_listen_timeout>

080a1fc6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1fc6:	2200      	movs	r2, #0
 80a1fc8:	6840      	ldr	r0, [r0, #4]
 80a1fca:	4611      	mov	r1, r2
 80a1fcc:	f7ff bec6 	b.w	80a1d5c <network_listening>

080a1fd0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1fd0:	b570      	push	{r4, r5, r6, lr}
 80a1fd2:	4615      	mov	r5, r2
 80a1fd4:	b08e      	sub	sp, #56	; 0x38
 80a1fd6:	4604      	mov	r4, r0
    IPAddress addr;
 80a1fd8:	a808      	add	r0, sp, #32
 80a1fda:	f7ff ff73 	bl	80a1ec4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1fde:	2211      	movs	r2, #17
 80a1fe0:	2100      	movs	r1, #0
 80a1fe2:	a803      	add	r0, sp, #12
 80a1fe4:	f000 fcdc 	bl	80a29a0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1fe8:	2600      	movs	r6, #0
 80a1fea:	4628      	mov	r0, r5
 80a1fec:	f000 fd0e 	bl	80a2a0c <strlen>
 80a1ff0:	4b0a      	ldr	r3, [pc, #40]	; (80a201c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1ff2:	9600      	str	r6, [sp, #0]
 80a1ff4:	b281      	uxth	r1, r0
 80a1ff6:	685b      	ldr	r3, [r3, #4]
 80a1ff8:	4628      	mov	r0, r5
 80a1ffa:	aa03      	add	r2, sp, #12
 80a1ffc:	f7ff fe0a 	bl	80a1c14 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2000:	b130      	cbz	r0, 80a2010 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2002:	4631      	mov	r1, r6
 80a2004:	4620      	mov	r0, r4
 80a2006:	f7ff ff7d 	bl	80a1f04 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a200a:	4620      	mov	r0, r4
 80a200c:	b00e      	add	sp, #56	; 0x38
 80a200e:	bd70      	pop	{r4, r5, r6, pc}
 80a2010:	4620      	mov	r0, r4
 80a2012:	a903      	add	r1, sp, #12
 80a2014:	f7ff ff64 	bl	80a1ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2018:	e7f7      	b.n	80a200a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a201a:	bf00      	nop
 80a201c:	200005b0 	.word	0x200005b0

080a2020 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2020:	4b02      	ldr	r3, [pc, #8]	; (80a202c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2022:	4a03      	ldr	r2, [pc, #12]	; (80a2030 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2024:	601a      	str	r2, [r3, #0]
 80a2026:	2200      	movs	r2, #0
 80a2028:	605a      	str	r2, [r3, #4]

} // spark
 80a202a:	4770      	bx	lr
 80a202c:	20000554 	.word	0x20000554
 80a2030:	080a2c74 	.word	0x080a2c74

080a2034 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2036:	4606      	mov	r6, r0
 80a2038:	460d      	mov	r5, r1
  size_t n = 0;
 80a203a:	2400      	movs	r4, #0
 80a203c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a203e:	42bd      	cmp	r5, r7
 80a2040:	d00c      	beq.n	80a205c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2042:	6833      	ldr	r3, [r6, #0]
 80a2044:	4630      	mov	r0, r6
 80a2046:	689b      	ldr	r3, [r3, #8]
 80a2048:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a204c:	4798      	blx	r3
     if (chunk>=0)
 80a204e:	1e03      	subs	r3, r0, #0
 80a2050:	db01      	blt.n	80a2056 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2052:	441c      	add	r4, r3
  while (size--) {
 80a2054:	e7f3      	b.n	80a203e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2056:	2c00      	cmp	r4, #0
 80a2058:	bf08      	it	eq
 80a205a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a205c:	4620      	mov	r0, r4
 80a205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2060 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a2060:	b508      	push	{r3, lr}
  return write(str);
 80a2062:	f7ff f817 	bl	80a1094 <_ZN5Print5writeEPKc>
}
 80a2066:	bd08      	pop	{r3, pc}

080a2068 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a2068:	6803      	ldr	r3, [r0, #0]
 80a206a:	689b      	ldr	r3, [r3, #8]
 80a206c:	4718      	bx	r3

080a206e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a206e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2070:	210d      	movs	r1, #13
{
 80a2072:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2074:	f7ff fff8 	bl	80a2068 <_ZN5Print5printEc>
  n += print('\n');
 80a2078:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a207a:	4604      	mov	r4, r0
  n += print('\n');
 80a207c:	4628      	mov	r0, r5
 80a207e:	f7ff fff3 	bl	80a2068 <_ZN5Print5printEc>
  return n;
}
 80a2082:	4420      	add	r0, r4
 80a2084:	bd38      	pop	{r3, r4, r5, pc}

080a2086 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2086:	b538      	push	{r3, r4, r5, lr}
 80a2088:	4605      	mov	r5, r0
  return write(str);
 80a208a:	f7ff f803 	bl	80a1094 <_ZN5Print5writeEPKc>
 80a208e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a2090:	4628      	mov	r0, r5
 80a2092:	f7ff ffec 	bl	80a206e <_ZN5Print7printlnEv>
  return n;
}
 80a2096:	4420      	add	r0, r4
 80a2098:	bd38      	pop	{r3, r4, r5, pc}

080a209a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a209a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a209c:	2a01      	cmp	r2, #1
 80a209e:	bf98      	it	ls
 80a20a0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a20a2:	b530      	push	{r4, r5, lr}
 80a20a4:	b08b      	sub	sp, #44	; 0x2c
 80a20a6:	460c      	mov	r4, r1
  *str = '\0';
 80a20a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a20ac:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a20ae:	4625      	mov	r5, r4
 80a20b0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a20b4:	fb04 5312 	mls	r3, r4, r2, r5
 80a20b8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a20ba:	2b09      	cmp	r3, #9
 80a20bc:	bf94      	ite	ls
 80a20be:	3330      	addls	r3, #48	; 0x30
 80a20c0:	3337      	addhi	r3, #55	; 0x37
 80a20c2:	b2db      	uxtb	r3, r3
  } while(n);
 80a20c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a20c6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a20ca:	d9f0      	bls.n	80a20ae <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a20cc:	f7fe ffe2 	bl	80a1094 <_ZN5Print5writeEPKc>
}
 80a20d0:	b00b      	add	sp, #44	; 0x2c
 80a20d2:	bd30      	pop	{r4, r5, pc}

080a20d4 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a20d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a20d8:	b086      	sub	sp, #24
 80a20da:	af00      	add	r7, sp, #0
 80a20dc:	4605      	mov	r5, r0
 80a20de:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a20e0:	1d38      	adds	r0, r7, #4
 80a20e2:	2114      	movs	r1, #20
{
 80a20e4:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a20e6:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a20e8:	f7ff fe70 	bl	80a1dcc <vsnprintf>

    if (n<bufsize)
 80a20ec:	2813      	cmp	r0, #19
 80a20ee:	d80e      	bhi.n	80a210e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a20f0:	4628      	mov	r0, r5
 80a20f2:	1d39      	adds	r1, r7, #4
 80a20f4:	f7fe ffce 	bl	80a1094 <_ZN5Print5writeEPKc>
 80a20f8:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a20fa:	b11e      	cbz	r6, 80a2104 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a20fc:	4628      	mov	r0, r5
 80a20fe:	f7ff ffb6 	bl	80a206e <_ZN5Print7printlnEv>
 80a2102:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a2104:	4620      	mov	r0, r4
 80a2106:	3718      	adds	r7, #24
 80a2108:	46bd      	mov	sp, r7
 80a210a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a210e:	f100 0308 	add.w	r3, r0, #8
 80a2112:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a2116:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a2118:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a211c:	4622      	mov	r2, r4
 80a211e:	1c41      	adds	r1, r0, #1
 80a2120:	683b      	ldr	r3, [r7, #0]
 80a2122:	4668      	mov	r0, sp
 80a2124:	f7ff fe52 	bl	80a1dcc <vsnprintf>
  return write(str);
 80a2128:	4669      	mov	r1, sp
 80a212a:	4628      	mov	r0, r5
 80a212c:	f7fe ffb2 	bl	80a1094 <_ZN5Print5writeEPKc>
 80a2130:	4604      	mov	r4, r0
 80a2132:	46c5      	mov	sp, r8
 80a2134:	e7e1      	b.n	80a20fa <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a2136 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a2136:	b510      	push	{r4, lr}
 80a2138:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
 80a213a:	f7ff fd8b 	bl	80a1c54 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
 80a213e:	4284      	cmp	r4, r0
 80a2140:	d008      	beq.n	80a2154 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a2142:	b11c      	cbz	r4, 80a214c <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a2144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
 80a2148:	f7ff bd74 	b.w	80a1c34 <LED_Signaling_Start>
}
 80a214c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
 80a2150:	f7ff bd78 	b.w	80a1c44 <LED_Signaling_Stop>
}
 80a2154:	bd10      	pop	{r4, pc}

080a2156 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a2156:	b570      	push	{r4, r5, r6, lr}
 80a2158:	4605      	mov	r5, r0
 80a215a:	460e      	mov	r6, r1
 80a215c:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
 80a215e:	f7ff fd79 	bl	80a1c54 <LED_RGB_IsOverRidden>
    if (!controlled()) {
 80a2162:	b150      	cbz	r0, 80a217a <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a2164:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80a2168:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
 80a216c:	f7ff fd5a 	bl	80a1c24 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
 80a2170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
 80a2174:	20e7      	movs	r0, #231	; 0xe7
 80a2176:	f7ff bd75 	b.w	80a1c64 <LED_On>
}
 80a217a:	bd70      	pop	{r4, r5, r6, pc}

080a217c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a217c:	2200      	movs	r2, #0
 80a217e:	4b01      	ldr	r3, [pc, #4]	; (80a2184 <_GLOBAL__sub_I_RGB+0x8>)
 80a2180:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a2182:	4770      	bx	lr
 80a2184:	2000055c 	.word	0x2000055c

080a2188 <_ZN14RecursiveMutex6unlockEv.isra.0>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2188:	f7ff bc22 	b.w	80a19d0 <os_mutex_recursive_unlock>

080a218c <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 80a218c:	f7ff bc18 	b.w	80a19c0 <os_mutex_recursive_lock>

080a2190 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2190:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a2192:	2600      	movs	r6, #0
 80a2194:	4604      	mov	r4, r0
 80a2196:	460d      	mov	r5, r1
 80a2198:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a219c:	f7ff fc00 	bl	80a19a0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a21a0:	4628      	mov	r0, r5
    _spi = spi;
 80a21a2:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a21a4:	f7ff fc96 	bl	80a1ad4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a21a8:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a21aa:	6066      	str	r6, [r4, #4]
}
 80a21ac:	bd70      	pop	{r4, r5, r6, pc}

080a21ae <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a21ae:	b510      	push	{r4, lr}
 80a21b0:	4604      	mov	r4, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a21b2:	6880      	ldr	r0, [r0, #8]
 80a21b4:	f7ff ffea 	bl	80a218c <_ZN14RecursiveMutex4lockEv.isra.0>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a21b8:	7820      	ldrb	r0, [r4, #0]
 80a21ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a21be:	f7ff fc79 	bl	80a1ab4 <hal_spi_begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a21c2:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 80a21c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a21c8:	f7ff bfde 	b.w	80a2188 <_ZN14RecursiveMutex6unlockEv.isra.0>

080a21cc <_ZN8SPIClass14endTransactionEv>:
 80a21cc:	6880      	ldr	r0, [r0, #8]
 80a21ce:	f7ff bfdb 	b.w	80a2188 <_ZN14RecursiveMutex6unlockEv.isra.0>
	...

080a21d4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a21d4:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a21d6:	2400      	movs	r4, #0
 80a21d8:	0840      	lsrs	r0, r0, #1
 80a21da:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a21dc:	6818      	ldr	r0, [r3, #0]
 80a21de:	b2e5      	uxtb	r5, r4
 80a21e0:	4288      	cmp	r0, r1
 80a21e2:	d906      	bls.n	80a21f2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a21e4:	3401      	adds	r4, #1
 80a21e6:	2c08      	cmp	r4, #8
 80a21e8:	d002      	beq.n	80a21f0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a21ea:	0840      	lsrs	r0, r0, #1
 80a21ec:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a21ee:	e7f5      	b.n	80a21dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a21f0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a21f2:	4b02      	ldr	r3, [pc, #8]	; (80a21fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a21f4:	5d5b      	ldrb	r3, [r3, r5]
 80a21f6:	7013      	strb	r3, [r2, #0]
}
 80a21f8:	bd30      	pop	{r4, r5, pc}
 80a21fa:	bf00      	nop
 80a21fc:	080a2ca8 	.word	0x080a2ca8

080a2200 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 80a2200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2204:	4606      	mov	r6, r0
 80a2206:	b08f      	sub	sp, #60	; 0x3c
    _mutex.lock();
 80a2208:	6880      	ldr	r0, [r0, #8]
 80a220a:	460c      	mov	r4, r1
 80a220c:	f7ff ffbe 	bl	80a218c <_ZN14RecursiveMutex4lockEv.isra.0>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a2210:	2214      	movs	r2, #20
 80a2212:	2100      	movs	r1, #0
 80a2214:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 80a2216:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a2218:	f000 fbc2 	bl	80a29a0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a221c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a221e:	2200      	movs	r2, #0
 80a2220:	4628      	mov	r0, r5
 80a2222:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 80a2224:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80a2228:	f7ff fc64 	bl	80a1af4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80a222c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80a2230:	b113      	cbz	r3, 80a2238 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80a2232:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a2236:	b155      	cbz	r5, 80a224e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
  {
 80a2238:	2700      	movs	r7, #0
 80a223a:	2501      	movs	r5, #1
 80a223c:	46b9      	mov	r9, r7
 80a223e:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 80a2240:	7923      	ldrb	r3, [r4, #4]
 80a2242:	b15d      	cbz	r5, 80a225c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80a2244:	b1c3      	cbz	r3, 80a2278 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80a2246:	2000      	movs	r0, #0
 80a2248:	b00f      	add	sp, #60	; 0x3c
 80a224a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80a224e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a2252:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a2256:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 80a225a:	e7f1      	b.n	80a2240 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
    if (default_ == other.default_ &&
 80a225c:	2b00      	cmp	r3, #0
 80a225e:	d135      	bne.n	80a22cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 80a2260:	68a3      	ldr	r3, [r4, #8]
 80a2262:	4543      	cmp	r3, r8
 80a2264:	d108      	bne.n	80a2278 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        bitOrder_ == other.bitOrder_ &&
 80a2266:	f88d 9020 	strb.w	r9, [sp, #32]
 80a226a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a226e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a2272:	89a3      	ldrh	r3, [r4, #12]
 80a2274:	429a      	cmp	r2, r3
 80a2276:	d0e6      	beq.n	80a2246 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 80a2278:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a227a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 80a227c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a2280:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a2282:	ab04      	add	r3, sp, #16
 80a2284:	f10d 020f 	add.w	r2, sp, #15
 80a2288:	f7ff ffa4 	bl	80a21d4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 80a228c:	7921      	ldrb	r1, [r4, #4]
 80a228e:	b985      	cbnz	r5, 80a22b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
    if (default_ == other.default_ &&
 80a2290:	b989      	cbnz	r1, 80a22b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a2292:	68a3      	ldr	r3, [r4, #8]
 80a2294:	4543      	cmp	r3, r8
 80a2296:	d30e      	bcc.n	80a22b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        bitOrder_ == other.bitOrder_ &&
 80a2298:	f88d 9020 	strb.w	r9, [sp, #32]
 80a229c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a22a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a22a4:	89a3      	ldrh	r3, [r4, #12]
 80a22a6:	429a      	cmp	r2, r3
 80a22a8:	d105      	bne.n	80a22b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80a22aa:	9b04      	ldr	r3, [sp, #16]
 80a22ac:	4543      	cmp	r3, r8
 80a22ae:	d102      	bne.n	80a22b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a22b0:	e7c9      	b.n	80a2246 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 80a22b2:	2900      	cmp	r1, #0
 80a22b4:	d1f9      	bne.n	80a22aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 80a22b6:	2300      	movs	r3, #0
 80a22b8:	9301      	str	r3, [sp, #4]
 80a22ba:	7b63      	ldrb	r3, [r4, #13]
 80a22bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a22c0:	9300      	str	r3, [sp, #0]
 80a22c2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a22c4:	7830      	ldrb	r0, [r6, #0]
 80a22c6:	f7ff fc2d 	bl	80a1b24 <hal_spi_set_settings>
    return 0;
 80a22ca:	e7bc      	b.n	80a2246 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a22cc:	462b      	mov	r3, r5
 80a22ce:	462a      	mov	r2, r5
 80a22d0:	2101      	movs	r1, #1
 80a22d2:	e9cd 5500 	strd	r5, r5, [sp]
 80a22d6:	e7f5      	b.n	80a22c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

080a22d8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a22d8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a22da:	7800      	ldrb	r0, [r0, #0]
 80a22dc:	f7ff fbf2 	bl	80a1ac4 <hal_spi_transfer>
}
 80a22e0:	b2c0      	uxtb	r0, r0
 80a22e2:	bd08      	pop	{r3, pc}

080a22e4 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80a22e4:	b530      	push	{r4, r5, lr}
 80a22e6:	b087      	sub	sp, #28
 80a22e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a22ea:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 80a22ec:	9500      	str	r5, [sp, #0]
 80a22ee:	7800      	ldrb	r0, [r0, #0]
 80a22f0:	f7ff fc08 	bl	80a1b04 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 80a22f4:	b93d      	cbnz	r5, 80a2306 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 80a22f6:	7820      	ldrb	r0, [r4, #0]
 80a22f8:	a902      	add	r1, sp, #8
 80a22fa:	f7ff fc0b 	bl	80a1b14 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 80a22fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a2302:	07db      	lsls	r3, r3, #31
 80a2304:	d4f7      	bmi.n	80a22f6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 80a2306:	b007      	add	sp, #28
 80a2308:	bd30      	pop	{r4, r5, pc}
	...

080a230c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a230c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a230e:	2000      	movs	r0, #0
 80a2310:	4b04      	ldr	r3, [pc, #16]	; (80a2324 <_GLOBAL__sub_I_System+0x18>)
 80a2312:	601a      	str	r2, [r3, #0]
 80a2314:	4b04      	ldr	r3, [pc, #16]	; (80a2328 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a2316:	4a05      	ldr	r2, [pc, #20]	; (80a232c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a2318:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a231c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a231e:	f7ff bca9 	b.w	80a1c74 <set_system_mode>
 80a2322:	bf00      	nop
 80a2324:	20000578 	.word	0x20000578
 80a2328:	2000056c 	.word	0x2000056c
 80a232c:	ffff0000 	.word	0xffff0000

080a2330 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2330:	4b02      	ldr	r3, [pc, #8]	; (80a233c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2332:	681a      	ldr	r2, [r3, #0]
 80a2334:	4b02      	ldr	r3, [pc, #8]	; (80a2340 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2336:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a2338:	4770      	bx	lr
 80a233a:	bf00      	nop
 80a233c:	20000004 	.word	0x20000004
 80a2340:	2000057c 	.word	0x2000057c

080a2344 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a2344:	4770      	bx	lr

080a2346 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2346:	7441      	strb	r1, [r0, #17]
}
 80a2348:	4770      	bx	lr

080a234a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a234a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a234c:	7c00      	ldrb	r0, [r0, #16]
 80a234e:	f7ff fc21 	bl	80a1b94 <hal_usart_available_data_for_write>
}
 80a2352:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2356:	bd08      	pop	{r3, pc}

080a2358 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2358:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a235a:	7c00      	ldrb	r0, [r0, #16]
 80a235c:	f7ff fbf2 	bl	80a1b44 <hal_usart_available>
}
 80a2360:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2364:	bd08      	pop	{r3, pc}

080a2366 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2366:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a2368:	7c00      	ldrb	r0, [r0, #16]
 80a236a:	f7ff fbfb 	bl	80a1b64 <hal_usart_peek>
}
 80a236e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2372:	bd08      	pop	{r3, pc}

080a2374 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2374:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a2376:	7c00      	ldrb	r0, [r0, #16]
 80a2378:	f7ff fbec 	bl	80a1b54 <hal_usart_read>
}
 80a237c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2380:	bd08      	pop	{r3, pc}

080a2382 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a2382:	7c00      	ldrb	r0, [r0, #16]
 80a2384:	f7ff bbf6 	b.w	80a1b74 <hal_usart_flush>

080a2388 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2388:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a238a:	7c46      	ldrb	r6, [r0, #17]
{
 80a238c:	4604      	mov	r4, r0
 80a238e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2390:	b12e      	cbz	r6, 80a239e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a2392:	4629      	mov	r1, r5
 80a2394:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a239a:	f7ff bbcb 	b.w	80a1b34 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a239e:	7c00      	ldrb	r0, [r0, #16]
 80a23a0:	f7ff fbf8 	bl	80a1b94 <hal_usart_available_data_for_write>
 80a23a4:	2800      	cmp	r0, #0
 80a23a6:	dcf4      	bgt.n	80a2392 <_ZN11USARTSerial5writeEh+0xa>
}
 80a23a8:	4630      	mov	r0, r6
 80a23aa:	bd70      	pop	{r4, r5, r6, pc}

080a23ac <_ZN11USARTSerialD0Ev>:
 80a23ac:	b510      	push	{r4, lr}
 80a23ae:	4604      	mov	r4, r0
 80a23b0:	2114      	movs	r1, #20
 80a23b2:	f7fd fe72 	bl	80a009a <_ZdlPvj>
 80a23b6:	4620      	mov	r0, r4
 80a23b8:	bd10      	pop	{r4, pc}
	...

080a23bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a23bc:	b510      	push	{r4, lr}
 80a23be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a23c2:	4604      	mov	r4, r0
 80a23c4:	4608      	mov	r0, r1
 80a23c6:	4611      	mov	r1, r2
 80a23c8:	2200      	movs	r2, #0
 80a23ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a23ce:	4b04      	ldr	r3, [pc, #16]	; (80a23e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a23d0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a23d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a23d4:	2301      	movs	r3, #1
 80a23d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a23d8:	f7ff fbe4 	bl	80a1ba4 <hal_usart_init_ex>
}
 80a23dc:	4620      	mov	r0, r4
 80a23de:	bd10      	pop	{r4, pc}
 80a23e0:	080a2cd4 	.word	0x080a2cd4

080a23e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a23e4:	7441      	strb	r1, [r0, #17]
}
 80a23e6:	4770      	bx	lr

080a23e8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a23e8:	4770      	bx	lr

080a23ea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a23ea:	4770      	bx	lr

080a23ec <_ZN9USBSerial4readEv>:
{
 80a23ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a23ee:	2100      	movs	r1, #0
 80a23f0:	7c00      	ldrb	r0, [r0, #16]
 80a23f2:	f7ff fbf7 	bl	80a1be4 <HAL_USB_USART_Receive_Data>
}
 80a23f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a23fa:	bd08      	pop	{r3, pc}

080a23fc <_ZN9USBSerial4peekEv>:
{
 80a23fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a23fe:	2101      	movs	r1, #1
 80a2400:	7c00      	ldrb	r0, [r0, #16]
 80a2402:	f7ff fbef 	bl	80a1be4 <HAL_USB_USART_Receive_Data>
}
 80a2406:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a240a:	bd08      	pop	{r3, pc}

080a240c <_ZN9USBSerial17availableForWriteEv>:
{
 80a240c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a240e:	7c00      	ldrb	r0, [r0, #16]
 80a2410:	f7ff fbe0 	bl	80a1bd4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2414:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2418:	bd08      	pop	{r3, pc}

080a241a <_ZN9USBSerial9availableEv>:
{
 80a241a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a241c:	7c00      	ldrb	r0, [r0, #16]
 80a241e:	f7ff fbd1 	bl	80a1bc4 <HAL_USB_USART_Available_Data>
}
 80a2422:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2426:	bd08      	pop	{r3, pc}

080a2428 <_ZN9USBSerial5writeEh>:
{
 80a2428:	b538      	push	{r3, r4, r5, lr}
 80a242a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a242c:	7c00      	ldrb	r0, [r0, #16]
{
 80a242e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2430:	f7ff fbd0 	bl	80a1bd4 <HAL_USB_USART_Available_Data_For_Write>
 80a2434:	2800      	cmp	r0, #0
 80a2436:	dc01      	bgt.n	80a243c <_ZN9USBSerial5writeEh+0x14>
 80a2438:	7c60      	ldrb	r0, [r4, #17]
 80a243a:	b128      	cbz	r0, 80a2448 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a243c:	4629      	mov	r1, r5
 80a243e:	7c20      	ldrb	r0, [r4, #16]
 80a2440:	f7ff fbd8 	bl	80a1bf4 <HAL_USB_USART_Send_Data>
 80a2444:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2448:	bd38      	pop	{r3, r4, r5, pc}

080a244a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a244a:	7c00      	ldrb	r0, [r0, #16]
 80a244c:	f7ff bbda 	b.w	80a1c04 <HAL_USB_USART_Flush_Data>

080a2450 <_ZN9USBSerialD0Ev>:
 80a2450:	b510      	push	{r4, lr}
 80a2452:	4604      	mov	r4, r0
 80a2454:	2114      	movs	r1, #20
 80a2456:	f7fd fe20 	bl	80a009a <_ZdlPvj>
 80a245a:	4620      	mov	r0, r4
 80a245c:	bd10      	pop	{r4, pc}

080a245e <__tcf_1>:
 80a245e:	4770      	bx	lr

080a2460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2460:	b510      	push	{r4, lr}
 80a2462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2466:	4604      	mov	r4, r0
 80a2468:	4608      	mov	r0, r1
 80a246a:	2100      	movs	r1, #0
 80a246c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2470:	4b04      	ldr	r3, [pc, #16]	; (80a2484 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2472:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2474:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2476:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2478:	4611      	mov	r1, r2
  _blocking = true;
 80a247a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a247c:	f7ff fb9a 	bl	80a1bb4 <HAL_USB_USART_Init>
}
 80a2480:	4620      	mov	r0, r4
 80a2482:	bd10      	pop	{r4, pc}
 80a2484:	080a2d04 	.word	0x080a2d04

080a2488 <_Z19acquireSerialBufferv>:
{
 80a2488:	b510      	push	{r4, lr}
 80a248a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a248c:	2214      	movs	r2, #20
 80a248e:	2100      	movs	r1, #0
 80a2490:	f000 fa86 	bl	80a29a0 <memset>
}
 80a2494:	4620      	mov	r0, r4
 80a2496:	bd10      	pop	{r4, pc}

080a2498 <_Z16_fetch_usbserialv>:
{
 80a2498:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a249a:	4d0e      	ldr	r5, [pc, #56]	; (80a24d4 <_Z16_fetch_usbserialv+0x3c>)
{
 80a249c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a249e:	a801      	add	r0, sp, #4
 80a24a0:	f7ff fff2 	bl	80a2488 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a24a4:	7829      	ldrb	r1, [r5, #0]
 80a24a6:	f3bf 8f5b 	dmb	ish
 80a24aa:	f011 0401 	ands.w	r4, r1, #1
 80a24ae:	d10e      	bne.n	80a24ce <_Z16_fetch_usbserialv+0x36>
 80a24b0:	4628      	mov	r0, r5
 80a24b2:	f7fd fdf4 	bl	80a009e <__cxa_guard_acquire>
 80a24b6:	b150      	cbz	r0, 80a24ce <_Z16_fetch_usbserialv+0x36>
 80a24b8:	4621      	mov	r1, r4
 80a24ba:	aa01      	add	r2, sp, #4
 80a24bc:	4806      	ldr	r0, [pc, #24]	; (80a24d8 <_Z16_fetch_usbserialv+0x40>)
 80a24be:	f7ff ffcf 	bl	80a2460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a24c2:	4628      	mov	r0, r5
 80a24c4:	f7fd fdf0 	bl	80a00a8 <__cxa_guard_release>
 80a24c8:	4804      	ldr	r0, [pc, #16]	; (80a24dc <_Z16_fetch_usbserialv+0x44>)
 80a24ca:	f000 fa45 	bl	80a2958 <atexit>
	return _usbserial;
}
 80a24ce:	4802      	ldr	r0, [pc, #8]	; (80a24d8 <_Z16_fetch_usbserialv+0x40>)
 80a24d0:	b007      	add	sp, #28
 80a24d2:	bd30      	pop	{r4, r5, pc}
 80a24d4:	20000580 	.word	0x20000580
 80a24d8:	20000588 	.word	0x20000588
 80a24dc:	080a23e9 	.word	0x080a23e9

080a24e0 <_Z23acquireUSBSerial1Bufferv>:
 80a24e0:	b510      	push	{r4, lr}
 80a24e2:	4604      	mov	r4, r0
 80a24e4:	2214      	movs	r2, #20
 80a24e6:	2100      	movs	r1, #0
 80a24e8:	f000 fa5a 	bl	80a29a0 <memset>
 80a24ec:	4620      	mov	r0, r4
 80a24ee:	bd10      	pop	{r4, pc}

080a24f0 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a24f0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a24f2:	4c0e      	ldr	r4, [pc, #56]	; (80a252c <_Z17_fetch_usbserial1v+0x3c>)
{
 80a24f4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a24f6:	a801      	add	r0, sp, #4
 80a24f8:	f7ff fff2 	bl	80a24e0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a24fc:	7823      	ldrb	r3, [r4, #0]
 80a24fe:	f3bf 8f5b 	dmb	ish
 80a2502:	07db      	lsls	r3, r3, #31
 80a2504:	d40e      	bmi.n	80a2524 <_Z17_fetch_usbserial1v+0x34>
 80a2506:	4620      	mov	r0, r4
 80a2508:	f7fd fdc9 	bl	80a009e <__cxa_guard_acquire>
 80a250c:	b150      	cbz	r0, 80a2524 <_Z17_fetch_usbserial1v+0x34>
 80a250e:	2101      	movs	r1, #1
 80a2510:	aa01      	add	r2, sp, #4
 80a2512:	4807      	ldr	r0, [pc, #28]	; (80a2530 <_Z17_fetch_usbserial1v+0x40>)
 80a2514:	f7ff ffa4 	bl	80a2460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2518:	4620      	mov	r0, r4
 80a251a:	f7fd fdc5 	bl	80a00a8 <__cxa_guard_release>
 80a251e:	4805      	ldr	r0, [pc, #20]	; (80a2534 <_Z17_fetch_usbserial1v+0x44>)
 80a2520:	f000 fa1a 	bl	80a2958 <atexit>
  return _usbserial1;
}
 80a2524:	4802      	ldr	r0, [pc, #8]	; (80a2530 <_Z17_fetch_usbserial1v+0x40>)
 80a2526:	b006      	add	sp, #24
 80a2528:	bd10      	pop	{r4, pc}
 80a252a:	bf00      	nop
 80a252c:	20000584 	.word	0x20000584
 80a2530:	2000059c 	.word	0x2000059c
 80a2534:	080a245f 	.word	0x080a245f

080a2538 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2538:	2200      	movs	r2, #0
 80a253a:	6840      	ldr	r0, [r0, #4]
 80a253c:	4611      	mov	r1, r2
 80a253e:	f7ff bbed 	b.w	80a1d1c <network_ready>

080a2542 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a2542:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2544:	4615      	mov	r5, r2
 80a2546:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a2548:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a254a:	460e      	mov	r6, r1
 80a254c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a254e:	2100      	movs	r1, #0
 80a2550:	a803      	add	r0, sp, #12
 80a2552:	f000 fa25 	bl	80a29a0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2556:	4628      	mov	r0, r5
 80a2558:	f000 fa58 	bl	80a2a0c <strlen>
 80a255c:	2700      	movs	r7, #0
 80a255e:	b281      	uxth	r1, r0
 80a2560:	6873      	ldr	r3, [r6, #4]
 80a2562:	4628      	mov	r0, r5
 80a2564:	9700      	str	r7, [sp, #0]
 80a2566:	aa03      	add	r2, sp, #12
 80a2568:	f7ff fb54 	bl	80a1c14 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a256c:	b130      	cbz	r0, 80a257c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a256e:	4639      	mov	r1, r7
 80a2570:	4620      	mov	r0, r4
 80a2572:	f7ff fcc7 	bl	80a1f04 <_ZN9IPAddressC1Em>
    }
 80a2576:	4620      	mov	r0, r4
 80a2578:	b009      	add	sp, #36	; 0x24
 80a257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a257c:	4620      	mov	r0, r4
 80a257e:	a903      	add	r1, sp, #12
 80a2580:	f7ff fcae 	bl	80a1ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2584:	e7f7      	b.n	80a2576 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2586 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2586:	2200      	movs	r2, #0
 80a2588:	6840      	ldr	r0, [r0, #4]
 80a258a:	4611      	mov	r1, r2
 80a258c:	f7ff bbe6 	b.w	80a1d5c <network_listening>

080a2590 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2590:	2200      	movs	r2, #0
 80a2592:	6840      	ldr	r0, [r0, #4]
 80a2594:	4611      	mov	r1, r2
 80a2596:	f7ff bbf1 	b.w	80a1d7c <network_get_listen_timeout>

080a259a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a259a:	2200      	movs	r2, #0
 80a259c:	6840      	ldr	r0, [r0, #4]
 80a259e:	f7ff bbe5 	b.w	80a1d6c <network_set_listen_timeout>

080a25a2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a25a2:	2200      	movs	r2, #0
 80a25a4:	6840      	ldr	r0, [r0, #4]
 80a25a6:	f081 0101 	eor.w	r1, r1, #1
 80a25aa:	f7ff bbcf 	b.w	80a1d4c <network_listen>

080a25ae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a25ae:	2300      	movs	r3, #0
 80a25b0:	6840      	ldr	r0, [r0, #4]
 80a25b2:	461a      	mov	r2, r3
 80a25b4:	4619      	mov	r1, r3
 80a25b6:	f7ff bbc1 	b.w	80a1d3c <network_off>

080a25ba <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a25ba:	2300      	movs	r3, #0
 80a25bc:	6840      	ldr	r0, [r0, #4]
 80a25be:	461a      	mov	r2, r3
 80a25c0:	4619      	mov	r1, r3
 80a25c2:	f7ff bbb3 	b.w	80a1d2c <network_on>

080a25c6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a25c6:	2200      	movs	r2, #0
 80a25c8:	6840      	ldr	r0, [r0, #4]
 80a25ca:	4611      	mov	r1, r2
 80a25cc:	f7ff bb96 	b.w	80a1cfc <network_connecting>

080a25d0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a25d0:	2200      	movs	r2, #0
 80a25d2:	2102      	movs	r1, #2
 80a25d4:	6840      	ldr	r0, [r0, #4]
 80a25d6:	f7ff bb99 	b.w	80a1d0c <network_disconnect>

080a25da <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a25da:	2300      	movs	r3, #0
 80a25dc:	6840      	ldr	r0, [r0, #4]
 80a25de:	461a      	mov	r2, r3
 80a25e0:	f7ff bb84 	b.w	80a1cec <network_connect>

080a25e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a25e4:	2204      	movs	r2, #4
 80a25e6:	4b02      	ldr	r3, [pc, #8]	; (80a25f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a25e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a25ea:	4a02      	ldr	r2, [pc, #8]	; (80a25f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a25ec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a25ee:	4770      	bx	lr
 80a25f0:	200005b0 	.word	0x200005b0
 80a25f4:	080a2d34 	.word	0x080a2d34

080a25f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a25f8:	4b01      	ldr	r3, [pc, #4]	; (80a2600 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a25fa:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a25fc:	4770      	bx	lr
 80a25fe:	bf00      	nop
 80a2600:	20000008 	.word	0x20000008

080a2604 <serialEventRun>:
{
 80a2604:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2606:	4b13      	ldr	r3, [pc, #76]	; (80a2654 <serialEventRun+0x50>)
 80a2608:	b143      	cbz	r3, 80a261c <serialEventRun+0x18>
 80a260a:	f7ff ff45 	bl	80a2498 <_Z16_fetch_usbserialv>
 80a260e:	6803      	ldr	r3, [r0, #0]
 80a2610:	691b      	ldr	r3, [r3, #16]
 80a2612:	4798      	blx	r3
 80a2614:	2800      	cmp	r0, #0
 80a2616:	dd01      	ble.n	80a261c <serialEventRun+0x18>
        serialEvent();
 80a2618:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a261c:	4b0e      	ldr	r3, [pc, #56]	; (80a2658 <serialEventRun+0x54>)
 80a261e:	b143      	cbz	r3, 80a2632 <serialEventRun+0x2e>
 80a2620:	f000 f974 	bl	80a290c <_Z22__fetch_global_Serial1v>
 80a2624:	6803      	ldr	r3, [r0, #0]
 80a2626:	691b      	ldr	r3, [r3, #16]
 80a2628:	4798      	blx	r3
 80a262a:	2800      	cmp	r0, #0
 80a262c:	dd01      	ble.n	80a2632 <serialEventRun+0x2e>
        serialEvent1();
 80a262e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2632:	4b0a      	ldr	r3, [pc, #40]	; (80a265c <serialEventRun+0x58>)
 80a2634:	b10b      	cbz	r3, 80a263a <serialEventRun+0x36>
 80a2636:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a263a:	4b09      	ldr	r3, [pc, #36]	; (80a2660 <serialEventRun+0x5c>)
 80a263c:	b143      	cbz	r3, 80a2650 <serialEventRun+0x4c>
 80a263e:	f7ff ff57 	bl	80a24f0 <_Z17_fetch_usbserial1v>
 80a2642:	6803      	ldr	r3, [r0, #0]
 80a2644:	691b      	ldr	r3, [r3, #16]
 80a2646:	4798      	blx	r3
 80a2648:	2800      	cmp	r0, #0
 80a264a:	dd01      	ble.n	80a2650 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a264c:	f3af 8000 	nop.w
}
 80a2650:	bd08      	pop	{r3, pc}
 80a2652:	bf00      	nop
	...

080a2664 <_post_loop>:
{
 80a2664:	b508      	push	{r3, lr}
	serialEventRun();
 80a2666:	f7ff ffcd 	bl	80a2604 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a266a:	f7ff f9c9 	bl	80a1a00 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a266e:	4b01      	ldr	r3, [pc, #4]	; (80a2674 <_post_loop+0x10>)
 80a2670:	6018      	str	r0, [r3, #0]
}
 80a2672:	bd08      	pop	{r3, pc}
 80a2674:	200005c0 	.word	0x200005c0

080a2678 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2678:	4805      	ldr	r0, [pc, #20]	; (80a2690 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a267a:	4a06      	ldr	r2, [pc, #24]	; (80a2694 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a267c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a267e:	1a12      	subs	r2, r2, r0
 80a2680:	4905      	ldr	r1, [pc, #20]	; (80a2698 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2682:	f000 f97f 	bl	80a2984 <memcpy>
    __backup_sram_signature = signature;
 80a2686:	4b05      	ldr	r3, [pc, #20]	; (80a269c <_Z33system_initialize_user_backup_ramv+0x24>)
 80a2688:	4a05      	ldr	r2, [pc, #20]	; (80a26a0 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a268a:	601a      	str	r2, [r3, #0]
}
 80a268c:	bd08      	pop	{r3, pc}
 80a268e:	bf00      	nop
 80a2690:	40024000 	.word	0x40024000
 80a2694:	40024004 	.word	0x40024004
 80a2698:	080a2e00 	.word	0x080a2e00
 80a269c:	40024000 	.word	0x40024000
 80a26a0:	9a271c1e 	.word	0x9a271c1e

080a26a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a26a4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a26a6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a26a8:	461a      	mov	r2, r3
 80a26aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a26ae:	9300      	str	r3, [sp, #0]
 80a26b0:	f7ff fb02 	bl	80a1cb8 <system_ctrl_set_result>
}
 80a26b4:	b003      	add	sp, #12
 80a26b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a26bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a26bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a26be:	8843      	ldrh	r3, [r0, #2]
 80a26c0:	2b0a      	cmp	r3, #10
 80a26c2:	d008      	beq.n	80a26d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a26c4:	2b50      	cmp	r3, #80	; 0x50
 80a26c6:	d10b      	bne.n	80a26e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a26c8:	4b09      	ldr	r3, [pc, #36]	; (80a26f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a26ca:	681b      	ldr	r3, [r3, #0]
 80a26cc:	b14b      	cbz	r3, 80a26e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a26ce:	b003      	add	sp, #12
 80a26d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a26d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a26d6:	f7ff ffe5 	bl	80a26a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a26da:	b003      	add	sp, #12
 80a26dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a26e0:	2300      	movs	r3, #0
 80a26e2:	461a      	mov	r2, r3
 80a26e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a26e8:	9300      	str	r3, [sp, #0]
 80a26ea:	f7ff fae5 	bl	80a1cb8 <system_ctrl_set_result>
}
 80a26ee:	e7f4      	b.n	80a26da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a26f0:	200005bc 	.word	0x200005bc

080a26f4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a26f4:	2100      	movs	r1, #0
{
 80a26f6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a26f8:	4811      	ldr	r0, [pc, #68]	; (80a2740 <module_user_init_hook+0x4c>)
 80a26fa:	f7ff fb77 	bl	80a1dec <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a26fe:	4b11      	ldr	r3, [pc, #68]	; (80a2744 <module_user_init_hook+0x50>)
 80a2700:	681a      	ldr	r2, [r3, #0]
 80a2702:	4b11      	ldr	r3, [pc, #68]	; (80a2748 <module_user_init_hook+0x54>)
 80a2704:	429a      	cmp	r2, r3
 80a2706:	bf0c      	ite	eq
 80a2708:	2201      	moveq	r2, #1
 80a270a:	2200      	movne	r2, #0
 80a270c:	4b0f      	ldr	r3, [pc, #60]	; (80a274c <module_user_init_hook+0x58>)
 80a270e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2710:	d001      	beq.n	80a2716 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a2712:	f7ff ffb1 	bl	80a2678 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2716:	f7ff f963 	bl	80a19e0 <HAL_RNG_GetRandomNumber>
 80a271a:	4604      	mov	r4, r0
    srand(seed);
 80a271c:	f000 f948 	bl	80a29b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2720:	4b0b      	ldr	r3, [pc, #44]	; (80a2750 <module_user_init_hook+0x5c>)
 80a2722:	b113      	cbz	r3, 80a272a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2724:	4620      	mov	r0, r4
 80a2726:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a272a:	2100      	movs	r1, #0
 80a272c:	4808      	ldr	r0, [pc, #32]	; (80a2750 <module_user_init_hook+0x5c>)
 80a272e:	f7ff fad5 	bl	80a1cdc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2736:	2100      	movs	r1, #0
 80a2738:	4806      	ldr	r0, [pc, #24]	; (80a2754 <module_user_init_hook+0x60>)
 80a273a:	f7ff bab3 	b.w	80a1ca4 <system_ctrl_set_app_request_handler>
 80a273e:	bf00      	nop
 80a2740:	080a25f9 	.word	0x080a25f9
 80a2744:	40024000 	.word	0x40024000
 80a2748:	9a271c1e 	.word	0x9a271c1e
 80a274c:	200005b8 	.word	0x200005b8
 80a2750:	00000000 	.word	0x00000000
 80a2754:	080a26bd 	.word	0x080a26bd

080a2758 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2758:	4b02      	ldr	r3, [pc, #8]	; (80a2764 <__tcf_0+0xc>)
 80a275a:	6898      	ldr	r0, [r3, #8]
 80a275c:	b108      	cbz	r0, 80a2762 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a275e:	f7ff b927 	b.w	80a19b0 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2762:	4770      	bx	lr
 80a2764:	20000074 	.word	0x20000074

080a2768 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2768:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a276a:	b570      	push	{r4, r5, r6, lr}
 80a276c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a276e:	d901      	bls.n	80a2774 <pinAvailable+0xc>
    return false;
 80a2770:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2772:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2774:	f1a0 030d 	sub.w	r3, r0, #13
 80a2778:	2b02      	cmp	r3, #2
 80a277a:	d90b      	bls.n	80a2794 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a277c:	2801      	cmp	r0, #1
 80a277e:	d824      	bhi.n	80a27ca <pinAvailable+0x62>
 80a2780:	f000 f876 	bl	80a2870 <_Z19__fetch_global_Wirev>
 80a2784:	2100      	movs	r1, #0
 80a2786:	7c00      	ldrb	r0, [r0, #16]
 80a2788:	f7ff f982 	bl	80a1a90 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a278c:	f080 0001 	eor.w	r0, r0, #1
 80a2790:	b2c0      	uxtb	r0, r0
 80a2792:	e7ee      	b.n	80a2772 <pinAvailable+0xa>
 80a2794:	4e12      	ldr	r6, [pc, #72]	; (80a27e0 <pinAvailable+0x78>)
 80a2796:	7831      	ldrb	r1, [r6, #0]
 80a2798:	f3bf 8f5b 	dmb	ish
 80a279c:	f011 0501 	ands.w	r5, r1, #1
 80a27a0:	d10d      	bne.n	80a27be <pinAvailable+0x56>
 80a27a2:	4630      	mov	r0, r6
 80a27a4:	f7fd fc7b 	bl	80a009e <__cxa_guard_acquire>
 80a27a8:	b148      	cbz	r0, 80a27be <pinAvailable+0x56>
 80a27aa:	4629      	mov	r1, r5
 80a27ac:	480d      	ldr	r0, [pc, #52]	; (80a27e4 <pinAvailable+0x7c>)
 80a27ae:	f7ff fcef 	bl	80a2190 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a27b2:	4630      	mov	r0, r6
 80a27b4:	f7fd fc78 	bl	80a00a8 <__cxa_guard_release>
 80a27b8:	480b      	ldr	r0, [pc, #44]	; (80a27e8 <pinAvailable+0x80>)
 80a27ba:	f000 f8cd 	bl	80a2958 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a27be:	4b09      	ldr	r3, [pc, #36]	; (80a27e4 <pinAvailable+0x7c>)
 80a27c0:	7818      	ldrb	r0, [r3, #0]
 80a27c2:	f7ff f98f 	bl	80a1ae4 <hal_spi_is_enabled>
 80a27c6:	2800      	cmp	r0, #0
 80a27c8:	d1d2      	bne.n	80a2770 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a27ca:	3c12      	subs	r4, #18
 80a27cc:	2c01      	cmp	r4, #1
 80a27ce:	d805      	bhi.n	80a27dc <pinAvailable+0x74>
 80a27d0:	f000 f89c 	bl	80a290c <_Z22__fetch_global_Serial1v>
 80a27d4:	7c00      	ldrb	r0, [r0, #16]
 80a27d6:	f7ff f9d5 	bl	80a1b84 <hal_usart_is_enabled>
 80a27da:	e7d7      	b.n	80a278c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a27dc:	2001      	movs	r0, #1
 80a27de:	e7c8      	b.n	80a2772 <pinAvailable+0xa>
 80a27e0:	20000070 	.word	0x20000070
 80a27e4:	20000074 	.word	0x20000074
 80a27e8:	080a2759 	.word	0x080a2759

080a27ec <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a27ec:	2817      	cmp	r0, #23
{
 80a27ee:	b538      	push	{r3, r4, r5, lr}
 80a27f0:	4604      	mov	r4, r0
 80a27f2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a27f4:	d80a      	bhi.n	80a280c <pinMode+0x20>
 80a27f6:	29ff      	cmp	r1, #255	; 0xff
 80a27f8:	d008      	beq.n	80a280c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a27fa:	f7ff ffb5 	bl	80a2768 <pinAvailable>
 80a27fe:	b128      	cbz	r0, 80a280c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2800:	4629      	mov	r1, r5
 80a2802:	4620      	mov	r0, r4
}
 80a2804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2808:	f7ff b902 	b.w	80a1a10 <HAL_Pin_Mode>
}
 80a280c:	bd38      	pop	{r3, r4, r5, pc}

080a280e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a280e:	b538      	push	{r3, r4, r5, lr}
 80a2810:	4604      	mov	r4, r0
 80a2812:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2814:	f7ff f904 	bl	80a1a20 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2818:	28ff      	cmp	r0, #255	; 0xff
 80a281a:	d010      	beq.n	80a283e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a281c:	2806      	cmp	r0, #6
 80a281e:	d804      	bhi.n	80a282a <digitalWrite+0x1c>
 80a2820:	234d      	movs	r3, #77	; 0x4d
 80a2822:	fa23 f000 	lsr.w	r0, r3, r0
 80a2826:	07c3      	lsls	r3, r0, #31
 80a2828:	d409      	bmi.n	80a283e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a282a:	4620      	mov	r0, r4
 80a282c:	f7ff ff9c 	bl	80a2768 <pinAvailable>
 80a2830:	b128      	cbz	r0, 80a283e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2832:	4629      	mov	r1, r5
 80a2834:	4620      	mov	r0, r4
}
 80a2836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a283a:	f7ff b8f9 	b.w	80a1a30 <HAL_GPIO_Write>
}
 80a283e:	bd38      	pop	{r3, r4, r5, pc}

080a2840 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2840:	4770      	bx	lr
	...

080a2844 <_Z17acquireWireBufferv>:
{
 80a2844:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2846:	2314      	movs	r3, #20
 80a2848:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a284a:	4e08      	ldr	r6, [pc, #32]	; (80a286c <_Z17acquireWireBufferv+0x28>)
{
 80a284c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a284e:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2850:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2852:	6085      	str	r5, [r0, #8]
 80a2854:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2856:	4628      	mov	r0, r5
 80a2858:	f000 f87c 	bl	80a2954 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a285c:	4631      	mov	r1, r6
	};
 80a285e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2860:	4628      	mov	r0, r5
 80a2862:	f000 f877 	bl	80a2954 <_ZnajRKSt9nothrow_t>
	};
 80a2866:	60e0      	str	r0, [r4, #12]
}
 80a2868:	4620      	mov	r0, r4
 80a286a:	bd70      	pop	{r4, r5, r6, pc}
 80a286c:	080a2d68 	.word	0x080a2d68

080a2870 <_Z19__fetch_global_Wirev>:
{
 80a2870:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2872:	4d0e      	ldr	r5, [pc, #56]	; (80a28ac <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2874:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2876:	7829      	ldrb	r1, [r5, #0]
 80a2878:	f3bf 8f5b 	dmb	ish
 80a287c:	f011 0401 	ands.w	r4, r1, #1
 80a2880:	d111      	bne.n	80a28a6 <_Z19__fetch_global_Wirev+0x36>
 80a2882:	4628      	mov	r0, r5
 80a2884:	f7fd fc0b 	bl	80a009e <__cxa_guard_acquire>
 80a2888:	b168      	cbz	r0, 80a28a6 <_Z19__fetch_global_Wirev+0x36>
 80a288a:	a801      	add	r0, sp, #4
 80a288c:	f7ff ffda 	bl	80a2844 <_Z17acquireWireBufferv>
 80a2890:	4621      	mov	r1, r4
 80a2892:	aa01      	add	r2, sp, #4
 80a2894:	4806      	ldr	r0, [pc, #24]	; (80a28b0 <_Z19__fetch_global_Wirev+0x40>)
 80a2896:	f7ff fae1 	bl	80a1e5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a289a:	4628      	mov	r0, r5
 80a289c:	f7fd fc04 	bl	80a00a8 <__cxa_guard_release>
 80a28a0:	4804      	ldr	r0, [pc, #16]	; (80a28b4 <_Z19__fetch_global_Wirev+0x44>)
 80a28a2:	f000 f859 	bl	80a2958 <atexit>
	return wire;
}
 80a28a6:	4802      	ldr	r0, [pc, #8]	; (80a28b0 <_Z19__fetch_global_Wirev+0x40>)
 80a28a8:	b007      	add	sp, #28
 80a28aa:	bd30      	pop	{r4, r5, pc}
 80a28ac:	200005c4 	.word	0x200005c4
 80a28b0:	200005c8 	.word	0x200005c8
 80a28b4:	080a2841 	.word	0x080a2841

080a28b8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a28b8:	2300      	movs	r3, #0
 80a28ba:	b507      	push	{r0, r1, r2, lr}
 80a28bc:	461a      	mov	r2, r3
 80a28be:	4619      	mov	r1, r3
 80a28c0:	9300      	str	r3, [sp, #0]
 80a28c2:	4803      	ldr	r0, [pc, #12]	; (80a28d0 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a28c4:	f7ff fb34 	bl	80a1f30 <_ZN9IPAddressC1Ehhhh>
 80a28c8:	b003      	add	sp, #12
 80a28ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80a28ce:	bf00      	nop
 80a28d0:	200005dc 	.word	0x200005dc

080a28d4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a28d4:	4770      	bx	lr
	...

080a28d8 <_Z20acquireSerial1Bufferv>:
{
 80a28d8:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a28da:	2514      	movs	r5, #20
{
 80a28dc:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a28de:	462a      	mov	r2, r5
 80a28e0:	2100      	movs	r1, #0
 80a28e2:	f000 f85d 	bl	80a29a0 <memset>
 80a28e6:	8025      	strh	r5, [r4, #0]
 80a28e8:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a28ea:	4e07      	ldr	r6, [pc, #28]	; (80a2908 <_Z20acquireSerial1Bufferv+0x30>)
 80a28ec:	4628      	mov	r0, r5
 80a28ee:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a28f0:	8125      	strh	r5, [r4, #8]
 80a28f2:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a28f4:	f000 f82e 	bl	80a2954 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a28f8:	4631      	mov	r1, r6
    };
 80a28fa:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a28fc:	4628      	mov	r0, r5
 80a28fe:	f000 f829 	bl	80a2954 <_ZnajRKSt9nothrow_t>
    };
 80a2902:	60e0      	str	r0, [r4, #12]
}
 80a2904:	4620      	mov	r0, r4
 80a2906:	bd70      	pop	{r4, r5, r6, pc}
 80a2908:	080a2d68 	.word	0x080a2d68

080a290c <_Z22__fetch_global_Serial1v>:
{
 80a290c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a290e:	4d0e      	ldr	r5, [pc, #56]	; (80a2948 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a2910:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2912:	7829      	ldrb	r1, [r5, #0]
 80a2914:	f3bf 8f5b 	dmb	ish
 80a2918:	f011 0401 	ands.w	r4, r1, #1
 80a291c:	d111      	bne.n	80a2942 <_Z22__fetch_global_Serial1v+0x36>
 80a291e:	4628      	mov	r0, r5
 80a2920:	f7fd fbbd 	bl	80a009e <__cxa_guard_acquire>
 80a2924:	b168      	cbz	r0, 80a2942 <_Z22__fetch_global_Serial1v+0x36>
 80a2926:	a801      	add	r0, sp, #4
 80a2928:	f7ff ffd6 	bl	80a28d8 <_Z20acquireSerial1Bufferv>
 80a292c:	4621      	mov	r1, r4
 80a292e:	aa01      	add	r2, sp, #4
 80a2930:	4806      	ldr	r0, [pc, #24]	; (80a294c <_Z22__fetch_global_Serial1v+0x40>)
 80a2932:	f7ff fd43 	bl	80a23bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a2936:	4628      	mov	r0, r5
 80a2938:	f7fd fbb6 	bl	80a00a8 <__cxa_guard_release>
 80a293c:	4804      	ldr	r0, [pc, #16]	; (80a2950 <_Z22__fetch_global_Serial1v+0x44>)
 80a293e:	f000 f80b 	bl	80a2958 <atexit>
    return serial1;
}
 80a2942:	4802      	ldr	r0, [pc, #8]	; (80a294c <_Z22__fetch_global_Serial1v+0x40>)
 80a2944:	b007      	add	sp, #28
 80a2946:	bd30      	pop	{r4, r5, pc}
 80a2948:	200005f4 	.word	0x200005f4
 80a294c:	200005f8 	.word	0x200005f8
 80a2950:	080a28d5 	.word	0x080a28d5

080a2954 <_ZnajRKSt9nothrow_t>:
 80a2954:	f7fd bb9f 	b.w	80a0096 <_Znaj>

080a2958 <atexit>:
 80a2958:	2300      	movs	r3, #0
 80a295a:	4601      	mov	r1, r0
 80a295c:	461a      	mov	r2, r3
 80a295e:	4618      	mov	r0, r3
 80a2960:	f000 b85c 	b.w	80a2a1c <__register_exitproc>

080a2964 <memcmp>:
 80a2964:	b510      	push	{r4, lr}
 80a2966:	3901      	subs	r1, #1
 80a2968:	4402      	add	r2, r0
 80a296a:	4290      	cmp	r0, r2
 80a296c:	d101      	bne.n	80a2972 <memcmp+0xe>
 80a296e:	2000      	movs	r0, #0
 80a2970:	e005      	b.n	80a297e <memcmp+0x1a>
 80a2972:	7803      	ldrb	r3, [r0, #0]
 80a2974:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a2978:	42a3      	cmp	r3, r4
 80a297a:	d001      	beq.n	80a2980 <memcmp+0x1c>
 80a297c:	1b18      	subs	r0, r3, r4
 80a297e:	bd10      	pop	{r4, pc}
 80a2980:	3001      	adds	r0, #1
 80a2982:	e7f2      	b.n	80a296a <memcmp+0x6>

080a2984 <memcpy>:
 80a2984:	440a      	add	r2, r1
 80a2986:	4291      	cmp	r1, r2
 80a2988:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a298c:	d100      	bne.n	80a2990 <memcpy+0xc>
 80a298e:	4770      	bx	lr
 80a2990:	b510      	push	{r4, lr}
 80a2992:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2996:	4291      	cmp	r1, r2
 80a2998:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a299c:	d1f9      	bne.n	80a2992 <memcpy+0xe>
 80a299e:	bd10      	pop	{r4, pc}

080a29a0 <memset>:
 80a29a0:	4603      	mov	r3, r0
 80a29a2:	4402      	add	r2, r0
 80a29a4:	4293      	cmp	r3, r2
 80a29a6:	d100      	bne.n	80a29aa <memset+0xa>
 80a29a8:	4770      	bx	lr
 80a29aa:	f803 1b01 	strb.w	r1, [r3], #1
 80a29ae:	e7f9      	b.n	80a29a4 <memset+0x4>

080a29b0 <srand>:
 80a29b0:	b538      	push	{r3, r4, r5, lr}
 80a29b2:	4b10      	ldr	r3, [pc, #64]	; (80a29f4 <srand+0x44>)
 80a29b4:	4604      	mov	r4, r0
 80a29b6:	681d      	ldr	r5, [r3, #0]
 80a29b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a29ba:	b9b3      	cbnz	r3, 80a29ea <srand+0x3a>
 80a29bc:	2018      	movs	r0, #24
 80a29be:	f7ff f9f5 	bl	80a1dac <malloc>
 80a29c2:	4602      	mov	r2, r0
 80a29c4:	63a8      	str	r0, [r5, #56]	; 0x38
 80a29c6:	b920      	cbnz	r0, 80a29d2 <srand+0x22>
 80a29c8:	2142      	movs	r1, #66	; 0x42
 80a29ca:	4b0b      	ldr	r3, [pc, #44]	; (80a29f8 <srand+0x48>)
 80a29cc:	480b      	ldr	r0, [pc, #44]	; (80a29fc <srand+0x4c>)
 80a29ce:	f7ff fa05 	bl	80a1ddc <__assert_func>
 80a29d2:	490b      	ldr	r1, [pc, #44]	; (80a2a00 <srand+0x50>)
 80a29d4:	4b0b      	ldr	r3, [pc, #44]	; (80a2a04 <srand+0x54>)
 80a29d6:	e9c0 1300 	strd	r1, r3, [r0]
 80a29da:	4b0b      	ldr	r3, [pc, #44]	; (80a2a08 <srand+0x58>)
 80a29dc:	2100      	movs	r1, #0
 80a29de:	6083      	str	r3, [r0, #8]
 80a29e0:	230b      	movs	r3, #11
 80a29e2:	8183      	strh	r3, [r0, #12]
 80a29e4:	2001      	movs	r0, #1
 80a29e6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a29ea:	2200      	movs	r2, #0
 80a29ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a29ee:	611c      	str	r4, [r3, #16]
 80a29f0:	615a      	str	r2, [r3, #20]
 80a29f2:	bd38      	pop	{r3, r4, r5, pc}
 80a29f4:	20000008 	.word	0x20000008
 80a29f8:	080a2d69 	.word	0x080a2d69
 80a29fc:	080a2d80 	.word	0x080a2d80
 80a2a00:	abcd330e 	.word	0xabcd330e
 80a2a04:	e66d1234 	.word	0xe66d1234
 80a2a08:	0005deec 	.word	0x0005deec

080a2a0c <strlen>:
 80a2a0c:	4603      	mov	r3, r0
 80a2a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2a12:	2a00      	cmp	r2, #0
 80a2a14:	d1fb      	bne.n	80a2a0e <strlen+0x2>
 80a2a16:	1a18      	subs	r0, r3, r0
 80a2a18:	3801      	subs	r0, #1
 80a2a1a:	4770      	bx	lr

080a2a1c <__register_exitproc>:
 80a2a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2a20:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a2ad0 <__register_exitproc+0xb4>
 80a2a24:	4606      	mov	r6, r0
 80a2a26:	f8d8 0000 	ldr.w	r0, [r8]
 80a2a2a:	461f      	mov	r7, r3
 80a2a2c:	460d      	mov	r5, r1
 80a2a2e:	4691      	mov	r9, r2
 80a2a30:	f000 f858 	bl	80a2ae4 <__retarget_lock_acquire_recursive>
 80a2a34:	4b27      	ldr	r3, [pc, #156]	; (80a2ad4 <__register_exitproc+0xb8>)
 80a2a36:	681c      	ldr	r4, [r3, #0]
 80a2a38:	b934      	cbnz	r4, 80a2a48 <__register_exitproc+0x2c>
 80a2a3a:	4c27      	ldr	r4, [pc, #156]	; (80a2ad8 <__register_exitproc+0xbc>)
 80a2a3c:	601c      	str	r4, [r3, #0]
 80a2a3e:	4b27      	ldr	r3, [pc, #156]	; (80a2adc <__register_exitproc+0xc0>)
 80a2a40:	b113      	cbz	r3, 80a2a48 <__register_exitproc+0x2c>
 80a2a42:	681b      	ldr	r3, [r3, #0]
 80a2a44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a2a48:	6863      	ldr	r3, [r4, #4]
 80a2a4a:	2b1f      	cmp	r3, #31
 80a2a4c:	dd07      	ble.n	80a2a5e <__register_exitproc+0x42>
 80a2a4e:	f8d8 0000 	ldr.w	r0, [r8]
 80a2a52:	f000 f849 	bl	80a2ae8 <__retarget_lock_release_recursive>
 80a2a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2a5e:	b35e      	cbz	r6, 80a2ab8 <__register_exitproc+0x9c>
 80a2a60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a2a64:	b988      	cbnz	r0, 80a2a8a <__register_exitproc+0x6e>
 80a2a66:	4b1e      	ldr	r3, [pc, #120]	; (80a2ae0 <__register_exitproc+0xc4>)
 80a2a68:	b923      	cbnz	r3, 80a2a74 <__register_exitproc+0x58>
 80a2a6a:	f8d8 0000 	ldr.w	r0, [r8]
 80a2a6e:	f000 f83a 	bl	80a2ae6 <__retarget_lock_release>
 80a2a72:	e7f0      	b.n	80a2a56 <__register_exitproc+0x3a>
 80a2a74:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a2a78:	f7ff f998 	bl	80a1dac <malloc>
 80a2a7c:	2800      	cmp	r0, #0
 80a2a7e:	d0f4      	beq.n	80a2a6a <__register_exitproc+0x4e>
 80a2a80:	2300      	movs	r3, #0
 80a2a82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a2a86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a2a8a:	2201      	movs	r2, #1
 80a2a8c:	6863      	ldr	r3, [r4, #4]
 80a2a8e:	2e02      	cmp	r6, #2
 80a2a90:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2a94:	fa02 f203 	lsl.w	r2, r2, r3
 80a2a98:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a2a9c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2aa0:	ea43 0302 	orr.w	r3, r3, r2
 80a2aa4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2aa8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a2aac:	bf02      	ittt	eq
 80a2aae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2ab2:	4313      	orreq	r3, r2
 80a2ab4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a2ab8:	6863      	ldr	r3, [r4, #4]
 80a2aba:	f8d8 0000 	ldr.w	r0, [r8]
 80a2abe:	1c5a      	adds	r2, r3, #1
 80a2ac0:	3302      	adds	r3, #2
 80a2ac2:	6062      	str	r2, [r4, #4]
 80a2ac4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2ac8:	f000 f80e 	bl	80a2ae8 <__retarget_lock_release_recursive>
 80a2acc:	2000      	movs	r0, #0
 80a2ace:	e7c4      	b.n	80a2a5a <__register_exitproc+0x3e>
 80a2ad0:	2000006c 	.word	0x2000006c
 80a2ad4:	20000698 	.word	0x20000698
 80a2ad8:	2000060c 	.word	0x2000060c
 80a2adc:	00000000 	.word	0x00000000
 80a2ae0:	080a1dad 	.word	0x080a1dad

080a2ae4 <__retarget_lock_acquire_recursive>:
 80a2ae4:	4770      	bx	lr

080a2ae6 <__retarget_lock_release>:
 80a2ae6:	4770      	bx	lr

080a2ae8 <__retarget_lock_release_recursive>:
 80a2ae8:	4770      	bx	lr

080a2aea <link_code_end>:
	...

080a2aec <dynalib_user>:
 80a2aec:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2afc:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
 80a2b0c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
 80a2b1c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
 80a2b2c:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
 80a2b3c:	4f4d 4544 7525 003e 4453 5220 6c65 7961     MODE%u>.SD Relay
 80a2b4c:	4f20 004e 4453 5220 6c65 7961 4f20 4646      ON.SD Relay OFF
 80a2b5c:	6300 6568 6b63 742e 7478 5300 2044 6143     .check.txt.SD Ca
 80a2b6c:	6472 4520 5252 524f 203a 6542 6967 206e     rd ERROR: Begin 
 80a2b7c:	6146 6c69 6465 5300 2064 6143 6472 4520     Failed.Sd Card E
 80a2b8c:	5252 524f 203a 7245 6f72 2072 706f 6e65     RROR: Error open
 80a2b9c:	696e 676e 6620 6c69 0065 6f4c 2067 6966     ning file.Log fi
 80a2bac:	656c 6f20 6570 656e 2164 4c00 676f 6620     le opened!.Log f
 80a2bbc:	6c69 2065 6c63 736f 6465 002e 4453 4320     ile closed..SD C
 80a2bcc:	7261 2064 7349 4f20 2e4b 5300 2064 6143     ard Is OK..Sd Ca
 80a2bdc:	6472 4520 5252 524f 203a 6966 656c 6620     rd ERROR: file f
 80a2bec:	6961 656c 2064 6f74 6220 2065 6c63 736f     ailed to be clos
 80a2bfc:	6465 002e                                   ed..

080a2c00 <_ZTVN8particle11SPISettingsE>:
	...
 80a2c08:	011d 080a 00af 080a 00b3 080a               ............

080a2c14 <_ZTV6SdFile>:
	...
 80a2c1c:	00b1 080a 00c1 080a 00e7 080a 00e1 080a     ................

080a2c2c <_ZTV7TwoWire>:
	...
 80a2c34:	1e03 080a 1e4d 080a 1e25 080a 1e05 080a     ....M...%.......
 80a2c44:	1e2d 080a 1e35 080a 1e3d 080a 1e45 080a     -...5...=...E...

080a2c54 <_ZTV9IPAddress>:
	...
 80a2c5c:	1e83 080a 1e81 080a 1eb5 080a 7061 0070     ............app.

080a2c6c <_ZTVN5spark12NetworkClassE>:
	...
 80a2c74:	1f59 080a 1f63 080a 1f6d 080a 1f77 080a     Y...c...m...w...
 80a2c84:	1f81 080a 1f8d 080a 1f99 080a 1fa1 080a     ................
 80a2c94:	1fa9 080a 1fb5 080a 1fbd 080a 1fc7 080a     ................
 80a2ca4:	1fd1 080a                                   ....

080a2ca8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a2ca8:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 80a2cb8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a2cc8:	6d69 0065                                   ime.

080a2ccc <_ZTV11USARTSerial>:
	...
 80a2cd4:	2345 080a 23ad 080a 2389 080a 2035 080a     E#...#...#..5 ..
 80a2ce4:	2359 080a 2375 080a 2367 080a 2383 080a     Y#..u#..g#...#..
 80a2cf4:	2347 080a 234b 080a                         G#..K#..

080a2cfc <_ZTV9USBSerial>:
	...
 80a2d04:	23eb 080a 2451 080a 2429 080a 2035 080a     .#..Q$..)$..5 ..
 80a2d14:	241b 080a 23ed 080a 23fd 080a 244b 080a     .$...#...#..K$..
 80a2d24:	240d 080a 23e5 080a                         .$...#..

080a2d2c <_ZTVN5spark9WiFiClassE>:
	...
 80a2d34:	25db 080a 25d1 080a 25c7 080a 2539 080a     .%...%...%..9%..
 80a2d44:	25bb 080a 25af 080a 1f99 080a 1fa1 080a     .%...%..........
 80a2d54:	25a3 080a 259b 080a 2591 080a 2587 080a     .%...%...%...%..
 80a2d64:	2543 080a                                   C%..

080a2d68 <_ZSt7nothrow>:
 80a2d68:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a2d78:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 80a2d88:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 80a2d98:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 80a2da8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 80a2db8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 80a2dc8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

080a2dd9 <link_const_variable_data_end>:
 80a2dd9:	00          	.byte	0x00
	...

080a2ddc <link_constructors_location>:
 80a2ddc:	080a03a5 	.word	0x080a03a5
 80a2de0:	080a1f49 	.word	0x080a1f49
 80a2de4:	080a2021 	.word	0x080a2021
 80a2de8:	080a217d 	.word	0x080a217d
 80a2dec:	080a230d 	.word	0x080a230d
 80a2df0:	080a2331 	.word	0x080a2331
 80a2df4:	080a25e5 	.word	0x080a25e5
 80a2df8:	080a28b9 	.word	0x080a28b9

080a2dfc <link_constructors_end>:
 80a2dfc:	00000000 	.word	0x00000000
